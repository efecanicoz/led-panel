
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

000001c0 <Reset_Handler>:
     1c0:	b672      	cpsid	i
     1c2:	4821      	ldr	r0, [pc, #132]	; (248 <endfiniloop+0x4>)
     1c4:	f380 8809 	msr	PSP, r0
     1c8:	2002      	movs	r0, #2
     1ca:	f380 8814 	msr	CONTROL, r0
     1ce:	f3bf 8f6f 	isb	sy
     1d2:	f000 f90d 	bl	3f0 <__core_init>
     1d6:	f003 fdfb 	bl	3dd0 <__early_init>
     1da:	481c      	ldr	r0, [pc, #112]	; (24c <endfiniloop+0x8>)
     1dc:	491c      	ldr	r1, [pc, #112]	; (250 <endfiniloop+0xc>)
     1de:	4a1d      	ldr	r2, [pc, #116]	; (254 <endfiniloop+0x10>)

000001e0 <msloop>:
     1e0:	4291      	cmp	r1, r2
     1e2:	bf3c      	itt	cc
     1e4:	f841 0b04 	strcc.w	r0, [r1], #4
     1e8:	e7fa      	bcc.n	1e0 <msloop>
     1ea:	491b      	ldr	r1, [pc, #108]	; (258 <endfiniloop+0x14>)
     1ec:	4a16      	ldr	r2, [pc, #88]	; (248 <endfiniloop+0x4>)

000001ee <psloop>:
     1ee:	4291      	cmp	r1, r2
     1f0:	bf3c      	itt	cc
     1f2:	f841 0b04 	strcc.w	r0, [r1], #4
     1f6:	e7fa      	bcc.n	1ee <psloop>
     1f8:	4918      	ldr	r1, [pc, #96]	; (25c <endfiniloop+0x18>)
     1fa:	4a19      	ldr	r2, [pc, #100]	; (260 <endfiniloop+0x1c>)
     1fc:	4b19      	ldr	r3, [pc, #100]	; (264 <endfiniloop+0x20>)

000001fe <dloop>:
     1fe:	429a      	cmp	r2, r3
     200:	bf3e      	ittt	cc
     202:	f851 0b04 	ldrcc.w	r0, [r1], #4
     206:	f842 0b04 	strcc.w	r0, [r2], #4
     20a:	e7f8      	bcc.n	1fe <dloop>
     20c:	2000      	movs	r0, #0
     20e:	4916      	ldr	r1, [pc, #88]	; (268 <endfiniloop+0x24>)
     210:	4a16      	ldr	r2, [pc, #88]	; (26c <endfiniloop+0x28>)

00000212 <bloop>:
     212:	4291      	cmp	r1, r2
     214:	bf3c      	itt	cc
     216:	f841 0b04 	strcc.w	r0, [r1], #4
     21a:	e7fa      	bcc.n	212 <bloop>
     21c:	f000 f8f0 	bl	400 <__late_init>
     220:	4c13      	ldr	r4, [pc, #76]	; (270 <endfiniloop+0x2c>)
     222:	4d14      	ldr	r5, [pc, #80]	; (274 <endfiniloop+0x30>)

00000224 <initloop>:
     224:	42ac      	cmp	r4, r5
     226:	da03      	bge.n	230 <endinitloop>
     228:	f854 1b04 	ldr.w	r1, [r4], #4
     22c:	4788      	blx	r1
     22e:	e7f9      	b.n	224 <initloop>

00000230 <endinitloop>:
     230:	f003 fdde 	bl	3df0 <main>
     234:	4c10      	ldr	r4, [pc, #64]	; (278 <endfiniloop+0x34>)
     236:	4d11      	ldr	r5, [pc, #68]	; (27c <endfiniloop+0x38>)

00000238 <finiloop>:
     238:	42ac      	cmp	r4, r5
     23a:	da03      	bge.n	244 <endfiniloop>
     23c:	f854 1b04 	ldr.w	r1, [r4], #4
     240:	4788      	blx	r1
     242:	e7f9      	b.n	238 <finiloop>

00000244 <endfiniloop>:
     244:	f000 b8e4 	b.w	410 <__default_exit>
     248:	20000800 	.word	0x20000800
     24c:	55555555 	.word	0x55555555
     250:	20000000 	.word	0x20000000
     254:	20000400 	.word	0x20000400
     258:	20000400 	.word	0x20000400
     25c:	000040f0 	.word	0x000040f0
     260:	20000800 	.word	0x20000800
     264:	20000800 	.word	0x20000800
     268:	20000800 	.word	0x20000800
     26c:	20000e1c 	.word	0x20000e1c
     270:	000001c0 	.word	0x000001c0
     274:	000001c0 	.word	0x000001c0
     278:	000001c0 	.word	0x000001c0
     27c:	000001c0 	.word	0x000001c0

00000280 <_port_switch>:
     280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     284:	f8c1 d00c 	str.w	sp, [r1, #12]
     288:	f8d0 d00c 	ldr.w	sp, [r0, #12]
     28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000290 <_port_thread_start>:
     290:	2300      	movs	r3, #0
     292:	f383 8811 	msr	BASEPRI, r3
     296:	4628      	mov	r0, r5
     298:	47a0      	blx	r4
     29a:	2000      	movs	r0, #0
     29c:	f000 ff40 	bl	1120 <chThdExit>

000002a0 <_port_switch_from_isr>:
     2a0:	f000 fdde 	bl	e60 <chSchDoReschedule>

000002a4 <_port_exit_from_isr>:
     2a4:	df00      	svc	0
     2a6:	e7fe      	b.n	2a6 <_port_exit_from_isr+0x2>
	...

000002b0 <memcpy>:
     2b0:	4684      	mov	ip, r0
     2b2:	ea41 0300 	orr.w	r3, r1, r0
     2b6:	f013 0303 	ands.w	r3, r3, #3
     2ba:	d16d      	bne.n	398 <memcpy+0xe8>
     2bc:	3a40      	subs	r2, #64	; 0x40
     2be:	d341      	bcc.n	344 <memcpy+0x94>
     2c0:	f851 3b04 	ldr.w	r3, [r1], #4
     2c4:	f840 3b04 	str.w	r3, [r0], #4
     2c8:	f851 3b04 	ldr.w	r3, [r1], #4
     2cc:	f840 3b04 	str.w	r3, [r0], #4
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	3a40      	subs	r2, #64	; 0x40
     342:	d2bd      	bcs.n	2c0 <memcpy+0x10>
     344:	3230      	adds	r2, #48	; 0x30
     346:	d311      	bcc.n	36c <memcpy+0xbc>
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	f851 3b04 	ldr.w	r3, [r1], #4
     354:	f840 3b04 	str.w	r3, [r0], #4
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	3a10      	subs	r2, #16
     36a:	d2ed      	bcs.n	348 <memcpy+0x98>
     36c:	320c      	adds	r2, #12
     36e:	d305      	bcc.n	37c <memcpy+0xcc>
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a04      	subs	r2, #4
     37a:	d2f9      	bcs.n	370 <memcpy+0xc0>
     37c:	3204      	adds	r2, #4
     37e:	d008      	beq.n	392 <memcpy+0xe2>
     380:	07d2      	lsls	r2, r2, #31
     382:	bf1c      	itt	ne
     384:	f811 3b01 	ldrbne.w	r3, [r1], #1
     388:	f800 3b01 	strbne.w	r3, [r0], #1
     38c:	d301      	bcc.n	392 <memcpy+0xe2>
     38e:	880b      	ldrh	r3, [r1, #0]
     390:	8003      	strh	r3, [r0, #0]
     392:	4660      	mov	r0, ip
     394:	4770      	bx	lr
     396:	bf00      	nop
     398:	2a08      	cmp	r2, #8
     39a:	d313      	bcc.n	3c4 <memcpy+0x114>
     39c:	078b      	lsls	r3, r1, #30
     39e:	d08d      	beq.n	2bc <memcpy+0xc>
     3a0:	f010 0303 	ands.w	r3, r0, #3
     3a4:	d08a      	beq.n	2bc <memcpy+0xc>
     3a6:	f1c3 0304 	rsb	r3, r3, #4
     3aa:	1ad2      	subs	r2, r2, r3
     3ac:	07db      	lsls	r3, r3, #31
     3ae:	bf1c      	itt	ne
     3b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3b4:	f800 3b01 	strbne.w	r3, [r0], #1
     3b8:	d380      	bcc.n	2bc <memcpy+0xc>
     3ba:	f831 3b02 	ldrh.w	r3, [r1], #2
     3be:	f820 3b02 	strh.w	r3, [r0], #2
     3c2:	e77b      	b.n	2bc <memcpy+0xc>
     3c4:	3a04      	subs	r2, #4
     3c6:	d3d9      	bcc.n	37c <memcpy+0xcc>
     3c8:	3a01      	subs	r2, #1
     3ca:	f811 3b01 	ldrb.w	r3, [r1], #1
     3ce:	f800 3b01 	strb.w	r3, [r0], #1
     3d2:	d2f9      	bcs.n	3c8 <memcpy+0x118>
     3d4:	780b      	ldrb	r3, [r1, #0]
     3d6:	7003      	strb	r3, [r0, #0]
     3d8:	784b      	ldrb	r3, [r1, #1]
     3da:	7043      	strb	r3, [r0, #1]
     3dc:	788b      	ldrb	r3, [r1, #2]
     3de:	7083      	strb	r3, [r0, #2]
     3e0:	4660      	mov	r0, ip
     3e2:	4770      	bx	lr
	...

000003f0 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop
     3f4:	f3af 8000 	nop.w
     3f8:	f3af 8000 	nop.w
     3fc:	f3af 8000 	nop.w

00000400 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
     400:	4770      	bx	lr
     402:	bf00      	nop
     404:	f3af 8000 	nop.w
     408:	f3af 8000 	nop.w
     40c:	f3af 8000 	nop.w

00000410 <__default_exit>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
  }
     410:	e7fe      	b.n	410 <__default_exit>
     412:	bf00      	nop
     414:	f3af 8000 	nop.w
     418:	f3af 8000 	nop.w
     41c:	f3af 8000 	nop.w

00000420 <_unhandled_exception>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
     420:	e7fe      	b.n	420 <_unhandled_exception>
     422:	bf00      	nop
     424:	f3af 8000 	nop.w
     428:	f3af 8000 	nop.w
     42c:	f3af 8000 	nop.w

00000430 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
     430:	b084      	sub	sp, #16
     432:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
     434:	9b01      	ldr	r3, [sp, #4]
     436:	f003 0307 	and.w	r3, r3, #7
     43a:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
     43c:	4b0a      	ldr	r3, [pc, #40]	; (468 <NVIC_SetPriorityGrouping+0x38>)
     43e:	68db      	ldr	r3, [r3, #12]
     440:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
     442:	9a02      	ldr	r2, [sp, #8]
     444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
     448:	4013      	ands	r3, r2
     44a:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
     44c:	9b03      	ldr	r3, [sp, #12]
     44e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     450:	9b02      	ldr	r3, [sp, #8]
     452:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
     454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     45c:	9302      	str	r3, [sp, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
     45e:	4b02      	ldr	r3, [pc, #8]	; (468 <NVIC_SetPriorityGrouping+0x38>)
     460:	9a02      	ldr	r2, [sp, #8]
     462:	60da      	str	r2, [r3, #12]
}
     464:	b004      	add	sp, #16
     466:	4770      	bx	lr
     468:	e000ed00 	.word	0xe000ed00
     46c:	f3af 8000 	nop.w

00000470 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     470:	b082      	sub	sp, #8
     472:	4603      	mov	r3, r0
     474:	9100      	str	r1, [sp, #0]
     476:	f88d 3007 	strb.w	r3, [sp, #7]
  if((int32_t)IRQn < 0) {
     47a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
     47e:	2b00      	cmp	r3, #0
     480:	da0c      	bge.n	49c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     482:	490c      	ldr	r1, [pc, #48]	; (4b4 <NVIC_SetPriority+0x44>)
     484:	f89d 3007 	ldrb.w	r3, [sp, #7]
     488:	f003 030f 	and.w	r3, r3, #15
     48c:	3b04      	subs	r3, #4
     48e:	9a00      	ldr	r2, [sp, #0]
     490:	b2d2      	uxtb	r2, r2
     492:	0112      	lsls	r2, r2, #4
     494:	b2d2      	uxtb	r2, r2
     496:	440b      	add	r3, r1
     498:	761a      	strb	r2, [r3, #24]
     49a:	e009      	b.n	4b0 <NVIC_SetPriority+0x40>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     49c:	4906      	ldr	r1, [pc, #24]	; (4b8 <NVIC_SetPriority+0x48>)
     49e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
     4a2:	9a00      	ldr	r2, [sp, #0]
     4a4:	b2d2      	uxtb	r2, r2
     4a6:	0112      	lsls	r2, r2, #4
     4a8:	b2d2      	uxtb	r2, r2
     4aa:	440b      	add	r3, r1
     4ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
     4b0:	b002      	add	sp, #8
     4b2:	4770      	bx	lr
     4b4:	e000ed00 	.word	0xe000ed00
     4b8:	e000e100 	.word	0xe000e100
     4bc:	f3af 8000 	nop.w

000004c0 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {
     4c0:	b508      	push	{r3, lr}

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
     4c2:	4b0e      	ldr	r3, [pc, #56]	; (4fc <port_init+0x3c>)
     4c4:	2200      	movs	r2, #0
     4c6:	609a      	str	r2, [r3, #8]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
     4c8:	2003      	movs	r0, #3
     4ca:	f7ff ffb1 	bl	430 <NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
     4ce:	4b0c      	ldr	r3, [pc, #48]	; (500 <port_init+0x40>)
     4d0:	4a0b      	ldr	r2, [pc, #44]	; (500 <port_init+0x40>)
     4d2:	68d2      	ldr	r2, [r2, #12]
     4d4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     4d8:	60da      	str	r2, [r3, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
     4da:	4b0a      	ldr	r3, [pc, #40]	; (504 <port_init+0x44>)
     4dc:	4a09      	ldr	r2, [pc, #36]	; (504 <port_init+0x44>)
     4de:	6812      	ldr	r2, [r2, #0]
     4e0:	f042 0201 	orr.w	r2, r2, #1
     4e4:	601a      	str	r2, [r3, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
     4e6:	f06f 0004 	mvn.w	r0, #4
     4ea:	2101      	movs	r1, #1
     4ec:	f7ff ffc0 	bl	470 <NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
     4f0:	f06f 0001 	mvn.w	r0, #1
     4f4:	2102      	movs	r1, #2
     4f6:	f7ff ffbb 	bl	470 <NVIC_SetPriority>
}
     4fa:	bd08      	pop	{r3, pc}
     4fc:	e000ed00 	.word	0xe000ed00
     500:	e000edf0 	.word	0xe000edf0
     504:	e0001000 	.word	0xe0001000
     508:	f3af 8000 	nop.w
     50c:	f3af 8000 	nop.w

00000510 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
     510:	b082      	sub	sp, #8
     512:	2320      	movs	r3, #32
     514:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
     516:	9b01      	ldr	r3, [sp, #4]
     518:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
     51c:	b002      	add	sp, #8
     51e:	4770      	bx	lr

00000520 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
     520:	b082      	sub	sp, #8
     522:	2300      	movs	r3, #0
     524:	9301      	str	r3, [sp, #4]
     526:	9b01      	ldr	r3, [sp, #4]
     528:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
     52c:	b002      	add	sp, #8
     52e:	4770      	bx	lr

00000530 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
     530:	b508      	push	{r3, lr}

  port_lock();
     532:	f7ff ffed 	bl	510 <port_lock>
}
     536:	bd08      	pop	{r3, pc}
     538:	f3af 8000 	nop.w
     53c:	f3af 8000 	nop.w

00000540 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
     540:	b508      	push	{r3, lr}

  port_unlock();
     542:	f7ff ffed 	bl	520 <port_unlock>
}
     546:	bd08      	pop	{r3, pc}
     548:	f3af 8000 	nop.w
     54c:	f3af 8000 	nop.w

00000550 <port_enable>:

/**
 * @brief   Enables all the interrupt sources.
 * @note    In this port it lowers the base priority to user level.
 */
static inline void port_enable(void) {
     550:	b082      	sub	sp, #8
     552:	2300      	movs	r3, #0
     554:	9301      	str	r3, [sp, #4]
     556:	9b01      	ldr	r3, [sp, #4]
     558:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     55c:	b662      	cpsie	i

#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#endif
  __enable_irq();
}
     55e:	b002      	add	sp, #8
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	f3af 8000 	nop.w
     568:	f3af 8000 	nop.w
     56c:	f3af 8000 	nop.w

00000570 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
     570:	4770      	bx	lr
     572:	bf00      	nop
     574:	f3af 8000 	nop.w
     578:	f3af 8000 	nop.w
     57c:	f3af 8000 	nop.w

00000580 <port_rt_get_counter_value>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
     580:	4b01      	ldr	r3, [pc, #4]	; (588 <port_rt_get_counter_value+0x8>)
     582:	685b      	ldr	r3, [r3, #4]
}
     584:	4618      	mov	r0, r3
     586:	4770      	bx	lr
     588:	e0001000 	.word	0xe0001000
     58c:	f3af 8000 	nop.w

00000590 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
     590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     596:	4618      	mov	r0, r3
     598:	4770      	bx	lr
     59a:	bf00      	nop
     59c:	f3af 8000 	nop.w

000005a0 <port_timer_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
     5a0:	b508      	push	{r3, lr}

  stStopAlarm();
     5a2:	f001 fb45 	bl	1c30 <stStopAlarm>
}
     5a6:	bd08      	pop	{r3, pc}
     5a8:	f3af 8000 	nop.w
     5ac:	f3af 8000 	nop.w

000005b0 <port_timer_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
     5b0:	b500      	push	{lr}
     5b2:	b083      	sub	sp, #12
     5b4:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
     5b6:	9801      	ldr	r0, [sp, #4]
     5b8:	f001 fb42 	bl	1c40 <stSetAlarm>
}
     5bc:	b003      	add	sp, #12
     5be:	f85d fb04 	ldr.w	pc, [sp], #4
     5c2:	bf00      	nop
     5c4:	f3af 8000 	nop.w
     5c8:	f3af 8000 	nop.w
     5cc:	f3af 8000 	nop.w

000005d0 <port_timer_get_time>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
     5d0:	b508      	push	{r3, lr}

  return stGetCounter();
     5d2:	f7ff ffdd 	bl	590 <st_lld_get_counter>
     5d6:	4603      	mov	r3, r0
}
     5d8:	4618      	mov	r0, r3
     5da:	bd08      	pop	{r3, pc}
     5dc:	f3af 8000 	nop.w

000005e0 <chSysEnable>:
 * @note    This API is no replacement for @p chSysUnlock(), the
 *          @p chSysUnlock() could do more than just enable the interrupts.
 *
 * @special
 */
static inline void chSysEnable(void) {
     5e0:	b508      	push	{r3, lr}

  _dbg_check_enable();
  port_enable();
     5e2:	f7ff ffb5 	bl	550 <port_enable>
}
     5e6:	bd08      	pop	{r3, pc}
     5e8:	f3af 8000 	nop.w
     5ec:	f3af 8000 	nop.w

000005f0 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
     5f0:	b508      	push	{r3, lr}

  port_lock_from_isr();
     5f2:	f7ff ff9d 	bl	530 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
     5f6:	bd08      	pop	{r3, pc}
     5f8:	f3af 8000 	nop.w
     5fc:	f3af 8000 	nop.w

00000600 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
     600:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
     602:	f7ff ff9d 	bl	540 <port_unlock_from_isr>
}
     606:	bd08      	pop	{r3, pc}
     608:	f3af 8000 	nop.w
     60c:	f3af 8000 	nop.w

00000610 <chVTGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
     610:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
     612:	f7ff ffdd 	bl	5d0 <port_timer_get_time>
     616:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     618:	4618      	mov	r0, r3
     61a:	bd08      	pop	{r3, pc}
     61c:	f3af 8000 	nop.w

00000620 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
     620:	b500      	push	{lr}
     622:	b085      	sub	sp, #20
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
     624:	4b2a      	ldr	r3, [pc, #168]	; (6d0 <chVTDoTickI+0xb0>)
     626:	69db      	ldr	r3, [r3, #28]
     628:	9303      	str	r3, [sp, #12]
  now = chVTGetSystemTimeX();
     62a:	f7ff fff1 	bl	610 <chVTGetSystemTimeX>
     62e:	9002      	str	r0, [sp, #8]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
     630:	e02a      	b.n	688 <chVTDoTickI+0x68>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
     632:	4b27      	ldr	r3, [pc, #156]	; (6d0 <chVTDoTickI+0xb0>)
     634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     636:	9b03      	ldr	r3, [sp, #12]
     638:	689b      	ldr	r3, [r3, #8]
     63a:	441a      	add	r2, r3
     63c:	4b24      	ldr	r3, [pc, #144]	; (6d0 <chVTDoTickI+0xb0>)
     63e:	629a      	str	r2, [r3, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
     640:	9b03      	ldr	r3, [sp, #12]
     642:	681b      	ldr	r3, [r3, #0]
     644:	4a23      	ldr	r2, [pc, #140]	; (6d4 <chVTDoTickI+0xb4>)
     646:	605a      	str	r2, [r3, #4]
    ch.vtlist.vt_next = vtp->vt_next;
     648:	9b03      	ldr	r3, [sp, #12]
     64a:	681a      	ldr	r2, [r3, #0]
     64c:	4b20      	ldr	r3, [pc, #128]	; (6d0 <chVTDoTickI+0xb0>)
     64e:	61da      	str	r2, [r3, #28]
    fn = vtp->vt_func;
     650:	9b03      	ldr	r3, [sp, #12]
     652:	68db      	ldr	r3, [r3, #12]
     654:	9300      	str	r3, [sp, #0]
    vtp->vt_func = NULL;
     656:	9b03      	ldr	r3, [sp, #12]
     658:	2200      	movs	r2, #0
     65a:	60da      	str	r2, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
     65c:	4b1c      	ldr	r3, [pc, #112]	; (6d0 <chVTDoTickI+0xb0>)
     65e:	69da      	ldr	r2, [r3, #28]
     660:	4b1c      	ldr	r3, [pc, #112]	; (6d4 <chVTDoTickI+0xb4>)
     662:	429a      	cmp	r2, r3
     664:	d101      	bne.n	66a <chVTDoTickI+0x4a>
      port_timer_stop_alarm();
     666:	f7ff ff9b 	bl	5a0 <port_timer_stop_alarm>
    }

    /* Leaving the system critical zone in order to execute the callback
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();
     66a:	f7ff ffc9 	bl	600 <chSysUnlockFromISR>

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
     66e:	9b03      	ldr	r3, [sp, #12]
     670:	691a      	ldr	r2, [r3, #16]
     672:	9b00      	ldr	r3, [sp, #0]
     674:	4610      	mov	r0, r2
     676:	4798      	blx	r3

    /* Re-entering the critical zone in order to continue the exploration
       of the list.*/
    chSysLockFromISR();
     678:	f7ff ffba 	bl	5f0 <chSysLockFromISR>

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
     67c:	4b14      	ldr	r3, [pc, #80]	; (6d0 <chVTDoTickI+0xb0>)
     67e:	69db      	ldr	r3, [r3, #28]
     680:	9303      	str	r3, [sp, #12]
    now = chVTGetSystemTimeX();
     682:	f7ff ffc5 	bl	610 <chVTGetSystemTimeX>
     686:	9002      	str	r0, [sp, #8]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
     688:	9b03      	ldr	r3, [sp, #12]
     68a:	689a      	ldr	r2, [r3, #8]
     68c:	4b10      	ldr	r3, [pc, #64]	; (6d0 <chVTDoTickI+0xb0>)
     68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     690:	9902      	ldr	r1, [sp, #8]
     692:	1acb      	subs	r3, r1, r3
     694:	429a      	cmp	r2, r3
     696:	d9cc      	bls.n	632 <chVTDoTickI+0x12>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
     698:	4b0d      	ldr	r3, [pc, #52]	; (6d0 <chVTDoTickI+0xb0>)
     69a:	69da      	ldr	r2, [r3, #28]
     69c:	4b0d      	ldr	r3, [pc, #52]	; (6d4 <chVTDoTickI+0xb4>)
     69e:	429a      	cmp	r2, r3
     6a0:	d100      	bne.n	6a4 <chVTDoTickI+0x84>
    return;
     6a2:	e012      	b.n	6ca <chVTDoTickI+0xaa>
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
     6a4:	4b0a      	ldr	r3, [pc, #40]	; (6d0 <chVTDoTickI+0xb0>)
     6a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     6a8:	9b03      	ldr	r3, [sp, #12]
     6aa:	689b      	ldr	r3, [r3, #8]
     6ac:	441a      	add	r2, r3
     6ae:	9b02      	ldr	r3, [sp, #8]
     6b0:	1ad3      	subs	r3, r2, r3
     6b2:	9301      	str	r3, [sp, #4]
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
     6b4:	9b01      	ldr	r3, [sp, #4]
     6b6:	2b01      	cmp	r3, #1
     6b8:	d801      	bhi.n	6be <chVTDoTickI+0x9e>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
     6ba:	2302      	movs	r3, #2
     6bc:	9301      	str	r3, [sp, #4]
  }
  port_timer_set_alarm(now + delta);
     6be:	9a02      	ldr	r2, [sp, #8]
     6c0:	9b01      	ldr	r3, [sp, #4]
     6c2:	4413      	add	r3, r2
     6c4:	4618      	mov	r0, r3
     6c6:	f7ff ff73 	bl	5b0 <port_timer_set_alarm>

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
              (now + delta - ch.vtlist.vt_lasttime),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     6ca:	b005      	add	sp, #20
     6cc:	f85d fb04 	ldr.w	pc, [sp], #4
     6d0:	20000800 	.word	0x20000800
     6d4:	2000081c 	.word	0x2000081c
     6d8:	f3af 8000 	nop.w
     6dc:	f3af 8000 	nop.w

000006e0 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
     6e0:	b082      	sub	sp, #8
     6e2:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
     6e4:	4b02      	ldr	r3, [pc, #8]	; (6f0 <chRegSetThreadName+0x10>)
     6e6:	699b      	ldr	r3, [r3, #24]
     6e8:	9a01      	ldr	r2, [sp, #4]
     6ea:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
     6ec:	b002      	add	sp, #8
     6ee:	4770      	bx	lr
     6f0:	20000800 	.word	0x20000800
     6f4:	f3af 8000 	nop.w
     6f8:	f3af 8000 	nop.w
     6fc:	f3af 8000 	nop.w

00000700 <chRegSetThreadNameX>:
 * @param[in] tp        pointer to the thread
 * @param[in] name      thread name as a zero terminated string
 *
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {
     700:	b082      	sub	sp, #8
     702:	9001      	str	r0, [sp, #4]
     704:	9100      	str	r1, [sp, #0]

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
     706:	9b01      	ldr	r3, [sp, #4]
     708:	9a00      	ldr	r2, [sp, #0]
     70a:	619a      	str	r2, [r3, #24]
#else
  (void)tp;
  (void)name;
#endif
}
     70c:	b002      	add	sp, #8
     70e:	4770      	bx	lr

00000710 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
     710:	b500      	push	{lr}
     712:	b083      	sub	sp, #12
     714:	9001      	str	r0, [sp, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
     716:	f7ff ff2b 	bl	570 <port_wait_for_interrupt>
    /*lint -restore*/
    CH_CFG_IDLE_LOOP_HOOK();
  }
     71a:	e7fc      	b.n	716 <_idle_thread+0x6>
     71c:	f3af 8000 	nop.w

00000720 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
     720:	b500      	push	{lr}
     722:	b085      	sub	sp, #20
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
     724:	f7ff fecc 	bl	4c0 <port_init>
  _scheduler_init();
     728:	f000 fa4a 	bl	bc0 <_scheduler_init>
  _vt_init();
     72c:	f000 f8b8 	bl	8a0 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
     730:	f000 fdce 	bl	12d0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
     734:	f001 f94c 	bl	19d0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
     738:	f001 f99a 	bl	1a70 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
     73c:	480f      	ldr	r0, [pc, #60]	; (77c <chSysInit+0x5c>)
     73e:	2140      	movs	r1, #64	; 0x40
     740:	f000 fc56 	bl	ff0 <_thread_init>
     744:	4602      	mov	r2, r0
     746:	4b0e      	ldr	r3, [pc, #56]	; (780 <chSysInit+0x60>)
     748:	619a      	str	r2, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
     74a:	4b0d      	ldr	r3, [pc, #52]	; (780 <chSysInit+0x60>)
     74c:	699b      	ldr	r3, [r3, #24]
     74e:	2201      	movs	r2, #1
     750:	771a      	strb	r2, [r3, #28]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
#endif
  chSysEnable();
     752:	f7ff ff45 	bl	5e0 <chSysEnable>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Note, &ch_debug points to the string "main" if the registry is
     active.*/
  chRegSetThreadName((const char *)&ch_debug);
     756:	480b      	ldr	r0, [pc, #44]	; (784 <chSysInit+0x64>)
     758:	f7ff ffc2 	bl	6e0 <chRegSetThreadName>
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
     75c:	2300      	movs	r3, #0
     75e:	9300      	str	r3, [sp, #0]
     760:	4809      	ldr	r0, [pc, #36]	; (788 <chSysInit+0x68>)
     762:	21d8      	movs	r1, #216	; 0xd8
     764:	2201      	movs	r2, #1
     766:	4b09      	ldr	r3, [pc, #36]	; (78c <chSysInit+0x6c>)
     768:	f000 fcaa 	bl	10c0 <chThdCreateStatic>
     76c:	9003      	str	r0, [sp, #12]
                                      sizeof(ch.idle_thread_wa),
                                      IDLEPRIO,
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
     76e:	9803      	ldr	r0, [sp, #12]
     770:	4907      	ldr	r1, [pc, #28]	; (790 <chSysInit+0x70>)
     772:	f7ff ffc5 	bl	700 <chRegSetThreadNameX>
  }
#endif
}
     776:	b005      	add	sp, #20
     778:	f85d fb04 	ldr.w	pc, [sp], #4
     77c:	20000830 	.word	0x20000830
     780:	20000800 	.word	0x20000800
     784:	00003f30 	.word	0x00003f30
     788:	20000878 	.word	0x20000878
     78c:	00000711 	.word	0x00000711
     790:	00003f20 	.word	0x00003f20
     794:	f3af 8000 	nop.w
     798:	f3af 8000 	nop.w
     79c:	f3af 8000 	nop.w

000007a0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
     7a0:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
#endif
  chVTDoTickI();
     7a2:	f7ff ff3d 	bl	620 <chVTDoTickI>
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
     7a6:	bd08      	pop	{r3, pc}
     7a8:	f3af 8000 	nop.w
     7ac:	f3af 8000 	nop.w

000007b0 <chSysIsCounterWithinX>:
 * @retval true         current time within the specified time window.
 * @retval false        current time not within the specified time window.
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {
     7b0:	b084      	sub	sp, #16
     7b2:	9003      	str	r0, [sp, #12]
     7b4:	9102      	str	r1, [sp, #8]
     7b6:	9201      	str	r2, [sp, #4]

  return (bool)((cnt - start) < (end - start));
     7b8:	9a03      	ldr	r2, [sp, #12]
     7ba:	9b02      	ldr	r3, [sp, #8]
     7bc:	1ad2      	subs	r2, r2, r3
     7be:	9901      	ldr	r1, [sp, #4]
     7c0:	9b02      	ldr	r3, [sp, #8]
     7c2:	1acb      	subs	r3, r1, r3
     7c4:	429a      	cmp	r2, r3
     7c6:	bf2c      	ite	cs
     7c8:	2300      	movcs	r3, #0
     7ca:	2301      	movcc	r3, #1
     7cc:	b2db      	uxtb	r3, r3
}
     7ce:	4618      	mov	r0, r3
     7d0:	b004      	add	sp, #16
     7d2:	4770      	bx	lr
     7d4:	f3af 8000 	nop.w
     7d8:	f3af 8000 	nop.w
     7dc:	f3af 8000 	nop.w

000007e0 <chSysPolledDelayX>:
 *
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
void chSysPolledDelayX(rtcnt_t cycles) {
     7e0:	b500      	push	{lr}
     7e2:	b085      	sub	sp, #20
     7e4:	9001      	str	r0, [sp, #4]
  rtcnt_t start = chSysGetRealtimeCounterX();
     7e6:	f7ff fecb 	bl	580 <port_rt_get_counter_value>
     7ea:	9003      	str	r0, [sp, #12]
  rtcnt_t end  = start + cycles;
     7ec:	9a03      	ldr	r2, [sp, #12]
     7ee:	9b01      	ldr	r3, [sp, #4]
     7f0:	4413      	add	r3, r2
     7f2:	9302      	str	r3, [sp, #8]

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
     7f4:	bf00      	nop
     7f6:	f7ff fec3 	bl	580 <port_rt_get_counter_value>
     7fa:	4603      	mov	r3, r0
     7fc:	4618      	mov	r0, r3
     7fe:	9903      	ldr	r1, [sp, #12]
     800:	9a02      	ldr	r2, [sp, #8]
     802:	f7ff ffd5 	bl	7b0 <chSysIsCounterWithinX>
     806:	4603      	mov	r3, r0
     808:	2b00      	cmp	r3, #0
     80a:	d1f4      	bne.n	7f6 <chSysPolledDelayX+0x16>
  }
}
     80c:	b005      	add	sp, #20
     80e:	f85d fb04 	ldr.w	pc, [sp], #4
     812:	bf00      	nop
     814:	f3af 8000 	nop.w
     818:	f3af 8000 	nop.w
     81c:	f3af 8000 	nop.w

00000820 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
     820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
     826:	4618      	mov	r0, r3
     828:	4770      	bx	lr
     82a:	bf00      	nop
     82c:	f3af 8000 	nop.w

00000830 <port_timer_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {
     830:	b500      	push	{lr}
     832:	b083      	sub	sp, #12
     834:	9001      	str	r0, [sp, #4]

  stStartAlarm(time);
     836:	9801      	ldr	r0, [sp, #4]
     838:	f001 f9ea 	bl	1c10 <stStartAlarm>
}
     83c:	b003      	add	sp, #12
     83e:	f85d fb04 	ldr.w	pc, [sp], #4
     842:	bf00      	nop
     844:	f3af 8000 	nop.w
     848:	f3af 8000 	nop.w
     84c:	f3af 8000 	nop.w

00000850 <port_timer_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
     850:	b508      	push	{r3, lr}

  stStopAlarm();
     852:	f001 f9ed 	bl	1c30 <stStopAlarm>
}
     856:	bd08      	pop	{r3, pc}
     858:	f3af 8000 	nop.w
     85c:	f3af 8000 	nop.w

00000860 <port_timer_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
     860:	b500      	push	{lr}
     862:	b083      	sub	sp, #12
     864:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
     866:	9801      	ldr	r0, [sp, #4]
     868:	f001 f9ea 	bl	1c40 <stSetAlarm>
}
     86c:	b003      	add	sp, #12
     86e:	f85d fb04 	ldr.w	pc, [sp], #4
     872:	bf00      	nop
     874:	f3af 8000 	nop.w
     878:	f3af 8000 	nop.w
     87c:	f3af 8000 	nop.w

00000880 <port_timer_get_time>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
     880:	b508      	push	{r3, lr}

  return stGetCounter();
     882:	f7ff ffcd 	bl	820 <st_lld_get_counter>
     886:	4603      	mov	r3, r0
}
     888:	4618      	mov	r0, r3
     88a:	bd08      	pop	{r3, pc}
     88c:	f3af 8000 	nop.w

00000890 <chVTGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
     890:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
     892:	f7ff fff5 	bl	880 <port_timer_get_time>
     896:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     898:	4618      	mov	r0, r3
     89a:	bd08      	pop	{r3, pc}
     89c:	f3af 8000 	nop.w

000008a0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
     8a0:	4b06      	ldr	r3, [pc, #24]	; (8bc <_vt_init+0x1c>)
     8a2:	4a07      	ldr	r2, [pc, #28]	; (8c0 <_vt_init+0x20>)
     8a4:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
     8a6:	4b05      	ldr	r3, [pc, #20]	; (8bc <_vt_init+0x1c>)
     8a8:	4a05      	ldr	r2, [pc, #20]	; (8c0 <_vt_init+0x20>)
     8aa:	621a      	str	r2, [r3, #32]
  ch.vtlist.vt_delta = (systime_t)-1;
     8ac:	4b03      	ldr	r3, [pc, #12]	; (8bc <_vt_init+0x1c>)
     8ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     8b2:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
     8b4:	4b01      	ldr	r3, [pc, #4]	; (8bc <_vt_init+0x1c>)
     8b6:	2200      	movs	r2, #0
     8b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     8ba:	4770      	bx	lr
     8bc:	20000800 	.word	0x20000800
     8c0:	2000081c 	.word	0x2000081c
     8c4:	f3af 8000 	nop.w
     8c8:	f3af 8000 	nop.w
     8cc:	f3af 8000 	nop.w

000008d0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
     8d0:	b500      	push	{lr}
     8d2:	b089      	sub	sp, #36	; 0x24
     8d4:	9003      	str	r0, [sp, #12]
     8d6:	9102      	str	r1, [sp, #8]
     8d8:	9201      	str	r2, [sp, #4]
     8da:	9300      	str	r3, [sp, #0]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
     8dc:	9b03      	ldr	r3, [sp, #12]
     8de:	9a00      	ldr	r2, [sp, #0]
     8e0:	611a      	str	r2, [r3, #16]
  vtp->vt_func = vtfunc;
     8e2:	9b03      	ldr	r3, [sp, #12]
     8e4:	9a01      	ldr	r2, [sp, #4]
     8e6:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
     8e8:	f7ff ffd2 	bl	890 <chVTGetSystemTimeX>
     8ec:	9005      	str	r0, [sp, #20]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
     8ee:	9b02      	ldr	r3, [sp, #8]
     8f0:	2b01      	cmp	r3, #1
     8f2:	d801      	bhi.n	8f8 <chVTDoSetI+0x28>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
     8f4:	2302      	movs	r3, #2
     8f6:	9302      	str	r3, [sp, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
     8f8:	4b31      	ldr	r3, [pc, #196]	; (9c0 <chVTDoSetI+0xf0>)
     8fa:	69da      	ldr	r2, [r3, #28]
     8fc:	4b31      	ldr	r3, [pc, #196]	; (9c4 <chVTDoSetI+0xf4>)
     8fe:	429a      	cmp	r2, r3
     900:	d119      	bne.n	936 <chVTDoSetI+0x66>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
     902:	4b2f      	ldr	r3, [pc, #188]	; (9c0 <chVTDoSetI+0xf0>)
     904:	9a05      	ldr	r2, [sp, #20]
     906:	629a      	str	r2, [r3, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
     908:	4b2d      	ldr	r3, [pc, #180]	; (9c0 <chVTDoSetI+0xf0>)
     90a:	9a03      	ldr	r2, [sp, #12]
     90c:	61da      	str	r2, [r3, #28]
      ch.vtlist.vt_prev = vtp;
     90e:	4b2c      	ldr	r3, [pc, #176]	; (9c0 <chVTDoSetI+0xf0>)
     910:	9a03      	ldr	r2, [sp, #12]
     912:	621a      	str	r2, [r3, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
     914:	9b03      	ldr	r3, [sp, #12]
     916:	4a2b      	ldr	r2, [pc, #172]	; (9c4 <chVTDoSetI+0xf4>)
     918:	601a      	str	r2, [r3, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
     91a:	9b03      	ldr	r3, [sp, #12]
     91c:	4a29      	ldr	r2, [pc, #164]	; (9c4 <chVTDoSetI+0xf4>)
     91e:	605a      	str	r2, [r3, #4]
      vtp->vt_delta = delay;
     920:	9b03      	ldr	r3, [sp, #12]
     922:	9a02      	ldr	r2, [sp, #8]
     924:	609a      	str	r2, [r3, #8]

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
     926:	4b26      	ldr	r3, [pc, #152]	; (9c0 <chVTDoSetI+0xf0>)
     928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     92a:	9b02      	ldr	r3, [sp, #8]
     92c:	4413      	add	r3, r2
     92e:	4618      	mov	r0, r3
     930:	f7ff ff7e 	bl	830 <port_timer_start_alarm>

      return;
     934:	e040      	b.n	9b8 <chVTDoSetI+0xe8>
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
     936:	9a05      	ldr	r2, [sp, #20]
     938:	9b02      	ldr	r3, [sp, #8]
     93a:	441a      	add	r2, r3
     93c:	4b20      	ldr	r3, [pc, #128]	; (9c0 <chVTDoSetI+0xf0>)
     93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     940:	1ad3      	subs	r3, r2, r3
     942:	9306      	str	r3, [sp, #24]
    if (delta < ch.vtlist.vt_next->vt_delta) {
     944:	4b1e      	ldr	r3, [pc, #120]	; (9c0 <chVTDoSetI+0xf0>)
     946:	69db      	ldr	r3, [r3, #28]
     948:	689a      	ldr	r2, [r3, #8]
     94a:	9b06      	ldr	r3, [sp, #24]
     94c:	429a      	cmp	r2, r3
     94e:	d906      	bls.n	95e <chVTDoSetI+0x8e>

      /* New alarm deadline.*/
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
     950:	4b1b      	ldr	r3, [pc, #108]	; (9c0 <chVTDoSetI+0xf0>)
     952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     954:	9b06      	ldr	r3, [sp, #24]
     956:	4413      	add	r3, r2
     958:	4618      	mov	r0, r3
     95a:	f7ff ff81 	bl	860 <port_timer_set_alarm>
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
     95e:	4b18      	ldr	r3, [pc, #96]	; (9c0 <chVTDoSetI+0xf0>)
     960:	69db      	ldr	r3, [r3, #28]
     962:	9307      	str	r3, [sp, #28]
  while (p->vt_delta < delta) {
     964:	e007      	b.n	976 <chVTDoSetI+0xa6>
    delta -= p->vt_delta;
     966:	9b07      	ldr	r3, [sp, #28]
     968:	689b      	ldr	r3, [r3, #8]
     96a:	9a06      	ldr	r2, [sp, #24]
     96c:	1ad3      	subs	r3, r2, r3
     96e:	9306      	str	r3, [sp, #24]
    p = p->vt_next;
     970:	9b07      	ldr	r3, [sp, #28]
     972:	681b      	ldr	r3, [r3, #0]
     974:	9307      	str	r3, [sp, #28]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
     976:	9b07      	ldr	r3, [sp, #28]
     978:	689a      	ldr	r2, [r3, #8]
     97a:	9b06      	ldr	r3, [sp, #24]
     97c:	429a      	cmp	r2, r3
     97e:	d3f2      	bcc.n	966 <chVTDoSetI+0x96>
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
     980:	9b03      	ldr	r3, [sp, #12]
     982:	9a07      	ldr	r2, [sp, #28]
     984:	601a      	str	r2, [r3, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
     986:	9b03      	ldr	r3, [sp, #12]
     988:	681b      	ldr	r3, [r3, #0]
     98a:	685a      	ldr	r2, [r3, #4]
     98c:	9b03      	ldr	r3, [sp, #12]
     98e:	605a      	str	r2, [r3, #4]
  vtp->vt_prev->vt_next = vtp;
     990:	9b03      	ldr	r3, [sp, #12]
     992:	685b      	ldr	r3, [r3, #4]
     994:	9a03      	ldr	r2, [sp, #12]
     996:	601a      	str	r2, [r3, #0]
  p->vt_prev = vtp;
     998:	9b07      	ldr	r3, [sp, #28]
     99a:	9a03      	ldr	r2, [sp, #12]
     99c:	605a      	str	r2, [r3, #4]
  vtp->vt_delta = delta
     99e:	9b03      	ldr	r3, [sp, #12]
     9a0:	9a06      	ldr	r2, [sp, #24]
     9a2:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
     9a4:	9b07      	ldr	r3, [sp, #28]
     9a6:	689a      	ldr	r2, [r3, #8]
     9a8:	9b06      	ldr	r3, [sp, #24]
     9aa:	1ad2      	subs	r2, r2, r3
     9ac:	9b07      	ldr	r3, [sp, #28]
     9ae:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
     9b0:	4b03      	ldr	r3, [pc, #12]	; (9c0 <chVTDoSetI+0xf0>)
     9b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9b6:	625a      	str	r2, [r3, #36]	; 0x24
}
     9b8:	b009      	add	sp, #36	; 0x24
     9ba:	f85d fb04 	ldr.w	pc, [sp], #4
     9be:	bf00      	nop
     9c0:	20000800 	.word	0x20000800
     9c4:	2000081c 	.word	0x2000081c
     9c8:	f3af 8000 	nop.w
     9cc:	f3af 8000 	nop.w

000009d0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
     9d0:	b500      	push	{lr}
     9d2:	b085      	sub	sp, #20
     9d4:	9001      	str	r0, [sp, #4]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
     9d6:	4b31      	ldr	r3, [pc, #196]	; (a9c <chVTDoResetI+0xcc>)
     9d8:	69da      	ldr	r2, [r3, #28]
     9da:	9b01      	ldr	r3, [sp, #4]
     9dc:	429a      	cmp	r2, r3
     9de:	d01c      	beq.n	a1a <chVTDoResetI+0x4a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
     9e0:	9b01      	ldr	r3, [sp, #4]
     9e2:	685b      	ldr	r3, [r3, #4]
     9e4:	9a01      	ldr	r2, [sp, #4]
     9e6:	6812      	ldr	r2, [r2, #0]
     9e8:	601a      	str	r2, [r3, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
     9ea:	9b01      	ldr	r3, [sp, #4]
     9ec:	681b      	ldr	r3, [r3, #0]
     9ee:	9a01      	ldr	r2, [sp, #4]
     9f0:	6852      	ldr	r2, [r2, #4]
     9f2:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
     9f4:	9b01      	ldr	r3, [sp, #4]
     9f6:	2200      	movs	r2, #0
     9f8:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
     9fa:	9b01      	ldr	r3, [sp, #4]
     9fc:	681a      	ldr	r2, [r3, #0]
     9fe:	4b28      	ldr	r3, [pc, #160]	; (aa0 <chVTDoResetI+0xd0>)
     a00:	429a      	cmp	r2, r3
     a02:	d009      	beq.n	a18 <chVTDoResetI+0x48>
      vtp->vt_next->vt_delta += vtp->vt_delta;
     a04:	9b01      	ldr	r3, [sp, #4]
     a06:	681b      	ldr	r3, [r3, #0]
     a08:	9a01      	ldr	r2, [sp, #4]
     a0a:	6812      	ldr	r2, [r2, #0]
     a0c:	6891      	ldr	r1, [r2, #8]
     a0e:	9a01      	ldr	r2, [sp, #4]
     a10:	6892      	ldr	r2, [r2, #8]
     a12:	440a      	add	r2, r1
     a14:	609a      	str	r2, [r3, #8]

    return;
     a16:	e03e      	b.n	a96 <chVTDoResetI+0xc6>
     a18:	e03d      	b.n	a96 <chVTDoResetI+0xc6>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
     a1a:	9b01      	ldr	r3, [sp, #4]
     a1c:	681a      	ldr	r2, [r3, #0]
     a1e:	4b1f      	ldr	r3, [pc, #124]	; (a9c <chVTDoResetI+0xcc>)
     a20:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
     a22:	4b1e      	ldr	r3, [pc, #120]	; (a9c <chVTDoResetI+0xcc>)
     a24:	69db      	ldr	r3, [r3, #28]
     a26:	4a1e      	ldr	r2, [pc, #120]	; (aa0 <chVTDoResetI+0xd0>)
     a28:	605a      	str	r2, [r3, #4]
  vtp->vt_func = NULL;
     a2a:	9b01      	ldr	r3, [sp, #4]
     a2c:	2200      	movs	r2, #0
     a2e:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
     a30:	4b1a      	ldr	r3, [pc, #104]	; (a9c <chVTDoResetI+0xcc>)
     a32:	69da      	ldr	r2, [r3, #28]
     a34:	4b1a      	ldr	r3, [pc, #104]	; (aa0 <chVTDoResetI+0xd0>)
     a36:	429a      	cmp	r2, r3
     a38:	d102      	bne.n	a40 <chVTDoResetI+0x70>
    port_timer_stop_alarm();
     a3a:	f7ff ff09 	bl	850 <port_timer_stop_alarm>

    return;
     a3e:	e02a      	b.n	a96 <chVTDoResetI+0xc6>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
     a40:	4b16      	ldr	r3, [pc, #88]	; (a9c <chVTDoResetI+0xcc>)
     a42:	69db      	ldr	r3, [r3, #28]
     a44:	4a15      	ldr	r2, [pc, #84]	; (a9c <chVTDoResetI+0xcc>)
     a46:	69d2      	ldr	r2, [r2, #28]
     a48:	6891      	ldr	r1, [r2, #8]
     a4a:	9a01      	ldr	r2, [sp, #4]
     a4c:	6892      	ldr	r2, [r2, #8]
     a4e:	440a      	add	r2, r1
     a50:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
     a52:	f7ff ff1d 	bl	890 <chVTGetSystemTimeX>
     a56:	4602      	mov	r2, r0
     a58:	4b10      	ldr	r3, [pc, #64]	; (a9c <chVTDoResetI+0xcc>)
     a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a5c:	1ad3      	subs	r3, r2, r3
     a5e:	9302      	str	r3, [sp, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
     a60:	4b0e      	ldr	r3, [pc, #56]	; (a9c <chVTDoResetI+0xcc>)
     a62:	69db      	ldr	r3, [r3, #28]
     a64:	689a      	ldr	r2, [r3, #8]
     a66:	9b02      	ldr	r3, [sp, #8]
     a68:	429a      	cmp	r2, r3
     a6a:	d800      	bhi.n	a6e <chVTDoResetI+0x9e>
    return;
     a6c:	e013      	b.n	a96 <chVTDoResetI+0xc6>
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
     a6e:	4b0b      	ldr	r3, [pc, #44]	; (a9c <chVTDoResetI+0xcc>)
     a70:	69db      	ldr	r3, [r3, #28]
     a72:	689a      	ldr	r2, [r3, #8]
     a74:	9b02      	ldr	r3, [sp, #8]
     a76:	1ad3      	subs	r3, r2, r3
     a78:	9303      	str	r3, [sp, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
     a7a:	9b03      	ldr	r3, [sp, #12]
     a7c:	2b01      	cmp	r3, #1
     a7e:	d801      	bhi.n	a84 <chVTDoResetI+0xb4>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
     a80:	2302      	movs	r3, #2
     a82:	9303      	str	r3, [sp, #12]
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
     a84:	4b05      	ldr	r3, [pc, #20]	; (a9c <chVTDoResetI+0xcc>)
     a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     a88:	9b02      	ldr	r3, [sp, #8]
     a8a:	441a      	add	r2, r3
     a8c:	9b03      	ldr	r3, [sp, #12]
     a8e:	4413      	add	r3, r2
     a90:	4618      	mov	r0, r3
     a92:	f7ff fee5 	bl	860 <port_timer_set_alarm>
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     a96:	b005      	add	sp, #20
     a98:	f85d fb04 	ldr.w	pc, [sp], #4
     a9c:	20000800 	.word	0x20000800
     aa0:	2000081c 	.word	0x2000081c
     aa4:	f3af 8000 	nop.w
     aa8:	f3af 8000 	nop.w
     aac:	f3af 8000 	nop.w

00000ab0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
     ab0:	b082      	sub	sp, #8
     ab2:	2320      	movs	r3, #32
     ab4:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
     ab6:	9b01      	ldr	r3, [sp, #4]
     ab8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
     abc:	b002      	add	sp, #8
     abe:	4770      	bx	lr

00000ac0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
     ac0:	b082      	sub	sp, #8
     ac2:	2300      	movs	r3, #0
     ac4:	9301      	str	r3, [sp, #4]
     ac6:	9b01      	ldr	r3, [sp, #4]
     ac8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
     acc:	b002      	add	sp, #8
     ace:	4770      	bx	lr

00000ad0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
     ad0:	b508      	push	{r3, lr}

  port_lock();
     ad2:	f7ff ffed 	bl	ab0 <port_lock>
}
     ad6:	bd08      	pop	{r3, pc}
     ad8:	f3af 8000 	nop.w
     adc:	f3af 8000 	nop.w

00000ae0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
     ae0:	b508      	push	{r3, lr}

  port_unlock();
     ae2:	f7ff ffed 	bl	ac0 <port_unlock>
}
     ae6:	bd08      	pop	{r3, pc}
     ae8:	f3af 8000 	nop.w
     aec:	f3af 8000 	nop.w

00000af0 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
     af0:	b082      	sub	sp, #8
     af2:	9001      	str	r0, [sp, #4]

  tqp->p_next = (thread_t *)tqp;
     af4:	9b01      	ldr	r3, [sp, #4]
     af6:	9a01      	ldr	r2, [sp, #4]
     af8:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
     afa:	9b01      	ldr	r3, [sp, #4]
     afc:	9a01      	ldr	r2, [sp, #4]
     afe:	605a      	str	r2, [r3, #4]
}
     b00:	b002      	add	sp, #8
     b02:	4770      	bx	lr
     b04:	f3af 8000 	nop.w
     b08:	f3af 8000 	nop.w
     b0c:	f3af 8000 	nop.w

00000b10 <queue_fifo_remove>:
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
     b10:	b084      	sub	sp, #16
     b12:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->p_next;
     b14:	9b01      	ldr	r3, [sp, #4]
     b16:	681b      	ldr	r3, [r3, #0]
     b18:	9303      	str	r3, [sp, #12]

  tqp->p_next = tp->p_next;
     b1a:	9b03      	ldr	r3, [sp, #12]
     b1c:	681a      	ldr	r2, [r3, #0]
     b1e:	9b01      	ldr	r3, [sp, #4]
     b20:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
     b22:	9b01      	ldr	r3, [sp, #4]
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	9a01      	ldr	r2, [sp, #4]
     b28:	605a      	str	r2, [r3, #4]

  return tp;
     b2a:	9b03      	ldr	r3, [sp, #12]
}
     b2c:	4618      	mov	r0, r3
     b2e:	b004      	add	sp, #16
     b30:	4770      	bx	lr
     b32:	bf00      	nop
     b34:	f3af 8000 	nop.w
     b38:	f3af 8000 	nop.w
     b3c:	f3af 8000 	nop.w

00000b40 <queue_dequeue>:
  tqp->p_prev->p_next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
     b40:	b082      	sub	sp, #8
     b42:	9001      	str	r0, [sp, #4]

  tp->p_prev->p_next = tp->p_next;
     b44:	9b01      	ldr	r3, [sp, #4]
     b46:	685b      	ldr	r3, [r3, #4]
     b48:	9a01      	ldr	r2, [sp, #4]
     b4a:	6812      	ldr	r2, [r2, #0]
     b4c:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
     b4e:	9b01      	ldr	r3, [sp, #4]
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	9a01      	ldr	r2, [sp, #4]
     b54:	6852      	ldr	r2, [r2, #4]
     b56:	605a      	str	r2, [r3, #4]

  return tp;
     b58:	9b01      	ldr	r3, [sp, #4]
}
     b5a:	4618      	mov	r0, r3
     b5c:	b002      	add	sp, #8
     b5e:	4770      	bx	lr

00000b60 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
     b60:	b508      	push	{r3, lr}

  port_lock_from_isr();
     b62:	f7ff ffb5 	bl	ad0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
     b66:	bd08      	pop	{r3, pc}
     b68:	f3af 8000 	nop.w
     b6c:	f3af 8000 	nop.w

00000b70 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
     b70:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
     b72:	f7ff ffb5 	bl	ae0 <port_unlock_from_isr>
}
     b76:	bd08      	pop	{r3, pc}
     b78:	f3af 8000 	nop.w
     b7c:	f3af 8000 	nop.w

00000b80 <chVTIsArmedI>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
     b80:	b082      	sub	sp, #8
     b82:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(vtp->vt_func != NULL);
     b84:	9b01      	ldr	r3, [sp, #4]
     b86:	68db      	ldr	r3, [r3, #12]
     b88:	2b00      	cmp	r3, #0
     b8a:	bf0c      	ite	eq
     b8c:	2300      	moveq	r3, #0
     b8e:	2301      	movne	r3, #1
     b90:	b2db      	uxtb	r3, r3
}
     b92:	4618      	mov	r0, r3
     b94:	b002      	add	sp, #8
     b96:	4770      	bx	lr
     b98:	f3af 8000 	nop.w
     b9c:	f3af 8000 	nop.w

00000ba0 <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
     ba0:	b082      	sub	sp, #8
     ba2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->s_cnt++;
     ba4:	9b01      	ldr	r3, [sp, #4]
     ba6:	689b      	ldr	r3, [r3, #8]
     ba8:	1c5a      	adds	r2, r3, #1
     baa:	9b01      	ldr	r3, [sp, #4]
     bac:	609a      	str	r2, [r3, #8]
}
     bae:	b002      	add	sp, #8
     bb0:	4770      	bx	lr
     bb2:	bf00      	nop
     bb4:	f3af 8000 	nop.w
     bb8:	f3af 8000 	nop.w
     bbc:	f3af 8000 	nop.w

00000bc0 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
     bc0:	b508      	push	{r3, lr}

  queue_init(&ch.rlist.r_queue);
     bc2:	4806      	ldr	r0, [pc, #24]	; (bdc <_scheduler_init+0x1c>)
     bc4:	f7ff ff94 	bl	af0 <queue_init>
  ch.rlist.r_prio = NOPRIO;
     bc8:	4b04      	ldr	r3, [pc, #16]	; (bdc <_scheduler_init+0x1c>)
     bca:	2200      	movs	r2, #0
     bcc:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
     bce:	4b03      	ldr	r3, [pc, #12]	; (bdc <_scheduler_init+0x1c>)
     bd0:	4a02      	ldr	r2, [pc, #8]	; (bdc <_scheduler_init+0x1c>)
     bd2:	611a      	str	r2, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
     bd4:	4b01      	ldr	r3, [pc, #4]	; (bdc <_scheduler_init+0x1c>)
     bd6:	4a01      	ldr	r2, [pc, #4]	; (bdc <_scheduler_init+0x1c>)
     bd8:	615a      	str	r2, [r3, #20]
#endif
}
     bda:	bd08      	pop	{r3, pc}
     bdc:	20000800 	.word	0x20000800

00000be0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
     be0:	b084      	sub	sp, #16
     be2:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
     be4:	9b01      	ldr	r3, [sp, #4]
     be6:	2200      	movs	r2, #0
     be8:	771a      	strb	r2, [r3, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <chSchReadyI+0x44>)
     bec:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->p_next;
     bee:	9b03      	ldr	r3, [sp, #12]
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	9303      	str	r3, [sp, #12]
  } while (cp->p_prio >= tp->p_prio);
     bf4:	9b03      	ldr	r3, [sp, #12]
     bf6:	689a      	ldr	r2, [r3, #8]
     bf8:	9b01      	ldr	r3, [sp, #4]
     bfa:	689b      	ldr	r3, [r3, #8]
     bfc:	429a      	cmp	r2, r3
     bfe:	d2f6      	bcs.n	bee <chSchReadyI+0xe>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
     c00:	9b01      	ldr	r3, [sp, #4]
     c02:	9a03      	ldr	r2, [sp, #12]
     c04:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
     c06:	9b03      	ldr	r3, [sp, #12]
     c08:	685a      	ldr	r2, [r3, #4]
     c0a:	9b01      	ldr	r3, [sp, #4]
     c0c:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
     c0e:	9b01      	ldr	r3, [sp, #4]
     c10:	685b      	ldr	r3, [r3, #4]
     c12:	9a01      	ldr	r2, [sp, #4]
     c14:	601a      	str	r2, [r3, #0]
  cp->p_prev = tp;
     c16:	9b03      	ldr	r3, [sp, #12]
     c18:	9a01      	ldr	r2, [sp, #4]
     c1a:	605a      	str	r2, [r3, #4]

  return tp;
     c1c:	9b01      	ldr	r3, [sp, #4]
}
     c1e:	4618      	mov	r0, r3
     c20:	b004      	add	sp, #16
     c22:	4770      	bx	lr
     c24:	20000800 	.word	0x20000800
     c28:	f3af 8000 	nop.w
     c2c:	f3af 8000 	nop.w

00000c30 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
     c30:	b500      	push	{lr}
     c32:	b085      	sub	sp, #20
     c34:	4603      	mov	r3, r0
     c36:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
     c3a:	4b0d      	ldr	r3, [pc, #52]	; (c70 <chSchGoSleepS+0x40>)
     c3c:	699b      	ldr	r3, [r3, #24]
     c3e:	9303      	str	r3, [sp, #12]
  otp->p_state = newstate;
     c40:	9b03      	ldr	r3, [sp, #12]
     c42:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c46:	771a      	strb	r2, [r3, #28]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
     c48:	4809      	ldr	r0, [pc, #36]	; (c70 <chSchGoSleepS+0x40>)
     c4a:	f7ff ff61 	bl	b10 <queue_fifo_remove>
     c4e:	4602      	mov	r2, r0
     c50:	4b07      	ldr	r3, [pc, #28]	; (c70 <chSchGoSleepS+0x40>)
     c52:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <chSchGoSleepS+0x40>)
     c56:	699b      	ldr	r3, [r3, #24]
     c58:	2201      	movs	r2, #1
     c5a:	771a      	strb	r2, [r3, #28]
  chSysSwitch(currp, otp);
     c5c:	4b04      	ldr	r3, [pc, #16]	; (c70 <chSchGoSleepS+0x40>)
     c5e:	699b      	ldr	r3, [r3, #24]
     c60:	4618      	mov	r0, r3
     c62:	9903      	ldr	r1, [sp, #12]
     c64:	f7ff fb0c 	bl	280 <_port_switch>
}
     c68:	b005      	add	sp, #20
     c6a:	f85d fb04 	ldr.w	pc, [sp], #4
     c6e:	bf00      	nop
     c70:	20000800 	.word	0x20000800
     c74:	f3af 8000 	nop.w
     c78:	f3af 8000 	nop.w
     c7c:	f3af 8000 	nop.w

00000c80 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
     c80:	b500      	push	{lr}
     c82:	b085      	sub	sp, #20
     c84:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
     c86:	9b01      	ldr	r3, [sp, #4]
     c88:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
     c8a:	f7ff ff69 	bl	b60 <chSysLockFromISR>
  switch (tp->p_state) {
     c8e:	9b03      	ldr	r3, [sp, #12]
     c90:	7f1b      	ldrb	r3, [r3, #28]
     c92:	2b07      	cmp	r3, #7
     c94:	d823      	bhi.n	cde <wakeup+0x5e>
     c96:	a201      	add	r2, pc, #4	; (adr r2, c9c <wakeup+0x1c>)
     c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c9c:	00000cbd 	.word	0x00000cbd
     ca0:	00000cdf 	.word	0x00000cdf
     ca4:	00000cdf 	.word	0x00000cdf
     ca8:	00000cc3 	.word	0x00000cc3
     cac:	00000cd7 	.word	0x00000cd7
     cb0:	00000ccd 	.word	0x00000ccd
     cb4:	00000cdf 	.word	0x00000cdf
     cb8:	00000cd7 	.word	0x00000cd7
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
     cbc:	f7ff ff58 	bl	b70 <chSysUnlockFromISR>
    return;
     cc0:	e017      	b.n	cf2 <wakeup+0x72>
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
     cc2:	9b03      	ldr	r3, [sp, #12]
     cc4:	6a1b      	ldr	r3, [r3, #32]
     cc6:	2200      	movs	r2, #0
     cc8:	601a      	str	r2, [r3, #0]
    break;
     cca:	e009      	b.n	ce0 <wakeup+0x60>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
     ccc:	9b03      	ldr	r3, [sp, #12]
     cce:	6a1b      	ldr	r3, [r3, #32]
     cd0:	4618      	mov	r0, r3
     cd2:	f7ff ff65 	bl	ba0 <chSemFastSignalI>
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
     cd6:	9803      	ldr	r0, [sp, #12]
     cd8:	f7ff ff32 	bl	b40 <queue_dequeue>
    break;
     cdc:	e000      	b.n	ce0 <wakeup+0x60>
  default:
    /* Any other state, nothing to do.*/
    break;
     cde:	bf00      	nop
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
     ce0:	9b03      	ldr	r3, [sp, #12]
     ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     ce6:	621a      	str	r2, [r3, #32]
  (void) chSchReadyI(tp);
     ce8:	9803      	ldr	r0, [sp, #12]
     cea:	f7ff ff79 	bl	be0 <chSchReadyI>
  chSysUnlockFromISR();
     cee:	f7ff ff3f 	bl	b70 <chSysUnlockFromISR>
}
     cf2:	b005      	add	sp, #20
     cf4:	f85d fb04 	ldr.w	pc, [sp], #4
     cf8:	f3af 8000 	nop.w
     cfc:	f3af 8000 	nop.w

00000d00 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
     d00:	b500      	push	{lr}
     d02:	b089      	sub	sp, #36	; 0x24
     d04:	4603      	mov	r3, r0
     d06:	9100      	str	r1, [sp, #0]
     d08:	f88d 3007 	strb.w	r3, [sp, #7]

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
     d0c:	9b00      	ldr	r3, [sp, #0]
     d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
     d12:	d019      	beq.n	d48 <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
     d14:	4b12      	ldr	r3, [pc, #72]	; (d60 <chSchGoSleepTimeoutS+0x60>)
     d16:	699b      	ldr	r3, [r3, #24]
     d18:	aa03      	add	r2, sp, #12
     d1a:	4610      	mov	r0, r2
     d1c:	9900      	ldr	r1, [sp, #0]
     d1e:	4a11      	ldr	r2, [pc, #68]	; (d64 <chSchGoSleepTimeoutS+0x64>)
     d20:	f7ff fdd6 	bl	8d0 <chVTDoSetI>
    chSchGoSleepS(newstate);
     d24:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d28:	4618      	mov	r0, r3
     d2a:	f7ff ff81 	bl	c30 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
     d2e:	ab03      	add	r3, sp, #12
     d30:	4618      	mov	r0, r3
     d32:	f7ff ff25 	bl	b80 <chVTIsArmedI>
     d36:	4603      	mov	r3, r0
     d38:	2b00      	cmp	r3, #0
     d3a:	d004      	beq.n	d46 <chSchGoSleepTimeoutS+0x46>
      chVTDoResetI(&vt);
     d3c:	ab03      	add	r3, sp, #12
     d3e:	4618      	mov	r0, r3
     d40:	f7ff fe46 	bl	9d0 <chVTDoResetI>
     d44:	e005      	b.n	d52 <chSchGoSleepTimeoutS+0x52>
     d46:	e004      	b.n	d52 <chSchGoSleepTimeoutS+0x52>
    }
  }
  else {
    chSchGoSleepS(newstate);
     d48:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d4c:	4618      	mov	r0, r3
     d4e:	f7ff ff6f 	bl	c30 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
     d52:	4b03      	ldr	r3, [pc, #12]	; (d60 <chSchGoSleepTimeoutS+0x60>)
     d54:	699b      	ldr	r3, [r3, #24]
     d56:	6a1b      	ldr	r3, [r3, #32]
}
     d58:	4618      	mov	r0, r3
     d5a:	b009      	add	sp, #36	; 0x24
     d5c:	f85d fb04 	ldr.w	pc, [sp], #4
     d60:	20000800 	.word	0x20000800
     d64:	00000c81 	.word	0x00000c81
     d68:	f3af 8000 	nop.w
     d6c:	f3af 8000 	nop.w

00000d70 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
     d70:	b500      	push	{lr}
     d72:	b085      	sub	sp, #20
     d74:	9001      	str	r0, [sp, #4]
     d76:	9100      	str	r1, [sp, #0]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
     d78:	9b01      	ldr	r3, [sp, #4]
     d7a:	9a00      	ldr	r2, [sp, #0]
     d7c:	621a      	str	r2, [r3, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
     d7e:	9b01      	ldr	r3, [sp, #4]
     d80:	689a      	ldr	r2, [r3, #8]
     d82:	4b0e      	ldr	r3, [pc, #56]	; (dbc <chSchWakeupS+0x4c>)
     d84:	699b      	ldr	r3, [r3, #24]
     d86:	689b      	ldr	r3, [r3, #8]
     d88:	429a      	cmp	r2, r3
     d8a:	d803      	bhi.n	d94 <chSchWakeupS+0x24>
    (void) chSchReadyI(ntp);
     d8c:	9801      	ldr	r0, [sp, #4]
     d8e:	f7ff ff27 	bl	be0 <chSchReadyI>
     d92:	e00f      	b.n	db4 <chSchWakeupS+0x44>
  }
  else {
    thread_t *otp = chSchReadyI(currp);
     d94:	4b09      	ldr	r3, [pc, #36]	; (dbc <chSchWakeupS+0x4c>)
     d96:	699b      	ldr	r3, [r3, #24]
     d98:	4618      	mov	r0, r3
     d9a:	f7ff ff21 	bl	be0 <chSchReadyI>
     d9e:	9003      	str	r0, [sp, #12]
    setcurrp(ntp);
     da0:	4b06      	ldr	r3, [pc, #24]	; (dbc <chSchWakeupS+0x4c>)
     da2:	9a01      	ldr	r2, [sp, #4]
     da4:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
     da6:	9b01      	ldr	r3, [sp, #4]
     da8:	2201      	movs	r2, #1
     daa:	771a      	strb	r2, [r3, #28]
    chSysSwitch(ntp, otp);
     dac:	9801      	ldr	r0, [sp, #4]
     dae:	9903      	ldr	r1, [sp, #12]
     db0:	f7ff fa66 	bl	280 <_port_switch>
  }
}
     db4:	b005      	add	sp, #20
     db6:	f85d fb04 	ldr.w	pc, [sp], #4
     dba:	bf00      	nop
     dbc:	20000800 	.word	0x20000800

00000dc0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
     dc0:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
     dc2:	4b09      	ldr	r3, [pc, #36]	; (de8 <chSchIsPreemptionRequired+0x28>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	689b      	ldr	r3, [r3, #8]
     dc8:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->p_prio;
     dca:	4b07      	ldr	r3, [pc, #28]	; (de8 <chSchIsPreemptionRequired+0x28>)
     dcc:	699b      	ldr	r3, [r3, #24]
     dce:	689b      	ldr	r3, [r3, #8]
     dd0:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
     dd2:	9a01      	ldr	r2, [sp, #4]
     dd4:	9b00      	ldr	r3, [sp, #0]
     dd6:	429a      	cmp	r2, r3
     dd8:	bf94      	ite	ls
     dda:	2300      	movls	r3, #0
     ddc:	2301      	movhi	r3, #1
     dde:	b2db      	uxtb	r3, r3
#endif
}
     de0:	4618      	mov	r0, r3
     de2:	b002      	add	sp, #8
     de4:	4770      	bx	lr
     de6:	bf00      	nop
     de8:	20000800 	.word	0x20000800
     dec:	f3af 8000 	nop.w

00000df0 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
     df0:	b500      	push	{lr}
     df2:	b083      	sub	sp, #12
  thread_t *otp, *cp;

  otp = currp;
     df4:	4b18      	ldr	r3, [pc, #96]	; (e58 <chSchDoRescheduleAhead+0x68>)
     df6:	699b      	ldr	r3, [r3, #24]
     df8:	9300      	str	r3, [sp, #0]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
     dfa:	4817      	ldr	r0, [pc, #92]	; (e58 <chSchDoRescheduleAhead+0x68>)
     dfc:	f7ff fe88 	bl	b10 <queue_fifo_remove>
     e00:	4602      	mov	r2, r0
     e02:	4b15      	ldr	r3, [pc, #84]	; (e58 <chSchDoRescheduleAhead+0x68>)
     e04:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
     e06:	4b14      	ldr	r3, [pc, #80]	; (e58 <chSchDoRescheduleAhead+0x68>)
     e08:	699b      	ldr	r3, [r3, #24]
     e0a:	2201      	movs	r2, #1
     e0c:	771a      	strb	r2, [r3, #28]

  otp->p_state = CH_STATE_READY;
     e0e:	9b00      	ldr	r3, [sp, #0]
     e10:	2200      	movs	r2, #0
     e12:	771a      	strb	r2, [r3, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
     e14:	4b10      	ldr	r3, [pc, #64]	; (e58 <chSchDoRescheduleAhead+0x68>)
     e16:	9301      	str	r3, [sp, #4]
  do {
    cp = cp->p_next;
     e18:	9b01      	ldr	r3, [sp, #4]
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	9301      	str	r3, [sp, #4]
  } while (cp->p_prio > otp->p_prio);
     e1e:	9b01      	ldr	r3, [sp, #4]
     e20:	689a      	ldr	r2, [r3, #8]
     e22:	9b00      	ldr	r3, [sp, #0]
     e24:	689b      	ldr	r3, [r3, #8]
     e26:	429a      	cmp	r2, r3
     e28:	d8f6      	bhi.n	e18 <chSchDoRescheduleAhead+0x28>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
     e2a:	9b00      	ldr	r3, [sp, #0]
     e2c:	9a01      	ldr	r2, [sp, #4]
     e2e:	601a      	str	r2, [r3, #0]
  otp->p_prev = cp->p_prev;
     e30:	9b01      	ldr	r3, [sp, #4]
     e32:	685a      	ldr	r2, [r3, #4]
     e34:	9b00      	ldr	r3, [sp, #0]
     e36:	605a      	str	r2, [r3, #4]
  otp->p_prev->p_next = otp;
     e38:	9b00      	ldr	r3, [sp, #0]
     e3a:	685b      	ldr	r3, [r3, #4]
     e3c:	9a00      	ldr	r2, [sp, #0]
     e3e:	601a      	str	r2, [r3, #0]
  cp->p_prev = otp;
     e40:	9b01      	ldr	r3, [sp, #4]
     e42:	9a00      	ldr	r2, [sp, #0]
     e44:	605a      	str	r2, [r3, #4]

  chSysSwitch(currp, otp);
     e46:	4b04      	ldr	r3, [pc, #16]	; (e58 <chSchDoRescheduleAhead+0x68>)
     e48:	699b      	ldr	r3, [r3, #24]
     e4a:	4618      	mov	r0, r3
     e4c:	9900      	ldr	r1, [sp, #0]
     e4e:	f7ff fa17 	bl	280 <_port_switch>
}
     e52:	b003      	add	sp, #12
     e54:	f85d fb04 	ldr.w	pc, [sp], #4
     e58:	20000800 	.word	0x20000800
     e5c:	f3af 8000 	nop.w

00000e60 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
     e60:	b508      	push	{r3, lr}
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
     e62:	f7ff ffc5 	bl	df0 <chSchDoRescheduleAhead>
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
     e66:	bd08      	pop	{r3, pc}
     e68:	f3af 8000 	nop.w
     e6c:	f3af 8000 	nop.w

00000e70 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
     e70:	b082      	sub	sp, #8
     e72:	2320      	movs	r3, #32
     e74:	9301      	str	r3, [sp, #4]
     e76:	9b01      	ldr	r3, [sp, #4]
     e78:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
     e7c:	b002      	add	sp, #8
     e7e:	4770      	bx	lr

00000e80 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
     e80:	b082      	sub	sp, #8
     e82:	2300      	movs	r3, #0
     e84:	9301      	str	r3, [sp, #4]
     e86:	9b01      	ldr	r3, [sp, #4]
     e88:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
     e8c:	b002      	add	sp, #8
     e8e:	4770      	bx	lr

00000e90 <list_init>:
 *
 * @param[in] tlp       pointer to the threads list object
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {
     e90:	b082      	sub	sp, #8
     e92:	9001      	str	r0, [sp, #4]

  tlp->p_next = (thread_t *)tlp;
     e94:	9b01      	ldr	r3, [sp, #4]
     e96:	9a01      	ldr	r2, [sp, #4]
     e98:	601a      	str	r2, [r3, #0]
}
     e9a:	b002      	add	sp, #8
     e9c:	4770      	bx	lr
     e9e:	bf00      	nop

00000ea0 <list_notempty>:
 * @param[in] tlp       pointer to the threads list object
 * @return              The status of the list.
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {
     ea0:	b082      	sub	sp, #8
     ea2:	9001      	str	r0, [sp, #4]

  return (bool)(tlp->p_next != (thread_t *)tlp);
     ea4:	9b01      	ldr	r3, [sp, #4]
     ea6:	681a      	ldr	r2, [r3, #0]
     ea8:	9b01      	ldr	r3, [sp, #4]
     eaa:	429a      	cmp	r2, r3
     eac:	bf0c      	ite	eq
     eae:	2300      	moveq	r3, #0
     eb0:	2301      	movne	r3, #1
     eb2:	b2db      	uxtb	r3, r3
}
     eb4:	4618      	mov	r0, r3
     eb6:	b002      	add	sp, #8
     eb8:	4770      	bx	lr
     eba:	bf00      	nop
     ebc:	f3af 8000 	nop.w

00000ec0 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
     ec0:	b082      	sub	sp, #8
     ec2:	9001      	str	r0, [sp, #4]

  tqp->p_next = (thread_t *)tqp;
     ec4:	9b01      	ldr	r3, [sp, #4]
     ec6:	9a01      	ldr	r2, [sp, #4]
     ec8:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
     eca:	9b01      	ldr	r3, [sp, #4]
     ecc:	9a01      	ldr	r2, [sp, #4]
     ece:	605a      	str	r2, [r3, #4]
}
     ed0:	b002      	add	sp, #8
     ed2:	4770      	bx	lr
     ed4:	f3af 8000 	nop.w
     ed8:	f3af 8000 	nop.w
     edc:	f3af 8000 	nop.w

00000ee0 <queue_notempty>:
 * @param[in] tqp       pointer to the threads queue object
 * @return              The status of the queue.
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {
     ee0:	b082      	sub	sp, #8
     ee2:	9001      	str	r0, [sp, #4]

  return (bool)(tqp->p_next != (const thread_t *)tqp);
     ee4:	9b01      	ldr	r3, [sp, #4]
     ee6:	681a      	ldr	r2, [r3, #0]
     ee8:	9b01      	ldr	r3, [sp, #4]
     eea:	429a      	cmp	r2, r3
     eec:	bf0c      	ite	eq
     eee:	2300      	moveq	r3, #0
     ef0:	2301      	movne	r3, #1
     ef2:	b2db      	uxtb	r3, r3
}
     ef4:	4618      	mov	r0, r3
     ef6:	b002      	add	sp, #8
     ef8:	4770      	bx	lr
     efa:	bf00      	nop
     efc:	f3af 8000 	nop.w

00000f00 <list_remove>:

  tp->p_next = tlp->p_next;
  tlp->p_next = tp;
}

static inline thread_t *list_remove(threads_list_t *tlp) {
     f00:	b084      	sub	sp, #16
     f02:	9001      	str	r0, [sp, #4]

  thread_t *tp = tlp->p_next;
     f04:	9b01      	ldr	r3, [sp, #4]
     f06:	681b      	ldr	r3, [r3, #0]
     f08:	9303      	str	r3, [sp, #12]
  tlp->p_next = tp->p_next;
     f0a:	9b03      	ldr	r3, [sp, #12]
     f0c:	681a      	ldr	r2, [r3, #0]
     f0e:	9b01      	ldr	r3, [sp, #4]
     f10:	601a      	str	r2, [r3, #0]

  return tp;
     f12:	9b03      	ldr	r3, [sp, #12]
}
     f14:	4618      	mov	r0, r3
     f16:	b004      	add	sp, #16
     f18:	4770      	bx	lr
     f1a:	bf00      	nop
     f1c:	f3af 8000 	nop.w

00000f20 <queue_insert>:
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
     f20:	b082      	sub	sp, #8
     f22:	9001      	str	r0, [sp, #4]
     f24:	9100      	str	r1, [sp, #0]

  tp->p_next = (thread_t *)tqp;
     f26:	9b01      	ldr	r3, [sp, #4]
     f28:	9a00      	ldr	r2, [sp, #0]
     f2a:	601a      	str	r2, [r3, #0]
  tp->p_prev = tqp->p_prev;
     f2c:	9b00      	ldr	r3, [sp, #0]
     f2e:	685a      	ldr	r2, [r3, #4]
     f30:	9b01      	ldr	r3, [sp, #4]
     f32:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
     f34:	9b01      	ldr	r3, [sp, #4]
     f36:	685b      	ldr	r3, [r3, #4]
     f38:	9a01      	ldr	r2, [sp, #4]
     f3a:	601a      	str	r2, [r3, #0]
  tqp->p_prev = tp;
     f3c:	9b00      	ldr	r3, [sp, #0]
     f3e:	9a01      	ldr	r2, [sp, #4]
     f40:	605a      	str	r2, [r3, #4]
}
     f42:	b002      	add	sp, #8
     f44:	4770      	bx	lr
     f46:	bf00      	nop
     f48:	f3af 8000 	nop.w
     f4c:	f3af 8000 	nop.w

00000f50 <queue_fifo_remove>:

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
     f50:	b084      	sub	sp, #16
     f52:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->p_next;
     f54:	9b01      	ldr	r3, [sp, #4]
     f56:	681b      	ldr	r3, [r3, #0]
     f58:	9303      	str	r3, [sp, #12]

  tqp->p_next = tp->p_next;
     f5a:	9b03      	ldr	r3, [sp, #12]
     f5c:	681a      	ldr	r2, [r3, #0]
     f5e:	9b01      	ldr	r3, [sp, #4]
     f60:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
     f62:	9b01      	ldr	r3, [sp, #4]
     f64:	681b      	ldr	r3, [r3, #0]
     f66:	9a01      	ldr	r2, [sp, #4]
     f68:	605a      	str	r2, [r3, #4]

  return tp;
     f6a:	9b03      	ldr	r3, [sp, #12]
}
     f6c:	4618      	mov	r0, r3
     f6e:	b004      	add	sp, #16
     f70:	4770      	bx	lr
     f72:	bf00      	nop
     f74:	f3af 8000 	nop.w
     f78:	f3af 8000 	nop.w
     f7c:	f3af 8000 	nop.w

00000f80 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
     f80:	b508      	push	{r3, lr}

  port_lock();
     f82:	f7ff ff75 	bl	e70 <port_lock>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
     f86:	bd08      	pop	{r3, pc}
     f88:	f3af 8000 	nop.w
     f8c:	f3af 8000 	nop.w

00000f90 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
     f90:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
     f92:	f7ff ff75 	bl	e80 <port_unlock>
}
     f96:	bd08      	pop	{r3, pc}
     f98:	f3af 8000 	nop.w
     f9c:	f3af 8000 	nop.w

00000fa0 <chThdSleepS>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {
     fa0:	b500      	push	{lr}
     fa2:	b083      	sub	sp, #12
     fa4:	9001      	str	r0, [sp, #4]

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
     fa6:	2008      	movs	r0, #8
     fa8:	9901      	ldr	r1, [sp, #4]
     faa:	f7ff fea9 	bl	d00 <chSchGoSleepTimeoutS>
}
     fae:	b003      	add	sp, #12
     fb0:	f85d fb04 	ldr.w	pc, [sp], #4
     fb4:	f3af 8000 	nop.w
     fb8:	f3af 8000 	nop.w
     fbc:	f3af 8000 	nop.w

00000fc0 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
     fc0:	b500      	push	{lr}
     fc2:	b085      	sub	sp, #20
     fc4:	9001      	str	r0, [sp, #4]
     fc6:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);
     fc8:	9801      	ldr	r0, [sp, #4]
     fca:	f7ff ffc1 	bl	f50 <queue_fifo_remove>
     fce:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
     fd0:	9b03      	ldr	r3, [sp, #12]
     fd2:	9a00      	ldr	r2, [sp, #0]
     fd4:	621a      	str	r2, [r3, #32]
  (void) chSchReadyI(tp);
     fd6:	9803      	ldr	r0, [sp, #12]
     fd8:	f7ff fe02 	bl	be0 <chSchReadyI>
}
     fdc:	b005      	add	sp, #20
     fde:	f85d fb04 	ldr.w	pc, [sp], #4
     fe2:	bf00      	nop
     fe4:	f3af 8000 	nop.w
     fe8:	f3af 8000 	nop.w
     fec:	f3af 8000 	nop.w

00000ff0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
     ff0:	b500      	push	{lr}
     ff2:	b083      	sub	sp, #12
     ff4:	9001      	str	r0, [sp, #4]
     ff6:	9100      	str	r1, [sp, #0]

  tp->p_prio = prio;
     ff8:	9b01      	ldr	r3, [sp, #4]
     ffa:	9a00      	ldr	r2, [sp, #0]
     ffc:	609a      	str	r2, [r3, #8]
  tp->p_state = CH_STATE_WTSTART;
     ffe:	9b01      	ldr	r3, [sp, #4]
    1000:	2202      	movs	r2, #2
    1002:	771a      	strb	r2, [r3, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
    1004:	9b01      	ldr	r3, [sp, #4]
    1006:	2200      	movs	r2, #0
    1008:	775a      	strb	r2, [r3, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
    100a:	9b01      	ldr	r3, [sp, #4]
    100c:	9a00      	ldr	r2, [sp, #0]
    100e:	63da      	str	r2, [r3, #60]	; 0x3c
  tp->p_mtxlist = NULL;
    1010:	9b01      	ldr	r3, [sp, #4]
    1012:	2200      	movs	r2, #0
    1014:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
    1016:	9b01      	ldr	r3, [sp, #4]
    1018:	2200      	movs	r2, #0
    101a:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
    101c:	9b01      	ldr	r3, [sp, #4]
    101e:	2201      	movs	r2, #1
    1020:	779a      	strb	r2, [r3, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
    1022:	9b01      	ldr	r3, [sp, #4]
    1024:	2200      	movs	r2, #0
    1026:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
    1028:	9b01      	ldr	r3, [sp, #4]
    102a:	4a0e      	ldr	r2, [pc, #56]	; (1064 <__ram5_size__+0x64>)
    102c:	611a      	str	r2, [r3, #16]
    102e:	4b0d      	ldr	r3, [pc, #52]	; (1064 <__ram5_size__+0x64>)
    1030:	695a      	ldr	r2, [r3, #20]
    1032:	9b01      	ldr	r3, [sp, #4]
    1034:	615a      	str	r2, [r3, #20]
    1036:	9b01      	ldr	r3, [sp, #4]
    1038:	695b      	ldr	r3, [r3, #20]
    103a:	9a01      	ldr	r2, [sp, #4]
    103c:	611a      	str	r2, [r3, #16]
    103e:	4b09      	ldr	r3, [pc, #36]	; (1064 <__ram5_size__+0x64>)
    1040:	9a01      	ldr	r2, [sp, #4]
    1042:	615a      	str	r2, [r3, #20]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
    1044:	9b01      	ldr	r3, [sp, #4]
    1046:	3324      	adds	r3, #36	; 0x24
    1048:	4618      	mov	r0, r3
    104a:	f7ff ff21 	bl	e90 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
    104e:	9b01      	ldr	r3, [sp, #4]
    1050:	3328      	adds	r3, #40	; 0x28
    1052:	4618      	mov	r0, r3
    1054:	f7ff ff34 	bl	ec0 <queue_init>
  chTMStartMeasurementX(&tp->p_stats);
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
    1058:	9b01      	ldr	r3, [sp, #4]
}
    105a:	4618      	mov	r0, r3
    105c:	b003      	add	sp, #12
    105e:	f85d fb04 	ldr.w	pc, [sp], #4
    1062:	bf00      	nop
    1064:	20000800 	.word	0x20000800
    1068:	f3af 8000 	nop.w
    106c:	f3af 8000 	nop.w

00001070 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
    1070:	b500      	push	{lr}
    1072:	b087      	sub	sp, #28
    1074:	9003      	str	r0, [sp, #12]
    1076:	9102      	str	r1, [sp, #8]
    1078:	9201      	str	r2, [sp, #4]
    107a:	9300      	str	r3, [sp, #0]
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;
    107c:	9b03      	ldr	r3, [sp, #12]
    107e:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
    1080:	9b02      	ldr	r3, [sp, #8]
    1082:	3b24      	subs	r3, #36	; 0x24
    1084:	9a03      	ldr	r2, [sp, #12]
    1086:	441a      	add	r2, r3
    1088:	9b05      	ldr	r3, [sp, #20]
    108a:	60da      	str	r2, [r3, #12]
    108c:	9b05      	ldr	r3, [sp, #20]
    108e:	68db      	ldr	r3, [r3, #12]
    1090:	9a00      	ldr	r2, [sp, #0]
    1092:	601a      	str	r2, [r3, #0]
    1094:	9b05      	ldr	r3, [sp, #20]
    1096:	68db      	ldr	r3, [r3, #12]
    1098:	9a08      	ldr	r2, [sp, #32]
    109a:	605a      	str	r2, [r3, #4]
    109c:	9b05      	ldr	r3, [sp, #20]
    109e:	68db      	ldr	r3, [r3, #12]
    10a0:	4a05      	ldr	r2, [pc, #20]	; (10b8 <chThdCreateI+0x48>)
    10a2:	621a      	str	r2, [r3, #32]

  return _thread_init(tp, prio);
    10a4:	9805      	ldr	r0, [sp, #20]
    10a6:	9901      	ldr	r1, [sp, #4]
    10a8:	f7ff ffa2 	bl	ff0 <_thread_init>
    10ac:	4603      	mov	r3, r0
}
    10ae:	4618      	mov	r0, r3
    10b0:	b007      	add	sp, #28
    10b2:	f85d fb04 	ldr.w	pc, [sp], #4
    10b6:	bf00      	nop
    10b8:	00000291 	.word	0x00000291
    10bc:	f3af 8000 	nop.w

000010c0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
    10c0:	b500      	push	{lr}
    10c2:	b089      	sub	sp, #36	; 0x24
    10c4:	9005      	str	r0, [sp, #20]
    10c6:	9104      	str	r1, [sp, #16]
    10c8:	9203      	str	r2, [sp, #12]
    10ca:	9302      	str	r3, [sp, #8]
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
    10cc:	f7ff ff58 	bl	f80 <chSysLock>
  tp = chThdCreateI(wsp, size, prio, pf, arg);
    10d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10d2:	9300      	str	r3, [sp, #0]
    10d4:	9805      	ldr	r0, [sp, #20]
    10d6:	9904      	ldr	r1, [sp, #16]
    10d8:	9a03      	ldr	r2, [sp, #12]
    10da:	9b02      	ldr	r3, [sp, #8]
    10dc:	f7ff ffc8 	bl	1070 <chThdCreateI>
    10e0:	9007      	str	r0, [sp, #28]
  chSchWakeupS(tp, MSG_OK);
    10e2:	9807      	ldr	r0, [sp, #28]
    10e4:	2100      	movs	r1, #0
    10e6:	f7ff fe43 	bl	d70 <chSchWakeupS>
  chSysUnlock();
    10ea:	f7ff ff51 	bl	f90 <chSysUnlock>

  return tp;
    10ee:	9b07      	ldr	r3, [sp, #28]
}
    10f0:	4618      	mov	r0, r3
    10f2:	b009      	add	sp, #36	; 0x24
    10f4:	f85d fb04 	ldr.w	pc, [sp], #4
    10f8:	f3af 8000 	nop.w
    10fc:	f3af 8000 	nop.w

00001100 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
    1100:	b500      	push	{lr}
    1102:	b083      	sub	sp, #12
    1104:	9001      	str	r0, [sp, #4]

  chSysLock();
    1106:	f7ff ff3b 	bl	f80 <chSysLock>
  chThdSleepS(time);
    110a:	9801      	ldr	r0, [sp, #4]
    110c:	f7ff ff48 	bl	fa0 <chThdSleepS>
  chSysUnlock();
    1110:	f7ff ff3e 	bl	f90 <chSysUnlock>
}
    1114:	b003      	add	sp, #12
    1116:	f85d fb04 	ldr.w	pc, [sp], #4
    111a:	bf00      	nop
    111c:	f3af 8000 	nop.w

00001120 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
    1120:	b500      	push	{lr}
    1122:	b083      	sub	sp, #12
    1124:	9001      	str	r0, [sp, #4]

  chSysLock();
    1126:	f7ff ff2b 	bl	f80 <chSysLock>
  chThdExitS(msg);
    112a:	9801      	ldr	r0, [sp, #4]
    112c:	f000 f808 	bl	1140 <chThdExitS>
  /* The thread never returns here.*/
}
    1130:	b003      	add	sp, #12
    1132:	f85d fb04 	ldr.w	pc, [sp], #4
    1136:	bf00      	nop
    1138:	f3af 8000 	nop.w
    113c:	f3af 8000 	nop.w

00001140 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
    1140:	b500      	push	{lr}
    1142:	b085      	sub	sp, #20
    1144:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
    1146:	4b17      	ldr	r3, [pc, #92]	; (11a4 <chThdExitS+0x64>)
    1148:	699b      	ldr	r3, [r3, #24]
    114a:	9303      	str	r3, [sp, #12]

  tp->p_u.exitcode = msg;
    114c:	9b03      	ldr	r3, [sp, #12]
    114e:	9a01      	ldr	r2, [sp, #4]
    1150:	621a      	str	r2, [r3, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
    1152:	e008      	b.n	1166 <chThdExitS+0x26>
    (void) chSchReadyI(list_remove(&tp->p_waiting));
    1154:	9b03      	ldr	r3, [sp, #12]
    1156:	3324      	adds	r3, #36	; 0x24
    1158:	4618      	mov	r0, r3
    115a:	f7ff fed1 	bl	f00 <list_remove>
    115e:	4603      	mov	r3, r0
    1160:	4618      	mov	r0, r3
    1162:	f7ff fd3d 	bl	be0 <chSchReadyI>
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
    1166:	9b03      	ldr	r3, [sp, #12]
    1168:	3324      	adds	r3, #36	; 0x24
    116a:	4618      	mov	r0, r3
    116c:	f7ff fe98 	bl	ea0 <list_notempty>
    1170:	4603      	mov	r3, r0
    1172:	2b00      	cmp	r3, #0
    1174:	d1ee      	bne.n	1154 <chThdExitS+0x14>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    1176:	9b03      	ldr	r3, [sp, #12]
    1178:	7f5b      	ldrb	r3, [r3, #29]
    117a:	f003 0303 	and.w	r3, r3, #3
    117e:	2b00      	cmp	r3, #0
    1180:	d109      	bne.n	1196 <chThdExitS+0x56>
    REG_REMOVE(tp);
    1182:	9b03      	ldr	r3, [sp, #12]
    1184:	695b      	ldr	r3, [r3, #20]
    1186:	9a03      	ldr	r2, [sp, #12]
    1188:	6912      	ldr	r2, [r2, #16]
    118a:	611a      	str	r2, [r3, #16]
    118c:	9b03      	ldr	r3, [sp, #12]
    118e:	691b      	ldr	r3, [r3, #16]
    1190:	9a03      	ldr	r2, [sp, #12]
    1192:	6952      	ldr	r2, [r2, #20]
    1194:	615a      	str	r2, [r3, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
    1196:	200f      	movs	r0, #15
    1198:	f7ff fd4a 	bl	c30 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
    119c:	b005      	add	sp, #20
    119e:	f85d fb04 	ldr.w	pc, [sp], #4
    11a2:	bf00      	nop
    11a4:	20000800 	.word	0x20000800
    11a8:	f3af 8000 	nop.w
    11ac:	f3af 8000 	nop.w

000011b0 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
    11b0:	b500      	push	{lr}
    11b2:	b085      	sub	sp, #20
    11b4:	9001      	str	r0, [sp, #4]
    11b6:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
    11b8:	9b01      	ldr	r3, [sp, #4]
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	2b00      	cmp	r3, #0
    11be:	d00b      	beq.n	11d8 <chThdResumeI+0x28>
    thread_t *tp = *trp;
    11c0:	9b01      	ldr	r3, [sp, #4]
    11c2:	681b      	ldr	r3, [r3, #0]
    11c4:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    11c6:	9b01      	ldr	r3, [sp, #4]
    11c8:	2200      	movs	r2, #0
    11ca:	601a      	str	r2, [r3, #0]
    tp->p_u.rdymsg = msg;
    11cc:	9b03      	ldr	r3, [sp, #12]
    11ce:	9a00      	ldr	r2, [sp, #0]
    11d0:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
    11d2:	9803      	ldr	r0, [sp, #12]
    11d4:	f7ff fd04 	bl	be0 <chSchReadyI>
  }
}
    11d8:	b005      	add	sp, #20
    11da:	f85d fb04 	ldr.w	pc, [sp], #4
    11de:	bf00      	nop

000011e0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
    11e0:	b500      	push	{lr}
    11e2:	b083      	sub	sp, #12
    11e4:	9001      	str	r0, [sp, #4]
    11e6:	9100      	str	r1, [sp, #0]

  if (TIME_IMMEDIATE == timeout) {
    11e8:	9b00      	ldr	r3, [sp, #0]
    11ea:	2b00      	cmp	r3, #0
    11ec:	d102      	bne.n	11f4 <chThdEnqueueTimeoutS+0x14>
    return MSG_TIMEOUT;
    11ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    11f2:	e00a      	b.n	120a <chThdEnqueueTimeoutS+0x2a>
  }

  queue_insert(currp, tqp);
    11f4:	4b07      	ldr	r3, [pc, #28]	; (1214 <chThdEnqueueTimeoutS+0x34>)
    11f6:	699b      	ldr	r3, [r3, #24]
    11f8:	4618      	mov	r0, r3
    11fa:	9901      	ldr	r1, [sp, #4]
    11fc:	f7ff fe90 	bl	f20 <queue_insert>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
    1200:	2004      	movs	r0, #4
    1202:	9900      	ldr	r1, [sp, #0]
    1204:	f7ff fd7c 	bl	d00 <chSchGoSleepTimeoutS>
    1208:	4603      	mov	r3, r0
}
    120a:	4618      	mov	r0, r3
    120c:	b003      	add	sp, #12
    120e:	f85d fb04 	ldr.w	pc, [sp], #4
    1212:	bf00      	nop
    1214:	20000800 	.word	0x20000800
    1218:	f3af 8000 	nop.w
    121c:	f3af 8000 	nop.w

00001220 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
    1220:	b500      	push	{lr}
    1222:	b083      	sub	sp, #12
    1224:	9001      	str	r0, [sp, #4]
    1226:	9100      	str	r1, [sp, #0]

  if (queue_notempty(tqp)) {
    1228:	9801      	ldr	r0, [sp, #4]
    122a:	f7ff fe59 	bl	ee0 <queue_notempty>
    122e:	4603      	mov	r3, r0
    1230:	2b00      	cmp	r3, #0
    1232:	d003      	beq.n	123c <chThdDequeueNextI+0x1c>
    chThdDoDequeueNextI(tqp, msg);
    1234:	9801      	ldr	r0, [sp, #4]
    1236:	9900      	ldr	r1, [sp, #0]
    1238:	f7ff fec2 	bl	fc0 <chThdDoDequeueNextI>
  }
}
    123c:	b003      	add	sp, #12
    123e:	f85d fb04 	ldr.w	pc, [sp], #4
    1242:	bf00      	nop
    1244:	f3af 8000 	nop.w
    1248:	f3af 8000 	nop.w
    124c:	f3af 8000 	nop.w

00001250 <port_rt_get_counter_value>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
    1250:	4b01      	ldr	r3, [pc, #4]	; (1258 <port_rt_get_counter_value+0x8>)
    1252:	685b      	ldr	r3, [r3, #4]
}
    1254:	4618      	mov	r0, r3
    1256:	4770      	bx	lr
    1258:	e0001000 	.word	0xe0001000
    125c:	f3af 8000 	nop.w

00001260 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
    1260:	b084      	sub	sp, #16
    1262:	9003      	str	r0, [sp, #12]
    1264:	9102      	str	r1, [sp, #8]
    1266:	9201      	str	r2, [sp, #4]

  tmp->n++;
    1268:	9b03      	ldr	r3, [sp, #12]
    126a:	68db      	ldr	r3, [r3, #12]
    126c:	1c5a      	adds	r2, r3, #1
    126e:	9b03      	ldr	r3, [sp, #12]
    1270:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
    1272:	9b03      	ldr	r3, [sp, #12]
    1274:	689b      	ldr	r3, [r3, #8]
    1276:	9a02      	ldr	r2, [sp, #8]
    1278:	1ad2      	subs	r2, r2, r3
    127a:	9b01      	ldr	r3, [sp, #4]
    127c:	1ad2      	subs	r2, r2, r3
    127e:	9b03      	ldr	r3, [sp, #12]
    1280:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
    1282:	9b03      	ldr	r3, [sp, #12]
    1284:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    1288:	9b03      	ldr	r3, [sp, #12]
    128a:	689b      	ldr	r3, [r3, #8]
    128c:	461a      	mov	r2, r3
    128e:	f04f 0300 	mov.w	r3, #0
    1292:	1812      	adds	r2, r2, r0
    1294:	eb43 0301 	adc.w	r3, r3, r1
    1298:	9903      	ldr	r1, [sp, #12]
    129a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    129e:	9b03      	ldr	r3, [sp, #12]
    12a0:	689a      	ldr	r2, [r3, #8]
    12a2:	9b03      	ldr	r3, [sp, #12]
    12a4:	685b      	ldr	r3, [r3, #4]
    12a6:	429a      	cmp	r2, r3
    12a8:	d904      	bls.n	12b4 <tm_stop+0x54>
    tmp->worst = tmp->last;
    12aa:	9b03      	ldr	r3, [sp, #12]
    12ac:	689a      	ldr	r2, [r3, #8]
    12ae:	9b03      	ldr	r3, [sp, #12]
    12b0:	605a      	str	r2, [r3, #4]
    12b2:	e009      	b.n	12c8 <tm_stop+0x68>
  }
  else if (tmp->last < tmp->best) {
    12b4:	9b03      	ldr	r3, [sp, #12]
    12b6:	689a      	ldr	r2, [r3, #8]
    12b8:	9b03      	ldr	r3, [sp, #12]
    12ba:	681b      	ldr	r3, [r3, #0]
    12bc:	429a      	cmp	r2, r3
    12be:	d203      	bcs.n	12c8 <tm_stop+0x68>
    tmp->best = tmp->last;
    12c0:	9b03      	ldr	r3, [sp, #12]
    12c2:	689a      	ldr	r2, [r3, #8]
    12c4:	9b03      	ldr	r3, [sp, #12]
    12c6:	601a      	str	r2, [r3, #0]
  }
  /*lint -restore*/
}
    12c8:	b004      	add	sp, #16
    12ca:	4770      	bx	lr
    12cc:	f3af 8000 	nop.w

000012d0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
    12d0:	b500      	push	{lr}
    12d2:	b087      	sub	sp, #28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
    12d4:	4b0a      	ldr	r3, [pc, #40]	; (1300 <_tm_init+0x30>)
    12d6:	2200      	movs	r2, #0
    12d8:	675a      	str	r2, [r3, #116]	; 0x74
  chTMObjectInit(&tm);
    12da:	466b      	mov	r3, sp
    12dc:	4618      	mov	r0, r3
    12de:	f000 f817 	bl	1310 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
    12e2:	466b      	mov	r3, sp
    12e4:	4618      	mov	r0, r3
    12e6:	f000 f82b 	bl	1340 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
    12ea:	466b      	mov	r3, sp
    12ec:	4618      	mov	r0, r3
    12ee:	f000 f837 	bl	1360 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
    12f2:	9a02      	ldr	r2, [sp, #8]
    12f4:	4b02      	ldr	r3, [pc, #8]	; (1300 <_tm_init+0x30>)
    12f6:	675a      	str	r2, [r3, #116]	; 0x74
}
    12f8:	b007      	add	sp, #28
    12fa:	f85d fb04 	ldr.w	pc, [sp], #4
    12fe:	bf00      	nop
    1300:	20000800 	.word	0x20000800
    1304:	f3af 8000 	nop.w
    1308:	f3af 8000 	nop.w
    130c:	f3af 8000 	nop.w

00001310 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
    1310:	b082      	sub	sp, #8
    1312:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
    1314:	9b01      	ldr	r3, [sp, #4]
    1316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    131a:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
    131c:	9b01      	ldr	r3, [sp, #4]
    131e:	2200      	movs	r2, #0
    1320:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
    1322:	9b01      	ldr	r3, [sp, #4]
    1324:	2200      	movs	r2, #0
    1326:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
    1328:	9b01      	ldr	r3, [sp, #4]
    132a:	2200      	movs	r2, #0
    132c:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
    132e:	9901      	ldr	r1, [sp, #4]
    1330:	f04f 0200 	mov.w	r2, #0
    1334:	f04f 0300 	mov.w	r3, #0
    1338:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
    133c:	b002      	add	sp, #8
    133e:	4770      	bx	lr

00001340 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
    1340:	b500      	push	{lr}
    1342:	b083      	sub	sp, #12
    1344:	9001      	str	r0, [sp, #4]

  tmp->last = chSysGetRealtimeCounterX();
    1346:	f7ff ff83 	bl	1250 <port_rt_get_counter_value>
    134a:	4602      	mov	r2, r0
    134c:	9b01      	ldr	r3, [sp, #4]
    134e:	609a      	str	r2, [r3, #8]
}
    1350:	b003      	add	sp, #12
    1352:	f85d fb04 	ldr.w	pc, [sp], #4
    1356:	bf00      	nop
    1358:	f3af 8000 	nop.w
    135c:	f3af 8000 	nop.w

00001360 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
    1360:	b500      	push	{lr}
    1362:	b083      	sub	sp, #12
    1364:	9001      	str	r0, [sp, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
    1366:	f7ff ff73 	bl	1250 <port_rt_get_counter_value>
    136a:	4602      	mov	r2, r0
    136c:	4b04      	ldr	r3, [pc, #16]	; (1380 <chTMStopMeasurementX+0x20>)
    136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1370:	9801      	ldr	r0, [sp, #4]
    1372:	4611      	mov	r1, r2
    1374:	461a      	mov	r2, r3
    1376:	f7ff ff73 	bl	1260 <tm_stop>
}
    137a:	b003      	add	sp, #12
    137c:	f85d fb04 	ldr.w	pc, [sp], #4
    1380:	20000800 	.word	0x20000800
    1384:	f3af 8000 	nop.w
    1388:	f3af 8000 	nop.w
    138c:	f3af 8000 	nop.w

00001390 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
    1390:	b082      	sub	sp, #8
    1392:	9001      	str	r0, [sp, #4]

  tqp->p_next = (thread_t *)tqp;
    1394:	9b01      	ldr	r3, [sp, #4]
    1396:	9a01      	ldr	r2, [sp, #4]
    1398:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
    139a:	9b01      	ldr	r3, [sp, #4]
    139c:	9a01      	ldr	r2, [sp, #4]
    139e:	605a      	str	r2, [r3, #4]
}
    13a0:	b002      	add	sp, #8
    13a2:	4770      	bx	lr
    13a4:	f3af 8000 	nop.w
    13a8:	f3af 8000 	nop.w
    13ac:	f3af 8000 	nop.w

000013b0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
    13b0:	b500      	push	{lr}
    13b2:	b083      	sub	sp, #12
    13b4:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
    13b6:	9b01      	ldr	r3, [sp, #4]
    13b8:	4618      	mov	r0, r3
    13ba:	f7ff ffe9 	bl	1390 <queue_init>
  mp->m_owner = NULL;
    13be:	9b01      	ldr	r3, [sp, #4]
    13c0:	2200      	movs	r2, #0
    13c2:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->m_cnt = (cnt_t)0;
#endif
}
    13c4:	b003      	add	sp, #12
    13c6:	f85d fb04 	ldr.w	pc, [sp], #4
    13ca:	bf00      	nop
    13cc:	f3af 8000 	nop.w

000013d0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
    13d0:	b500      	push	{lr}
    13d2:	b085      	sub	sp, #20
    13d4:	9001      	str	r0, [sp, #4]
    13d6:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
    13d8:	9b01      	ldr	r3, [sp, #4]
    13da:	681b      	ldr	r3, [r3, #0]
    13dc:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    13de:	e01a      	b.n	1416 <chEvtBroadcastFlagsI+0x46>
  /*lint -restore*/
    elp->el_flags |= flags;
    13e0:	9b03      	ldr	r3, [sp, #12]
    13e2:	68da      	ldr	r2, [r3, #12]
    13e4:	9b00      	ldr	r3, [sp, #0]
    13e6:	431a      	orrs	r2, r3
    13e8:	9b03      	ldr	r3, [sp, #12]
    13ea:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    13ec:	9b00      	ldr	r3, [sp, #0]
    13ee:	2b00      	cmp	r3, #0
    13f0:	d006      	beq.n	1400 <chEvtBroadcastFlagsI+0x30>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
    13f2:	9b03      	ldr	r3, [sp, #12]
    13f4:	68da      	ldr	r2, [r3, #12]
    13f6:	9b03      	ldr	r3, [sp, #12]
    13f8:	691b      	ldr	r3, [r3, #16]
    13fa:	4013      	ands	r3, r2
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    13fc:	2b00      	cmp	r3, #0
    13fe:	d007      	beq.n	1410 <chEvtBroadcastFlagsI+0x40>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    1400:	9b03      	ldr	r3, [sp, #12]
    1402:	685a      	ldr	r2, [r3, #4]
    1404:	9b03      	ldr	r3, [sp, #12]
    1406:	689b      	ldr	r3, [r3, #8]
    1408:	4610      	mov	r0, r2
    140a:	4619      	mov	r1, r3
    140c:	f000 f810 	bl	1430 <chEvtSignalI>
    }
    elp = elp->el_next;
    1410:	9b03      	ldr	r3, [sp, #12]
    1412:	681b      	ldr	r3, [r3, #0]
    1414:	9303      	str	r3, [sp, #12]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    1416:	9a03      	ldr	r2, [sp, #12]
    1418:	9b01      	ldr	r3, [sp, #4]
    141a:	429a      	cmp	r2, r3
    141c:	d1e0      	bne.n	13e0 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
  }
}
    141e:	b005      	add	sp, #20
    1420:	f85d fb04 	ldr.w	pc, [sp], #4
    1424:	f3af 8000 	nop.w
    1428:	f3af 8000 	nop.w
    142c:	f3af 8000 	nop.w

00001430 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
    1430:	b500      	push	{lr}
    1432:	b083      	sub	sp, #12
    1434:	9001      	str	r0, [sp, #4]
    1436:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
    1438:	9b01      	ldr	r3, [sp, #4]
    143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    143c:	9b00      	ldr	r3, [sp, #0]
    143e:	431a      	orrs	r2, r3
    1440:	9b01      	ldr	r3, [sp, #4]
    1442:	635a      	str	r2, [r3, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
    1444:	9b01      	ldr	r3, [sp, #4]
    1446:	7f1b      	ldrb	r3, [r3, #28]
    1448:	2b0a      	cmp	r3, #10
    144a:	d106      	bne.n	145a <chEvtSignalI+0x2a>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
    144c:	9b01      	ldr	r3, [sp, #4]
    144e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1450:	9b01      	ldr	r3, [sp, #4]
    1452:	6a1b      	ldr	r3, [r3, #32]
    1454:	4013      	ands	r3, r2
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
    1456:	2b00      	cmp	r3, #0
    1458:	d10c      	bne.n	1474 <chEvtSignalI+0x44>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
    145a:	9b01      	ldr	r3, [sp, #4]
    145c:	7f1b      	ldrb	r3, [r3, #28]
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
    145e:	2b0b      	cmp	r3, #11
    1460:	d10e      	bne.n	1480 <chEvtSignalI+0x50>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    1462:	9b01      	ldr	r3, [sp, #4]
    1464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1466:	9b01      	ldr	r3, [sp, #4]
    1468:	6a1b      	ldr	r3, [r3, #32]
    146a:	401a      	ands	r2, r3
    146c:	9b01      	ldr	r3, [sp, #4]
    146e:	6a1b      	ldr	r3, [r3, #32]

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
    1470:	429a      	cmp	r2, r3
    1472:	d105      	bne.n	1480 <chEvtSignalI+0x50>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
    1474:	9b01      	ldr	r3, [sp, #4]
    1476:	2200      	movs	r2, #0
    1478:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
    147a:	9801      	ldr	r0, [sp, #4]
    147c:	f7ff fbb0 	bl	be0 <chSchReadyI>
  }
}
    1480:	b003      	add	sp, #12
    1482:	f85d fb04 	ldr.w	pc, [sp], #4
    1486:	bf00      	nop
    1488:	f3af 8000 	nop.w
    148c:	f3af 8000 	nop.w

00001490 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
    1490:	b082      	sub	sp, #8
    1492:	2320      	movs	r3, #32
    1494:	9301      	str	r3, [sp, #4]
    1496:	9b01      	ldr	r3, [sp, #4]
    1498:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    149c:	b002      	add	sp, #8
    149e:	4770      	bx	lr

000014a0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
    14a0:	b082      	sub	sp, #8
    14a2:	2300      	movs	r3, #0
    14a4:	9301      	str	r3, [sp, #4]
    14a6:	9b01      	ldr	r3, [sp, #4]
    14a8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    14ac:	b002      	add	sp, #8
    14ae:	4770      	bx	lr

000014b0 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
    14b0:	b082      	sub	sp, #8
    14b2:	9001      	str	r0, [sp, #4]

  tqp->p_next = (thread_t *)tqp;
    14b4:	9b01      	ldr	r3, [sp, #4]
    14b6:	9a01      	ldr	r2, [sp, #4]
    14b8:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
    14ba:	9b01      	ldr	r3, [sp, #4]
    14bc:	9a01      	ldr	r2, [sp, #4]
    14be:	605a      	str	r2, [r3, #4]
}
    14c0:	b002      	add	sp, #8
    14c2:	4770      	bx	lr
    14c4:	f3af 8000 	nop.w
    14c8:	f3af 8000 	nop.w
    14cc:	f3af 8000 	nop.w

000014d0 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
    14d0:	b508      	push	{r3, lr}

  port_lock();
    14d2:	f7ff ffdd 	bl	1490 <port_lock>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
    14d6:	bd08      	pop	{r3, pc}
    14d8:	f3af 8000 	nop.w
    14dc:	f3af 8000 	nop.w

000014e0 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
    14e0:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
    14e2:	f7ff ffdd 	bl	14a0 <port_unlock>
}
    14e6:	bd08      	pop	{r3, pc}
    14e8:	f3af 8000 	nop.w
    14ec:	f3af 8000 	nop.w

000014f0 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
    14f0:	b500      	push	{lr}
    14f2:	b083      	sub	sp, #12
    14f4:	9001      	str	r0, [sp, #4]

  queue_init(tqp);
    14f6:	9801      	ldr	r0, [sp, #4]
    14f8:	f7ff ffda 	bl	14b0 <queue_init>
}
    14fc:	b003      	add	sp, #12
    14fe:	f85d fb04 	ldr.w	pc, [sp], #4
    1502:	bf00      	nop
    1504:	f3af 8000 	nop.w
    1508:	f3af 8000 	nop.w
    150c:	f3af 8000 	nop.w

00001510 <chIQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {
    1510:	b082      	sub	sp, #8
    1512:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
    1514:	9b01      	ldr	r3, [sp, #4]
    1516:	689b      	ldr	r3, [r3, #8]
    1518:	2b00      	cmp	r3, #0
    151a:	bf14      	ite	ne
    151c:	2300      	movne	r3, #0
    151e:	2301      	moveq	r3, #1
    1520:	b2db      	uxtb	r3, r3
}
    1522:	4618      	mov	r0, r3
    1524:	b002      	add	sp, #8
    1526:	4770      	bx	lr
    1528:	f3af 8000 	nop.w
    152c:	f3af 8000 	nop.w

00001530 <chIQIsFullI>:
 * @retval false        if the queue is not full.
 * @retval true         if the queue is full.
 *
 * @iclass
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {
    1530:	b082      	sub	sp, #8
    1532:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
    1534:	9b01      	ldr	r3, [sp, #4]
    1536:	695a      	ldr	r2, [r3, #20]
    1538:	9b01      	ldr	r3, [sp, #4]
    153a:	699b      	ldr	r3, [r3, #24]
    153c:	429a      	cmp	r2, r3
    153e:	d105      	bne.n	154c <chIQIsFullI+0x1c>
    1540:	9b01      	ldr	r3, [sp, #4]
    1542:	689b      	ldr	r3, [r3, #8]
    1544:	2b00      	cmp	r3, #0
    1546:	d001      	beq.n	154c <chIQIsFullI+0x1c>
    1548:	2301      	movs	r3, #1
    154a:	e000      	b.n	154e <chIQIsFullI+0x1e>
    154c:	2300      	movs	r3, #0
    154e:	f003 0301 	and.w	r3, r3, #1
    1552:	b2db      	uxtb	r3, r3
}
    1554:	4618      	mov	r0, r3
    1556:	b002      	add	sp, #8
    1558:	4770      	bx	lr
    155a:	bf00      	nop
    155c:	f3af 8000 	nop.w

00001560 <chOQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {
    1560:	b082      	sub	sp, #8
    1562:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
    1564:	9b01      	ldr	r3, [sp, #4]
    1566:	695a      	ldr	r2, [r3, #20]
    1568:	9b01      	ldr	r3, [sp, #4]
    156a:	699b      	ldr	r3, [r3, #24]
    156c:	429a      	cmp	r2, r3
    156e:	d105      	bne.n	157c <chOQIsEmptyI+0x1c>
    1570:	9b01      	ldr	r3, [sp, #4]
    1572:	689b      	ldr	r3, [r3, #8]
    1574:	2b00      	cmp	r3, #0
    1576:	d001      	beq.n	157c <chOQIsEmptyI+0x1c>
    1578:	2301      	movs	r3, #1
    157a:	e000      	b.n	157e <chOQIsEmptyI+0x1e>
    157c:	2300      	movs	r3, #0
    157e:	f003 0301 	and.w	r3, r3, #1
    1582:	b2db      	uxtb	r3, r3
}
    1584:	4618      	mov	r0, r3
    1586:	b002      	add	sp, #8
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	f3af 8000 	nop.w

00001590 <chOQIsFullI>:
 * @retval false        if the queue is not full.
 * @retval true         if the queue is full.
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {
    1590:	b082      	sub	sp, #8
    1592:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
    1594:	9b01      	ldr	r3, [sp, #4]
    1596:	689b      	ldr	r3, [r3, #8]
    1598:	2b00      	cmp	r3, #0
    159a:	bf14      	ite	ne
    159c:	2300      	movne	r3, #0
    159e:	2301      	moveq	r3, #1
    15a0:	b2db      	uxtb	r3, r3
}
    15a2:	4618      	mov	r0, r3
    15a4:	b002      	add	sp, #8
    15a6:	4770      	bx	lr
    15a8:	f3af 8000 	nop.w
    15ac:	f3af 8000 	nop.w

000015b0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
    15b0:	b500      	push	{lr}
    15b2:	b085      	sub	sp, #20
    15b4:	9003      	str	r0, [sp, #12]
    15b6:	9102      	str	r1, [sp, #8]
    15b8:	9201      	str	r2, [sp, #4]
    15ba:	9300      	str	r3, [sp, #0]

  chThdQueueObjectInit(&iqp->q_waiting);
    15bc:	9b03      	ldr	r3, [sp, #12]
    15be:	4618      	mov	r0, r3
    15c0:	f7ff ff96 	bl	14f0 <chThdQueueObjectInit>
  iqp->q_counter = 0;
    15c4:	9b03      	ldr	r3, [sp, #12]
    15c6:	2200      	movs	r2, #0
    15c8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
    15ca:	9b03      	ldr	r3, [sp, #12]
    15cc:	9a02      	ldr	r2, [sp, #8]
    15ce:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
    15d0:	9b03      	ldr	r3, [sp, #12]
    15d2:	9a02      	ldr	r2, [sp, #8]
    15d4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
    15d6:	9b03      	ldr	r3, [sp, #12]
    15d8:	9a02      	ldr	r2, [sp, #8]
    15da:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
    15dc:	9a02      	ldr	r2, [sp, #8]
    15de:	9b01      	ldr	r3, [sp, #4]
    15e0:	441a      	add	r2, r3
    15e2:	9b03      	ldr	r3, [sp, #12]
    15e4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
    15e6:	9b03      	ldr	r3, [sp, #12]
    15e8:	9a00      	ldr	r2, [sp, #0]
    15ea:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
    15ec:	9b03      	ldr	r3, [sp, #12]
    15ee:	9a06      	ldr	r2, [sp, #24]
    15f0:	621a      	str	r2, [r3, #32]
}
    15f2:	b005      	add	sp, #20
    15f4:	f85d fb04 	ldr.w	pc, [sp], #4
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <chIQPutI>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
    1600:	b500      	push	{lr}
    1602:	b083      	sub	sp, #12
    1604:	9001      	str	r0, [sp, #4]
    1606:	460b      	mov	r3, r1
    1608:	f88d 3003 	strb.w	r3, [sp, #3]

  chDbgCheckClassI();

  if (chIQIsFullI(iqp)) {
    160c:	9801      	ldr	r0, [sp, #4]
    160e:	f7ff ff8f 	bl	1530 <chIQIsFullI>
    1612:	4603      	mov	r3, r0
    1614:	2b00      	cmp	r3, #0
    1616:	d002      	beq.n	161e <chIQPutI+0x1e>
    return Q_FULL;
    1618:	f06f 0303 	mvn.w	r3, #3
    161c:	e01c      	b.n	1658 <chIQPutI+0x58>
  }

  iqp->q_counter++;
    161e:	9b01      	ldr	r3, [sp, #4]
    1620:	689b      	ldr	r3, [r3, #8]
    1622:	1c5a      	adds	r2, r3, #1
    1624:	9b01      	ldr	r3, [sp, #4]
    1626:	609a      	str	r2, [r3, #8]
  *iqp->q_wrptr++ = b;
    1628:	9b01      	ldr	r3, [sp, #4]
    162a:	695b      	ldr	r3, [r3, #20]
    162c:	1c59      	adds	r1, r3, #1
    162e:	9a01      	ldr	r2, [sp, #4]
    1630:	6151      	str	r1, [r2, #20]
    1632:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1636:	701a      	strb	r2, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
    1638:	9b01      	ldr	r3, [sp, #4]
    163a:	695a      	ldr	r2, [r3, #20]
    163c:	9b01      	ldr	r3, [sp, #4]
    163e:	691b      	ldr	r3, [r3, #16]
    1640:	429a      	cmp	r2, r3
    1642:	d303      	bcc.n	164c <chIQPutI+0x4c>
    iqp->q_wrptr = iqp->q_buffer;
    1644:	9b01      	ldr	r3, [sp, #4]
    1646:	68da      	ldr	r2, [r3, #12]
    1648:	9b01      	ldr	r3, [sp, #4]
    164a:	615a      	str	r2, [r3, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
    164c:	9b01      	ldr	r3, [sp, #4]
    164e:	4618      	mov	r0, r3
    1650:	2100      	movs	r1, #0
    1652:	f7ff fde5 	bl	1220 <chThdDequeueNextI>

  return Q_OK;
    1656:	2300      	movs	r3, #0
}
    1658:	4618      	mov	r0, r3
    165a:	b003      	add	sp, #12
    165c:	f85d fb04 	ldr.w	pc, [sp], #4

00001660 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
    1660:	b500      	push	{lr}
    1662:	b085      	sub	sp, #20
    1664:	9001      	str	r0, [sp, #4]
    1666:	9100      	str	r1, [sp, #0]
  uint8_t b;

  chSysLock();
    1668:	f7ff ff32 	bl	14d0 <chSysLock>
  if (iqp->q_notify != NULL) {
    166c:	9b01      	ldr	r3, [sp, #4]
    166e:	69db      	ldr	r3, [r3, #28]
    1670:	2b00      	cmp	r3, #0
    1672:	d004      	beq.n	167e <chIQGetTimeout+0x1e>
    iqp->q_notify(iqp);
    1674:	9b01      	ldr	r3, [sp, #4]
    1676:	69db      	ldr	r3, [r3, #28]
    1678:	9801      	ldr	r0, [sp, #4]
    167a:	4798      	blx	r3
  }

  while (chIQIsEmptyI(iqp)) {
    167c:	e00d      	b.n	169a <chIQGetTimeout+0x3a>
    167e:	e00c      	b.n	169a <chIQGetTimeout+0x3a>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
    1680:	9b01      	ldr	r3, [sp, #4]
    1682:	4618      	mov	r0, r3
    1684:	9900      	ldr	r1, [sp, #0]
    1686:	f7ff fdab 	bl	11e0 <chThdEnqueueTimeoutS>
    168a:	9003      	str	r0, [sp, #12]
    if (msg < Q_OK) {
    168c:	9b03      	ldr	r3, [sp, #12]
    168e:	2b00      	cmp	r3, #0
    1690:	da03      	bge.n	169a <chIQGetTimeout+0x3a>
      chSysUnlock();
    1692:	f7ff ff25 	bl	14e0 <chSysUnlock>
      return msg;
    1696:	9b03      	ldr	r3, [sp, #12]
    1698:	e020      	b.n	16dc <chIQGetTimeout+0x7c>
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    169a:	9801      	ldr	r0, [sp, #4]
    169c:	f7ff ff38 	bl	1510 <chIQIsEmptyI>
    16a0:	4603      	mov	r3, r0
    16a2:	2b00      	cmp	r3, #0
    16a4:	d1ec      	bne.n	1680 <chIQGetTimeout+0x20>
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
    16a6:	9b01      	ldr	r3, [sp, #4]
    16a8:	689b      	ldr	r3, [r3, #8]
    16aa:	1e5a      	subs	r2, r3, #1
    16ac:	9b01      	ldr	r3, [sp, #4]
    16ae:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
    16b0:	9b01      	ldr	r3, [sp, #4]
    16b2:	699b      	ldr	r3, [r3, #24]
    16b4:	1c59      	adds	r1, r3, #1
    16b6:	9a01      	ldr	r2, [sp, #4]
    16b8:	6191      	str	r1, [r2, #24]
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	f88d 300b 	strb.w	r3, [sp, #11]
  if (iqp->q_rdptr >= iqp->q_top) {
    16c0:	9b01      	ldr	r3, [sp, #4]
    16c2:	699a      	ldr	r2, [r3, #24]
    16c4:	9b01      	ldr	r3, [sp, #4]
    16c6:	691b      	ldr	r3, [r3, #16]
    16c8:	429a      	cmp	r2, r3
    16ca:	d303      	bcc.n	16d4 <chIQGetTimeout+0x74>
    iqp->q_rdptr = iqp->q_buffer;
    16cc:	9b01      	ldr	r3, [sp, #4]
    16ce:	68da      	ldr	r2, [r3, #12]
    16d0:	9b01      	ldr	r3, [sp, #4]
    16d2:	619a      	str	r2, [r3, #24]
  }
  chSysUnlock();
    16d4:	f7ff ff04 	bl	14e0 <chSysUnlock>

  return (msg_t)b;
    16d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    16dc:	4618      	mov	r0, r3
    16de:	b005      	add	sp, #20
    16e0:	f85d fb04 	ldr.w	pc, [sp], #4
    16e4:	f3af 8000 	nop.w
    16e8:	f3af 8000 	nop.w
    16ec:	f3af 8000 	nop.w

000016f0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
    16f0:	b500      	push	{lr}
    16f2:	b087      	sub	sp, #28
    16f4:	9003      	str	r0, [sp, #12]
    16f6:	9102      	str	r1, [sp, #8]
    16f8:	9201      	str	r2, [sp, #4]
    16fa:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
    16fc:	9b03      	ldr	r3, [sp, #12]
    16fe:	69db      	ldr	r3, [r3, #28]
    1700:	9304      	str	r3, [sp, #16]
  size_t r = 0;
    1702:	2300      	movs	r3, #0
    1704:	9305      	str	r3, [sp, #20]

  chDbgCheck(n > 0U);

  chSysLock();
    1706:	f7ff fee3 	bl	14d0 <chSysLock>
  while (true) {
    if (nfy != NULL) {
    170a:	9b04      	ldr	r3, [sp, #16]
    170c:	2b00      	cmp	r3, #0
    170e:	d003      	beq.n	1718 <chIQReadTimeout+0x28>
      nfy(iqp);
    1710:	9b04      	ldr	r3, [sp, #16]
    1712:	9803      	ldr	r0, [sp, #12]
    1714:	4798      	blx	r3
    }

    while (chIQIsEmptyI(iqp)) {
    1716:	e00c      	b.n	1732 <chIQReadTimeout+0x42>
    1718:	e00b      	b.n	1732 <chIQReadTimeout+0x42>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
    171a:	9b03      	ldr	r3, [sp, #12]
    171c:	4618      	mov	r0, r3
    171e:	9900      	ldr	r1, [sp, #0]
    1720:	f7ff fd5e 	bl	11e0 <chThdEnqueueTimeoutS>
    1724:	4603      	mov	r3, r0
    1726:	2b00      	cmp	r3, #0
    1728:	d003      	beq.n	1732 <chIQReadTimeout+0x42>
        chSysUnlock();
    172a:	f7ff fed9 	bl	14e0 <chSysUnlock>
        return r;
    172e:	9b05      	ldr	r3, [sp, #20]
    1730:	e02e      	b.n	1790 <chIQReadTimeout+0xa0>
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
    1732:	9803      	ldr	r0, [sp, #12]
    1734:	f7ff feec 	bl	1510 <chIQIsEmptyI>
    1738:	4603      	mov	r3, r0
    173a:	2b00      	cmp	r3, #0
    173c:	d1ed      	bne.n	171a <chIQReadTimeout+0x2a>
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
    173e:	9b03      	ldr	r3, [sp, #12]
    1740:	689b      	ldr	r3, [r3, #8]
    1742:	1e5a      	subs	r2, r3, #1
    1744:	9b03      	ldr	r3, [sp, #12]
    1746:	609a      	str	r2, [r3, #8]
    *bp++ = *iqp->q_rdptr++;
    1748:	9b02      	ldr	r3, [sp, #8]
    174a:	1c5a      	adds	r2, r3, #1
    174c:	9202      	str	r2, [sp, #8]
    174e:	9a03      	ldr	r2, [sp, #12]
    1750:	6992      	ldr	r2, [r2, #24]
    1752:	1c50      	adds	r0, r2, #1
    1754:	9903      	ldr	r1, [sp, #12]
    1756:	6188      	str	r0, [r1, #24]
    1758:	7812      	ldrb	r2, [r2, #0]
    175a:	701a      	strb	r2, [r3, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
    175c:	9b03      	ldr	r3, [sp, #12]
    175e:	699a      	ldr	r2, [r3, #24]
    1760:	9b03      	ldr	r3, [sp, #12]
    1762:	691b      	ldr	r3, [r3, #16]
    1764:	429a      	cmp	r2, r3
    1766:	d303      	bcc.n	1770 <chIQReadTimeout+0x80>
      iqp->q_rdptr = iqp->q_buffer;
    1768:	9b03      	ldr	r3, [sp, #12]
    176a:	68da      	ldr	r2, [r3, #12]
    176c:	9b03      	ldr	r3, [sp, #12]
    176e:	619a      	str	r2, [r3, #24]
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    1770:	f7ff feb6 	bl	14e0 <chSysUnlock>

    r++;
    1774:	9b05      	ldr	r3, [sp, #20]
    1776:	3301      	adds	r3, #1
    1778:	9305      	str	r3, [sp, #20]
    if (--n == 0U) {
    177a:	9b01      	ldr	r3, [sp, #4]
    177c:	3b01      	subs	r3, #1
    177e:	9301      	str	r3, [sp, #4]
    1780:	9b01      	ldr	r3, [sp, #4]
    1782:	2b00      	cmp	r3, #0
    1784:	d101      	bne.n	178a <chIQReadTimeout+0x9a>
      return r;
    1786:	9b05      	ldr	r3, [sp, #20]
    1788:	e002      	b.n	1790 <chIQReadTimeout+0xa0>
    }

    chSysLock();
    178a:	f7ff fea1 	bl	14d0 <chSysLock>
  }
    178e:	e7bc      	b.n	170a <chIQReadTimeout+0x1a>
}
    1790:	4618      	mov	r0, r3
    1792:	b007      	add	sp, #28
    1794:	f85d fb04 	ldr.w	pc, [sp], #4
    1798:	f3af 8000 	nop.w
    179c:	f3af 8000 	nop.w

000017a0 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
    17a0:	b500      	push	{lr}
    17a2:	b085      	sub	sp, #20
    17a4:	9003      	str	r0, [sp, #12]
    17a6:	9102      	str	r1, [sp, #8]
    17a8:	9201      	str	r2, [sp, #4]
    17aa:	9300      	str	r3, [sp, #0]

  chThdQueueObjectInit(&oqp->q_waiting);
    17ac:	9b03      	ldr	r3, [sp, #12]
    17ae:	4618      	mov	r0, r3
    17b0:	f7ff fe9e 	bl	14f0 <chThdQueueObjectInit>
  oqp->q_counter = size;
    17b4:	9b03      	ldr	r3, [sp, #12]
    17b6:	9a01      	ldr	r2, [sp, #4]
    17b8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
    17ba:	9b03      	ldr	r3, [sp, #12]
    17bc:	9a02      	ldr	r2, [sp, #8]
    17be:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
    17c0:	9b03      	ldr	r3, [sp, #12]
    17c2:	9a02      	ldr	r2, [sp, #8]
    17c4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
    17c6:	9b03      	ldr	r3, [sp, #12]
    17c8:	9a02      	ldr	r2, [sp, #8]
    17ca:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
    17cc:	9a02      	ldr	r2, [sp, #8]
    17ce:	9b01      	ldr	r3, [sp, #4]
    17d0:	441a      	add	r2, r3
    17d2:	9b03      	ldr	r3, [sp, #12]
    17d4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
    17d6:	9b03      	ldr	r3, [sp, #12]
    17d8:	9a00      	ldr	r2, [sp, #0]
    17da:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
    17dc:	9b03      	ldr	r3, [sp, #12]
    17de:	9a06      	ldr	r2, [sp, #24]
    17e0:	621a      	str	r2, [r3, #32]
}
    17e2:	b005      	add	sp, #20
    17e4:	f85d fb04 	ldr.w	pc, [sp], #4
    17e8:	f3af 8000 	nop.w
    17ec:	f3af 8000 	nop.w

000017f0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
    17f0:	b500      	push	{lr}
    17f2:	b087      	sub	sp, #28
    17f4:	9003      	str	r0, [sp, #12]
    17f6:	460b      	mov	r3, r1
    17f8:	9201      	str	r2, [sp, #4]
    17fa:	f88d 300b 	strb.w	r3, [sp, #11]

  chSysLock();
    17fe:	f7ff fe67 	bl	14d0 <chSysLock>
  while (chOQIsFullI(oqp)) {
    1802:	e00c      	b.n	181e <chOQPutTimeout+0x2e>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    1804:	9b03      	ldr	r3, [sp, #12]
    1806:	4618      	mov	r0, r3
    1808:	9901      	ldr	r1, [sp, #4]
    180a:	f7ff fce9 	bl	11e0 <chThdEnqueueTimeoutS>
    180e:	9005      	str	r0, [sp, #20]
    if (msg < Q_OK) {
    1810:	9b05      	ldr	r3, [sp, #20]
    1812:	2b00      	cmp	r3, #0
    1814:	da03      	bge.n	181e <chOQPutTimeout+0x2e>
      chSysUnlock();
    1816:	f7ff fe63 	bl	14e0 <chSysUnlock>
      return msg;
    181a:	9b05      	ldr	r3, [sp, #20]
    181c:	e027      	b.n	186e <chOQPutTimeout+0x7e>
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    181e:	9803      	ldr	r0, [sp, #12]
    1820:	f7ff feb6 	bl	1590 <chOQIsFullI>
    1824:	4603      	mov	r3, r0
    1826:	2b00      	cmp	r3, #0
    1828:	d1ec      	bne.n	1804 <chOQPutTimeout+0x14>
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
    182a:	9b03      	ldr	r3, [sp, #12]
    182c:	689b      	ldr	r3, [r3, #8]
    182e:	1e5a      	subs	r2, r3, #1
    1830:	9b03      	ldr	r3, [sp, #12]
    1832:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
    1834:	9b03      	ldr	r3, [sp, #12]
    1836:	695b      	ldr	r3, [r3, #20]
    1838:	1c59      	adds	r1, r3, #1
    183a:	9a03      	ldr	r2, [sp, #12]
    183c:	6151      	str	r1, [r2, #20]
    183e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    1842:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
    1844:	9b03      	ldr	r3, [sp, #12]
    1846:	695a      	ldr	r2, [r3, #20]
    1848:	9b03      	ldr	r3, [sp, #12]
    184a:	691b      	ldr	r3, [r3, #16]
    184c:	429a      	cmp	r2, r3
    184e:	d303      	bcc.n	1858 <chOQPutTimeout+0x68>
    oqp->q_wrptr = oqp->q_buffer;
    1850:	9b03      	ldr	r3, [sp, #12]
    1852:	68da      	ldr	r2, [r3, #12]
    1854:	9b03      	ldr	r3, [sp, #12]
    1856:	615a      	str	r2, [r3, #20]
  }

  if (oqp->q_notify != NULL) {
    1858:	9b03      	ldr	r3, [sp, #12]
    185a:	69db      	ldr	r3, [r3, #28]
    185c:	2b00      	cmp	r3, #0
    185e:	d003      	beq.n	1868 <chOQPutTimeout+0x78>
    oqp->q_notify(oqp);
    1860:	9b03      	ldr	r3, [sp, #12]
    1862:	69db      	ldr	r3, [r3, #28]
    1864:	9803      	ldr	r0, [sp, #12]
    1866:	4798      	blx	r3
  }
  chSysUnlock();
    1868:	f7ff fe3a 	bl	14e0 <chSysUnlock>

  return Q_OK;
    186c:	2300      	movs	r3, #0
}
    186e:	4618      	mov	r0, r3
    1870:	b007      	add	sp, #28
    1872:	f85d fb04 	ldr.w	pc, [sp], #4
    1876:	bf00      	nop
    1878:	f3af 8000 	nop.w
    187c:	f3af 8000 	nop.w

00001880 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
    1880:	b500      	push	{lr}
    1882:	b085      	sub	sp, #20
    1884:	9001      	str	r0, [sp, #4]
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp)) {
    1886:	9801      	ldr	r0, [sp, #4]
    1888:	f7ff fe6a 	bl	1560 <chOQIsEmptyI>
    188c:	4603      	mov	r3, r0
    188e:	2b00      	cmp	r3, #0
    1890:	d002      	beq.n	1898 <chOQGetI+0x18>
    return Q_EMPTY;
    1892:	f06f 0302 	mvn.w	r3, #2
    1896:	e01d      	b.n	18d4 <chOQGetI+0x54>
  }

  oqp->q_counter++;
    1898:	9b01      	ldr	r3, [sp, #4]
    189a:	689b      	ldr	r3, [r3, #8]
    189c:	1c5a      	adds	r2, r3, #1
    189e:	9b01      	ldr	r3, [sp, #4]
    18a0:	609a      	str	r2, [r3, #8]
  b = *oqp->q_rdptr++;
    18a2:	9b01      	ldr	r3, [sp, #4]
    18a4:	699b      	ldr	r3, [r3, #24]
    18a6:	1c59      	adds	r1, r3, #1
    18a8:	9a01      	ldr	r2, [sp, #4]
    18aa:	6191      	str	r1, [r2, #24]
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	f88d 300f 	strb.w	r3, [sp, #15]
  if (oqp->q_rdptr >= oqp->q_top) {
    18b2:	9b01      	ldr	r3, [sp, #4]
    18b4:	699a      	ldr	r2, [r3, #24]
    18b6:	9b01      	ldr	r3, [sp, #4]
    18b8:	691b      	ldr	r3, [r3, #16]
    18ba:	429a      	cmp	r2, r3
    18bc:	d303      	bcc.n	18c6 <chOQGetI+0x46>
    oqp->q_rdptr = oqp->q_buffer;
    18be:	9b01      	ldr	r3, [sp, #4]
    18c0:	68da      	ldr	r2, [r3, #12]
    18c2:	9b01      	ldr	r3, [sp, #4]
    18c4:	619a      	str	r2, [r3, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
    18c6:	9b01      	ldr	r3, [sp, #4]
    18c8:	4618      	mov	r0, r3
    18ca:	2100      	movs	r1, #0
    18cc:	f7ff fca8 	bl	1220 <chThdDequeueNextI>

  return (msg_t)b;
    18d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    18d4:	4618      	mov	r0, r3
    18d6:	b005      	add	sp, #20
    18d8:	f85d fb04 	ldr.w	pc, [sp], #4
    18dc:	f3af 8000 	nop.w

000018e0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
    18e0:	b500      	push	{lr}
    18e2:	b087      	sub	sp, #28
    18e4:	9003      	str	r0, [sp, #12]
    18e6:	9102      	str	r1, [sp, #8]
    18e8:	9201      	str	r2, [sp, #4]
    18ea:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
    18ec:	9b03      	ldr	r3, [sp, #12]
    18ee:	69db      	ldr	r3, [r3, #28]
    18f0:	9304      	str	r3, [sp, #16]
  size_t w = 0;
    18f2:	2300      	movs	r3, #0
    18f4:	9305      	str	r3, [sp, #20]

  chDbgCheck(n > 0U);

  chSysLock();
    18f6:	f7ff fdeb 	bl	14d0 <chSysLock>
  while (true) {
    while (chOQIsFullI(oqp)) {
    18fa:	e00b      	b.n	1914 <chOQWriteTimeout+0x34>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
    18fc:	9b03      	ldr	r3, [sp, #12]
    18fe:	4618      	mov	r0, r3
    1900:	9900      	ldr	r1, [sp, #0]
    1902:	f7ff fc6d 	bl	11e0 <chThdEnqueueTimeoutS>
    1906:	4603      	mov	r3, r0
    1908:	2b00      	cmp	r3, #0
    190a:	d003      	beq.n	1914 <chOQWriteTimeout+0x34>
        chSysUnlock();
    190c:	f7ff fde8 	bl	14e0 <chSysUnlock>
        return w;
    1910:	9b05      	ldr	r3, [sp, #20]
    1912:	e035      	b.n	1980 <chOQWriteTimeout+0xa0>

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
    1914:	9803      	ldr	r0, [sp, #12]
    1916:	f7ff fe3b 	bl	1590 <chOQIsFullI>
    191a:	4603      	mov	r3, r0
    191c:	2b00      	cmp	r3, #0
    191e:	d1ed      	bne.n	18fc <chOQWriteTimeout+0x1c>
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
    1920:	9b03      	ldr	r3, [sp, #12]
    1922:	689b      	ldr	r3, [r3, #8]
    1924:	1e5a      	subs	r2, r3, #1
    1926:	9b03      	ldr	r3, [sp, #12]
    1928:	609a      	str	r2, [r3, #8]
    *oqp->q_wrptr++ = *bp++;
    192a:	9b03      	ldr	r3, [sp, #12]
    192c:	695b      	ldr	r3, [r3, #20]
    192e:	1c59      	adds	r1, r3, #1
    1930:	9a03      	ldr	r2, [sp, #12]
    1932:	6151      	str	r1, [r2, #20]
    1934:	9a02      	ldr	r2, [sp, #8]
    1936:	1c51      	adds	r1, r2, #1
    1938:	9102      	str	r1, [sp, #8]
    193a:	7812      	ldrb	r2, [r2, #0]
    193c:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
    193e:	9b03      	ldr	r3, [sp, #12]
    1940:	695a      	ldr	r2, [r3, #20]
    1942:	9b03      	ldr	r3, [sp, #12]
    1944:	691b      	ldr	r3, [r3, #16]
    1946:	429a      	cmp	r2, r3
    1948:	d303      	bcc.n	1952 <chOQWriteTimeout+0x72>
      oqp->q_wrptr = oqp->q_buffer;
    194a:	9b03      	ldr	r3, [sp, #12]
    194c:	68da      	ldr	r2, [r3, #12]
    194e:	9b03      	ldr	r3, [sp, #12]
    1950:	615a      	str	r2, [r3, #20]
    }

    if (nfy != NULL) {
    1952:	9b04      	ldr	r3, [sp, #16]
    1954:	2b00      	cmp	r3, #0
    1956:	d002      	beq.n	195e <chOQWriteTimeout+0x7e>
      nfy(oqp);
    1958:	9b04      	ldr	r3, [sp, #16]
    195a:	9803      	ldr	r0, [sp, #12]
    195c:	4798      	blx	r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    195e:	f7ff fdbf 	bl	14e0 <chSysUnlock>

    w++;
    1962:	9b05      	ldr	r3, [sp, #20]
    1964:	3301      	adds	r3, #1
    1966:	9305      	str	r3, [sp, #20]
    if (--n == 0U) {
    1968:	9b01      	ldr	r3, [sp, #4]
    196a:	3b01      	subs	r3, #1
    196c:	9301      	str	r3, [sp, #4]
    196e:	9b01      	ldr	r3, [sp, #4]
    1970:	2b00      	cmp	r3, #0
    1972:	d101      	bne.n	1978 <chOQWriteTimeout+0x98>
      return w;
    1974:	9b05      	ldr	r3, [sp, #20]
    1976:	e003      	b.n	1980 <chOQWriteTimeout+0xa0>
    }
    chSysLock();
    1978:	f7ff fdaa 	bl	14d0 <chSysLock>
  }
    197c:	bf00      	nop

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
    197e:	e7c9      	b.n	1914 <chOQWriteTimeout+0x34>
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
    1980:	4618      	mov	r0, r3
    1982:	b007      	add	sp, #28
    1984:	f85d fb04 	ldr.w	pc, [sp], #4
    1988:	f3af 8000 	nop.w
    198c:	f3af 8000 	nop.w

00001990 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
    1990:	b082      	sub	sp, #8
    1992:	2320      	movs	r3, #32
    1994:	9301      	str	r3, [sp, #4]
    1996:	9b01      	ldr	r3, [sp, #4]
    1998:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    199c:	b002      	add	sp, #8
    199e:	4770      	bx	lr

000019a0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
    19a0:	b082      	sub	sp, #8
    19a2:	2300      	movs	r3, #0
    19a4:	9301      	str	r3, [sp, #4]
    19a6:	9b01      	ldr	r3, [sp, #4]
    19a8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    19ac:	b002      	add	sp, #8
    19ae:	4770      	bx	lr

000019b0 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
    19b0:	b508      	push	{r3, lr}

  port_lock();
    19b2:	f7ff ffed 	bl	1990 <port_lock>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
    19b6:	bd08      	pop	{r3, pc}
    19b8:	f3af 8000 	nop.w
    19bc:	f3af 8000 	nop.w

000019c0 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
    19c0:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
    19c2:	f7ff ffed 	bl	19a0 <port_unlock>
}
    19c6:	bd08      	pop	{r3, pc}
    19c8:	f3af 8000 	nop.w
    19cc:	f3af 8000 	nop.w

000019d0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
    19d0:	4b06      	ldr	r3, [pc, #24]	; (19ec <_core_init+0x1c>)
    19d2:	3307      	adds	r3, #7
    19d4:	f023 0307 	bic.w	r3, r3, #7
    19d8:	461a      	mov	r2, r3
    19da:	4b05      	ldr	r3, [pc, #20]	; (19f0 <_core_init+0x20>)
    19dc:	601a      	str	r2, [r3, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
    19de:	4b05      	ldr	r3, [pc, #20]	; (19f4 <_core_init+0x24>)
    19e0:	f023 0307 	bic.w	r3, r3, #7
    19e4:	461a      	mov	r2, r3
    19e6:	4b04      	ldr	r3, [pc, #16]	; (19f8 <_core_init+0x28>)
    19e8:	601a      	str	r2, [r3, #0]

  nextmem = (uint8_t *)&buffer[0];
  endmem = (uint8_t *)&buffer[MEM_ALIGN_NEXT(CH_CFG_MEMCORE_SIZE) /
                              MEM_ALIGN_SIZE];
#endif
}
    19ea:	4770      	bx	lr
    19ec:	20000e20 	.word	0x20000e20
    19f0:	20000950 	.word	0x20000950
    19f4:	20020000 	.word	0x20020000
    19f8:	20000954 	.word	0x20000954
    19fc:	f3af 8000 	nop.w

00001a00 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
    1a00:	b500      	push	{lr}
    1a02:	b085      	sub	sp, #20
    1a04:	9001      	str	r0, [sp, #4]
  void *p;

  chSysLock();
    1a06:	f7ff ffd3 	bl	19b0 <chSysLock>
  p = chCoreAllocI(size);
    1a0a:	9801      	ldr	r0, [sp, #4]
    1a0c:	f000 f808 	bl	1a20 <chCoreAllocI>
    1a10:	9003      	str	r0, [sp, #12]
  chSysUnlock();
    1a12:	f7ff ffd5 	bl	19c0 <chSysUnlock>

  return p;
    1a16:	9b03      	ldr	r3, [sp, #12]
}
    1a18:	4618      	mov	r0, r3
    1a1a:	b005      	add	sp, #20
    1a1c:	f85d fb04 	ldr.w	pc, [sp], #4

00001a20 <chCoreAllocI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocI(size_t size) {
    1a20:	b084      	sub	sp, #16
    1a22:	9001      	str	r0, [sp, #4]
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
    1a24:	9b01      	ldr	r3, [sp, #4]
    1a26:	3307      	adds	r3, #7
    1a28:	f023 0307 	bic.w	r3, r3, #7
    1a2c:	9301      	str	r3, [sp, #4]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
    1a2e:	4b0c      	ldr	r3, [pc, #48]	; (1a60 <chCoreAllocI+0x40>)
    1a30:	681b      	ldr	r3, [r3, #0]
    1a32:	461a      	mov	r2, r3
    1a34:	4b0b      	ldr	r3, [pc, #44]	; (1a64 <chCoreAllocI+0x44>)
    1a36:	681b      	ldr	r3, [r3, #0]
    1a38:	1ad3      	subs	r3, r2, r3
    1a3a:	461a      	mov	r2, r3
    1a3c:	9b01      	ldr	r3, [sp, #4]
    1a3e:	429a      	cmp	r2, r3
    1a40:	d201      	bcs.n	1a46 <chCoreAllocI+0x26>
  /*lint -restore*/
    return NULL;
    1a42:	2300      	movs	r3, #0
    1a44:	e009      	b.n	1a5a <chCoreAllocI+0x3a>
  }
  p = nextmem;
    1a46:	4b07      	ldr	r3, [pc, #28]	; (1a64 <chCoreAllocI+0x44>)
    1a48:	681b      	ldr	r3, [r3, #0]
    1a4a:	9303      	str	r3, [sp, #12]
  nextmem += size;
    1a4c:	4b05      	ldr	r3, [pc, #20]	; (1a64 <chCoreAllocI+0x44>)
    1a4e:	681a      	ldr	r2, [r3, #0]
    1a50:	9b01      	ldr	r3, [sp, #4]
    1a52:	441a      	add	r2, r3
    1a54:	4b03      	ldr	r3, [pc, #12]	; (1a64 <chCoreAllocI+0x44>)
    1a56:	601a      	str	r2, [r3, #0]

  return p;
    1a58:	9b03      	ldr	r3, [sp, #12]
}
    1a5a:	4618      	mov	r0, r3
    1a5c:	b004      	add	sp, #16
    1a5e:	4770      	bx	lr
    1a60:	20000954 	.word	0x20000954
    1a64:	20000950 	.word	0x20000950
    1a68:	f3af 8000 	nop.w
    1a6c:	f3af 8000 	nop.w

00001a70 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
    1a70:	b508      	push	{r3, lr}

  default_heap.h_provider = chCoreAlloc;
    1a72:	4b06      	ldr	r3, [pc, #24]	; (1a8c <_heap_init+0x1c>)
    1a74:	4a06      	ldr	r2, [pc, #24]	; (1a90 <_heap_init+0x20>)
    1a76:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
    1a78:	4b04      	ldr	r3, [pc, #16]	; (1a8c <_heap_init+0x1c>)
    1a7a:	2200      	movs	r2, #0
    1a7c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
    1a7e:	4b03      	ldr	r3, [pc, #12]	; (1a8c <_heap_init+0x1c>)
    1a80:	2200      	movs	r2, #0
    1a82:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
    1a84:	4803      	ldr	r0, [pc, #12]	; (1a94 <_heap_init+0x24>)
    1a86:	f7ff fc93 	bl	13b0 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.h_sem, (cnt_t)1);
#endif
}
    1a8a:	bd08      	pop	{r3, pc}
    1a8c:	20000958 	.word	0x20000958
    1a90:	00001a01 	.word	0x00001a01
    1a94:	20000968 	.word	0x20000968
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
    1aa0:	b082      	sub	sp, #8
    1aa2:	2320      	movs	r3, #32
    1aa4:	9301      	str	r3, [sp, #4]
    1aa6:	9b01      	ldr	r3, [sp, #4]
    1aa8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    1aac:	b002      	add	sp, #8
    1aae:	4770      	bx	lr

00001ab0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
    1ab0:	b082      	sub	sp, #8
    1ab2:	2300      	movs	r3, #0
    1ab4:	9301      	str	r3, [sp, #4]
    1ab6:	9b01      	ldr	r3, [sp, #4]
    1ab8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    1abc:	b002      	add	sp, #8
    1abe:	4770      	bx	lr

00001ac0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
    1ac0:	b508      	push	{r3, lr}

  port_lock();
    1ac2:	f7ff ffed 	bl	1aa0 <port_lock>
}
    1ac6:	bd08      	pop	{r3, pc}
    1ac8:	f3af 8000 	nop.w
    1acc:	f3af 8000 	nop.w

00001ad0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
    1ad0:	b508      	push	{r3, lr}

  port_unlock();
    1ad2:	f7ff ffed 	bl	1ab0 <port_unlock>
}
    1ad6:	bd08      	pop	{r3, pc}
    1ad8:	f3af 8000 	nop.w
    1adc:	f3af 8000 	nop.w

00001ae0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
    1ae0:	b510      	push	{r4, lr}
    1ae2:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    1ae4:	f3ef 8309 	mrs	r3, PSP
    1ae8:	461c      	mov	r4, r3
  return(result);
    1aea:	4623      	mov	r3, r4
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
    1aec:	9301      	str	r3, [sp, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
    1aee:	9b01      	ldr	r3, [sp, #4]
    1af0:	3320      	adds	r3, #32
    1af2:	9301      	str	r3, [sp, #4]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
    1af4:	9b01      	ldr	r3, [sp, #4]
    1af6:	9300      	str	r3, [sp, #0]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
    1af8:	9b00      	ldr	r3, [sp, #0]
    1afa:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
    1afe:	f7ff ffe7 	bl	1ad0 <port_unlock_from_isr>
}
    1b02:	b002      	add	sp, #8
    1b04:	bd10      	pop	{r4, pc}
    1b06:	bf00      	nop
    1b08:	f3af 8000 	nop.w
    1b0c:	f3af 8000 	nop.w

00001b10 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
    1b10:	b510      	push	{r4, lr}
    1b12:	b082      	sub	sp, #8

  port_lock_from_isr();
    1b14:	f7ff ffd4 	bl	1ac0 <port_lock_from_isr>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
    1b18:	4b13      	ldr	r3, [pc, #76]	; (1b68 <_port_irq_epilogue+0x58>)
    1b1a:	685b      	ldr	r3, [r3, #4]
    1b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    1b20:	2b00      	cmp	r3, #0
    1b22:	d01d      	beq.n	1b60 <_port_irq_epilogue+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    1b24:	f3ef 8309 	mrs	r3, PSP
    1b28:	461c      	mov	r4, r3
  return(result);
    1b2a:	4623      	mov	r3, r4
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
    1b2c:	9301      	str	r3, [sp, #4]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
    1b2e:	9b01      	ldr	r3, [sp, #4]
    1b30:	3b20      	subs	r3, #32
    1b32:	9301      	str	r3, [sp, #4]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
    1b34:	9b01      	ldr	r3, [sp, #4]
    1b36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1b3a:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
    1b3c:	9b01      	ldr	r3, [sp, #4]
    1b3e:	9300      	str	r3, [sp, #0]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
    1b40:	9b00      	ldr	r3, [sp, #0]
    1b42:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
    1b46:	f7ff f93b 	bl	dc0 <chSchIsPreemptionRequired>
    1b4a:	4603      	mov	r3, r0
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d003      	beq.n	1b58 <_port_irq_epilogue+0x48>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	4a06      	ldr	r2, [pc, #24]	; (1b6c <_port_irq_epilogue+0x5c>)
    1b54:	619a      	str	r2, [r3, #24]
      ctxp->pc = (regarm_t)_port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
    1b56:	e005      	b.n	1b64 <_port_irq_epilogue+0x54>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
    1b58:	9b01      	ldr	r3, [sp, #4]
    1b5a:	4a05      	ldr	r2, [pc, #20]	; (1b70 <_port_irq_epilogue+0x60>)
    1b5c:	619a      	str	r2, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
    1b5e:	e001      	b.n	1b64 <_port_irq_epilogue+0x54>
  }
  port_unlock_from_isr();
    1b60:	f7ff ffb6 	bl	1ad0 <port_unlock_from_isr>
}
    1b64:	b002      	add	sp, #8
    1b66:	bd10      	pop	{r4, pc}
    1b68:	e000ed00 	.word	0xe000ed00
    1b6c:	000002a1 	.word	0x000002a1
    1b70:	000002a4 	.word	0x000002a4
    1b74:	f3af 8000 	nop.w
    1b78:	f3af 8000 	nop.w
    1b7c:	f3af 8000 	nop.w

00001b80 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
    1b80:	4770      	bx	lr
    1b82:	bf00      	nop
    1b84:	f3af 8000 	nop.w
    1b88:	f3af 8000 	nop.w
    1b8c:	f3af 8000 	nop.w

00001b90 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
    1b90:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
    1b92:	f7ff fff5 	bl	1b80 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
    1b96:	f000 ff4b 	bl	2a30 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
    1b9a:	4806      	ldr	r0, [pc, #24]	; (1bb4 <halInit+0x24>)
    1b9c:	f001 f8c8 	bl	2d30 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
    1ba0:	f000 f976 	bl	1e90 <sdInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
    1ba4:	f000 fc3c 	bl	2420 <usbInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
    1ba8:	f002 f91a 	bl	3de0 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
    1bac:	f000 f828 	bl	1c00 <stInit>
#endif
}
    1bb0:	bd08      	pop	{r3, pc}
    1bb2:	bf00      	nop
    1bb4:	00003ff0 	.word	0x00003ff0
    1bb8:	f3af 8000 	nop.w
    1bbc:	f3af 8000 	nop.w

00001bc0 <st_lld_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {
    1bc0:	b082      	sub	sp, #8
    1bc2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
    1bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bc8:	9a01      	ldr	r2, [sp, #4]
    1bca:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
    1bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bd0:	2200      	movs	r2, #0
    1bd2:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
    1bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bd8:	2202      	movs	r2, #2
    1bda:	60da      	str	r2, [r3, #12]
}
    1bdc:	b002      	add	sp, #8
    1bde:	4770      	bx	lr

00001be0 <st_lld_stop_alarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
    1be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1be4:	2200      	movs	r2, #0
    1be6:	60da      	str	r2, [r3, #12]
}
    1be8:	4770      	bx	lr
    1bea:	bf00      	nop
    1bec:	f3af 8000 	nop.w

00001bf0 <st_lld_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {
    1bf0:	b082      	sub	sp, #8
    1bf2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
    1bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bf8:	9a01      	ldr	r2, [sp, #4]
    1bfa:	635a      	str	r2, [r3, #52]	; 0x34
}
    1bfc:	b002      	add	sp, #8
    1bfe:	4770      	bx	lr

00001c00 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
    1c00:	b508      	push	{r3, lr}

  st_lld_init();
    1c02:	f001 f835 	bl	2c70 <st_lld_init>
}
    1c06:	bd08      	pop	{r3, pc}
    1c08:	f3af 8000 	nop.w
    1c0c:	f3af 8000 	nop.w

00001c10 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
    1c10:	b500      	push	{lr}
    1c12:	b083      	sub	sp, #12
    1c14:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
    1c16:	9801      	ldr	r0, [sp, #4]
    1c18:	f7ff ffd2 	bl	1bc0 <st_lld_start_alarm>
}
    1c1c:	b003      	add	sp, #12
    1c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c22:	bf00      	nop
    1c24:	f3af 8000 	nop.w
    1c28:	f3af 8000 	nop.w
    1c2c:	f3af 8000 	nop.w

00001c30 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
    1c30:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
    1c32:	f7ff ffd5 	bl	1be0 <st_lld_stop_alarm>
}
    1c36:	bd08      	pop	{r3, pc}
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
    1c40:	b500      	push	{lr}
    1c42:	b083      	sub	sp, #12
    1c44:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
    1c46:	9801      	ldr	r0, [sp, #4]
    1c48:	f7ff ffd2 	bl	1bf0 <st_lld_set_alarm>
}
    1c4c:	b003      	add	sp, #12
    1c4e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c52:	bf00      	nop
    1c54:	f3af 8000 	nop.w
    1c58:	f3af 8000 	nop.w
    1c5c:	f3af 8000 	nop.w

00001c60 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
    1c60:	b082      	sub	sp, #8
    1c62:	2320      	movs	r3, #32
    1c64:	9301      	str	r3, [sp, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
    1c66:	9b01      	ldr	r3, [sp, #4]
    1c68:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    1c6c:	b002      	add	sp, #8
    1c6e:	4770      	bx	lr

00001c70 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
    1c70:	b082      	sub	sp, #8
    1c72:	2300      	movs	r3, #0
    1c74:	9301      	str	r3, [sp, #4]
    1c76:	9b01      	ldr	r3, [sp, #4]
    1c78:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    1c7c:	b002      	add	sp, #8
    1c7e:	4770      	bx	lr

00001c80 <chSysLock>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void)  {
    1c80:	b508      	push	{r3, lr}

  port_lock();
    1c82:	f7ff ffed 	bl	1c60 <port_lock>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
    1c86:	bd08      	pop	{r3, pc}
    1c88:	f3af 8000 	nop.w
    1c8c:	f3af 8000 	nop.w

00001c90 <chSysUnlock>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
    1c90:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority violation, missing reschedule");

  port_unlock();
    1c92:	f7ff ffed 	bl	1c70 <port_unlock>
}
    1c96:	bd08      	pop	{r3, pc}
    1c98:	f3af 8000 	nop.w
    1c9c:	f3af 8000 	nop.w

00001ca0 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
    1ca0:	b082      	sub	sp, #8
    1ca2:	9001      	str	r0, [sp, #4]

  esp->es_next = (event_listener_t *)esp;
    1ca4:	9b01      	ldr	r3, [sp, #4]
    1ca6:	9a01      	ldr	r2, [sp, #4]
    1ca8:	601a      	str	r2, [r3, #0]
}
    1caa:	b002      	add	sp, #8
    1cac:	4770      	bx	lr
    1cae:	bf00      	nop

00001cb0 <chIQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {
    1cb0:	b082      	sub	sp, #8
    1cb2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
    1cb4:	9b01      	ldr	r3, [sp, #4]
    1cb6:	689b      	ldr	r3, [r3, #8]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	bf14      	ite	ne
    1cbc:	2300      	movne	r3, #0
    1cbe:	2301      	moveq	r3, #1
    1cc0:	b2db      	uxtb	r3, r3
}
    1cc2:	4618      	mov	r0, r3
    1cc4:	b002      	add	sp, #8
    1cc6:	4770      	bx	lr
    1cc8:	f3af 8000 	nop.w
    1ccc:	f3af 8000 	nop.w

00001cd0 <osalSysLock>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
    1cd0:	b508      	push	{r3, lr}

  chSysLock();
    1cd2:	f7ff ffd5 	bl	1c80 <chSysLock>
}
    1cd6:	bd08      	pop	{r3, pc}
    1cd8:	f3af 8000 	nop.w
    1cdc:	f3af 8000 	nop.w

00001ce0 <osalSysUnlock>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
    1ce0:	b508      	push	{r3, lr}

  chSysUnlock();
    1ce2:	f7ff ffd5 	bl	1c90 <chSysUnlock>
}
    1ce6:	bd08      	pop	{r3, pc}
    1ce8:	f3af 8000 	nop.w
    1cec:	f3af 8000 	nop.w

00001cf0 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event flags object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
    1cf0:	b500      	push	{lr}
    1cf2:	b083      	sub	sp, #12
    1cf4:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
    1cf6:	9801      	ldr	r0, [sp, #4]
    1cf8:	f7ff ffd2 	bl	1ca0 <chEvtObjectInit>
}
    1cfc:	b003      	add	sp, #12
    1cfe:	f85d fb04 	ldr.w	pc, [sp], #4
    1d02:	bf00      	nop
    1d04:	f3af 8000 	nop.w
    1d08:	f3af 8000 	nop.w
    1d0c:	f3af 8000 	nop.w

00001d10 <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
    1d10:	b500      	push	{lr}
    1d12:	b083      	sub	sp, #12
    1d14:	9001      	str	r0, [sp, #4]
    1d16:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
    1d18:	9801      	ldr	r0, [sp, #4]
    1d1a:	9900      	ldr	r1, [sp, #0]
    1d1c:	f7ff fb58 	bl	13d0 <chEvtBroadcastFlagsI>
}
    1d20:	b003      	add	sp, #12
    1d22:	f85d fb04 	ldr.w	pc, [sp], #4
    1d26:	bf00      	nop
    1d28:	f3af 8000 	nop.w
    1d2c:	f3af 8000 	nop.w

00001d30 <write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {
    1d30:	b500      	push	{lr}
    1d32:	b085      	sub	sp, #20
    1d34:	9003      	str	r0, [sp, #12]
    1d36:	9102      	str	r1, [sp, #8]
    1d38:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
    1d3a:	9b03      	ldr	r3, [sp, #12]
    1d3c:	3330      	adds	r3, #48	; 0x30
    1d3e:	4618      	mov	r0, r3
    1d40:	9902      	ldr	r1, [sp, #8]
    1d42:	9a01      	ldr	r2, [sp, #4]
    1d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1d48:	f7ff fdca 	bl	18e0 <chOQWriteTimeout>
    1d4c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
    1d4e:	4618      	mov	r0, r3
    1d50:	b005      	add	sp, #20
    1d52:	f85d fb04 	ldr.w	pc, [sp], #4
    1d56:	bf00      	nop
    1d58:	f3af 8000 	nop.w
    1d5c:	f3af 8000 	nop.w

00001d60 <read>:

static size_t read(void *ip, uint8_t *bp, size_t n) {
    1d60:	b500      	push	{lr}
    1d62:	b085      	sub	sp, #20
    1d64:	9003      	str	r0, [sp, #12]
    1d66:	9102      	str	r1, [sp, #8]
    1d68:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
    1d6a:	9b03      	ldr	r3, [sp, #12]
    1d6c:	330c      	adds	r3, #12
    1d6e:	4618      	mov	r0, r3
    1d70:	9902      	ldr	r1, [sp, #8]
    1d72:	9a01      	ldr	r2, [sp, #4]
    1d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1d78:	f7ff fcba 	bl	16f0 <chIQReadTimeout>
    1d7c:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
    1d7e:	4618      	mov	r0, r3
    1d80:	b005      	add	sp, #20
    1d82:	f85d fb04 	ldr.w	pc, [sp], #4
    1d86:	bf00      	nop
    1d88:	f3af 8000 	nop.w
    1d8c:	f3af 8000 	nop.w

00001d90 <put>:

static msg_t put(void *ip, uint8_t b) {
    1d90:	b500      	push	{lr}
    1d92:	b083      	sub	sp, #12
    1d94:	9001      	str	r0, [sp, #4]
    1d96:	460b      	mov	r3, r1
    1d98:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
    1d9c:	9b01      	ldr	r3, [sp, #4]
    1d9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
    1da2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1da6:	4610      	mov	r0, r2
    1da8:	4619      	mov	r1, r3
    1daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1dae:	f7ff fd1f 	bl	17f0 <chOQPutTimeout>
    1db2:	4603      	mov	r3, r0
}
    1db4:	4618      	mov	r0, r3
    1db6:	b003      	add	sp, #12
    1db8:	f85d fb04 	ldr.w	pc, [sp], #4
    1dbc:	f3af 8000 	nop.w

00001dc0 <get>:

static msg_t get(void *ip) {
    1dc0:	b500      	push	{lr}
    1dc2:	b083      	sub	sp, #12
    1dc4:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
    1dc6:	9b01      	ldr	r3, [sp, #4]
    1dc8:	330c      	adds	r3, #12
    1dca:	4618      	mov	r0, r3
    1dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1dd0:	f7ff fc46 	bl	1660 <chIQGetTimeout>
    1dd4:	4603      	mov	r3, r0
}
    1dd6:	4618      	mov	r0, r3
    1dd8:	b003      	add	sp, #12
    1dda:	f85d fb04 	ldr.w	pc, [sp], #4
    1dde:	bf00      	nop

00001de0 <putt>:

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
    1de0:	b500      	push	{lr}
    1de2:	b085      	sub	sp, #20
    1de4:	9003      	str	r0, [sp, #12]
    1de6:	460b      	mov	r3, r1
    1de8:	9201      	str	r2, [sp, #4]
    1dea:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
    1dee:	9b03      	ldr	r3, [sp, #12]
    1df0:	f103 0230 	add.w	r2, r3, #48	; 0x30
    1df4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1df8:	4610      	mov	r0, r2
    1dfa:	4619      	mov	r1, r3
    1dfc:	9a01      	ldr	r2, [sp, #4]
    1dfe:	f7ff fcf7 	bl	17f0 <chOQPutTimeout>
    1e02:	4603      	mov	r3, r0
}
    1e04:	4618      	mov	r0, r3
    1e06:	b005      	add	sp, #20
    1e08:	f85d fb04 	ldr.w	pc, [sp], #4
    1e0c:	f3af 8000 	nop.w

00001e10 <gett>:

static msg_t gett(void *ip, systime_t timeout) {
    1e10:	b500      	push	{lr}
    1e12:	b083      	sub	sp, #12
    1e14:	9001      	str	r0, [sp, #4]
    1e16:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
    1e18:	9b01      	ldr	r3, [sp, #4]
    1e1a:	330c      	adds	r3, #12
    1e1c:	4618      	mov	r0, r3
    1e1e:	9900      	ldr	r1, [sp, #0]
    1e20:	f7ff fc1e 	bl	1660 <chIQGetTimeout>
    1e24:	4603      	mov	r3, r0
}
    1e26:	4618      	mov	r0, r3
    1e28:	b003      	add	sp, #12
    1e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    1e2e:	bf00      	nop

00001e30 <writet>:

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
    1e30:	b500      	push	{lr}
    1e32:	b085      	sub	sp, #20
    1e34:	9003      	str	r0, [sp, #12]
    1e36:	9102      	str	r1, [sp, #8]
    1e38:	9201      	str	r2, [sp, #4]
    1e3a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
    1e3c:	9b03      	ldr	r3, [sp, #12]
    1e3e:	3330      	adds	r3, #48	; 0x30
    1e40:	4618      	mov	r0, r3
    1e42:	9902      	ldr	r1, [sp, #8]
    1e44:	9a01      	ldr	r2, [sp, #4]
    1e46:	9b00      	ldr	r3, [sp, #0]
    1e48:	f7ff fd4a 	bl	18e0 <chOQWriteTimeout>
    1e4c:	4603      	mov	r3, r0
}
    1e4e:	4618      	mov	r0, r3
    1e50:	b005      	add	sp, #20
    1e52:	f85d fb04 	ldr.w	pc, [sp], #4
    1e56:	bf00      	nop
    1e58:	f3af 8000 	nop.w
    1e5c:	f3af 8000 	nop.w

00001e60 <readt>:

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
    1e60:	b500      	push	{lr}
    1e62:	b085      	sub	sp, #20
    1e64:	9003      	str	r0, [sp, #12]
    1e66:	9102      	str	r1, [sp, #8]
    1e68:	9201      	str	r2, [sp, #4]
    1e6a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
    1e6c:	9b03      	ldr	r3, [sp, #12]
    1e6e:	330c      	adds	r3, #12
    1e70:	4618      	mov	r0, r3
    1e72:	9902      	ldr	r1, [sp, #8]
    1e74:	9a01      	ldr	r2, [sp, #4]
    1e76:	9b00      	ldr	r3, [sp, #0]
    1e78:	f7ff fc3a 	bl	16f0 <chIQReadTimeout>
    1e7c:	4603      	mov	r3, r0
}
    1e7e:	4618      	mov	r0, r3
    1e80:	b005      	add	sp, #20
    1e82:	f85d fb04 	ldr.w	pc, [sp], #4
    1e86:	bf00      	nop
    1e88:	f3af 8000 	nop.w
    1e8c:	f3af 8000 	nop.w

00001e90 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
    1e90:	b508      	push	{r3, lr}

  sd_lld_init();
    1e92:	f001 ff5d 	bl	3d50 <sd_lld_init>
}
    1e96:	bd08      	pop	{r3, pc}
    1e98:	f3af 8000 	nop.w
    1e9c:	f3af 8000 	nop.w

00001ea0 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
    1ea0:	b500      	push	{lr}
    1ea2:	b087      	sub	sp, #28
    1ea4:	9005      	str	r0, [sp, #20]
    1ea6:	9104      	str	r1, [sp, #16]
    1ea8:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
    1eaa:	9b05      	ldr	r3, [sp, #20]
    1eac:	4a13      	ldr	r2, [pc, #76]	; (1efc <sdObjectInit+0x5c>)
    1eae:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
    1eb0:	9b05      	ldr	r3, [sp, #20]
    1eb2:	3304      	adds	r3, #4
    1eb4:	4618      	mov	r0, r3
    1eb6:	f7ff ff1b 	bl	1cf0 <osalEventObjectInit>
  sdp->state = SD_STOP;
    1eba:	9b05      	ldr	r3, [sp, #20]
    1ebc:	2201      	movs	r2, #1
    1ebe:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
    1ec0:	9b05      	ldr	r3, [sp, #20]
    1ec2:	f103 020c 	add.w	r2, r3, #12
    1ec6:	9b05      	ldr	r3, [sp, #20]
    1ec8:	3354      	adds	r3, #84	; 0x54
    1eca:	9905      	ldr	r1, [sp, #20]
    1ecc:	9100      	str	r1, [sp, #0]
    1ece:	4610      	mov	r0, r2
    1ed0:	4619      	mov	r1, r3
    1ed2:	2240      	movs	r2, #64	; 0x40
    1ed4:	9b04      	ldr	r3, [sp, #16]
    1ed6:	f7ff fb6b 	bl	15b0 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
    1eda:	9b05      	ldr	r3, [sp, #20]
    1edc:	f103 0230 	add.w	r2, r3, #48	; 0x30
    1ee0:	9b05      	ldr	r3, [sp, #20]
    1ee2:	3394      	adds	r3, #148	; 0x94
    1ee4:	9905      	ldr	r1, [sp, #20]
    1ee6:	9100      	str	r1, [sp, #0]
    1ee8:	4610      	mov	r0, r2
    1eea:	4619      	mov	r1, r3
    1eec:	2240      	movs	r2, #64	; 0x40
    1eee:	9b03      	ldr	r3, [sp, #12]
    1ef0:	f7ff fc56 	bl	17a0 <chOQObjectInit>
}
    1ef4:	b007      	add	sp, #28
    1ef6:	f85d fb04 	ldr.w	pc, [sp], #4
    1efa:	bf00      	nop
    1efc:	00003f50 	.word	0x00003f50

00001f00 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
    1f00:	b500      	push	{lr}
    1f02:	b083      	sub	sp, #12
    1f04:	9001      	str	r0, [sp, #4]
    1f06:	9100      	str	r1, [sp, #0]

  osalDbgCheck(sdp != NULL);

  osalSysLock();
    1f08:	f7ff fee2 	bl	1cd0 <osalSysLock>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
    1f0c:	9801      	ldr	r0, [sp, #4]
    1f0e:	9900      	ldr	r1, [sp, #0]
    1f10:	f001 ff36 	bl	3d80 <sd_lld_start>
  sdp->state = SD_READY;
    1f14:	9b01      	ldr	r3, [sp, #4]
    1f16:	2202      	movs	r2, #2
    1f18:	721a      	strb	r2, [r3, #8]
  osalSysUnlock();
    1f1a:	f7ff fee1 	bl	1ce0 <osalSysUnlock>
}
    1f1e:	b003      	add	sp, #12
    1f20:	f85d fb04 	ldr.w	pc, [sp], #4
    1f24:	f3af 8000 	nop.w
    1f28:	f3af 8000 	nop.w
    1f2c:	f3af 8000 	nop.w

00001f30 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
    1f30:	b500      	push	{lr}
    1f32:	b083      	sub	sp, #12
    1f34:	9001      	str	r0, [sp, #4]
    1f36:	460b      	mov	r3, r1
    1f38:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    1f3c:	9b01      	ldr	r3, [sp, #4]
    1f3e:	330c      	adds	r3, #12
    1f40:	4618      	mov	r0, r3
    1f42:	f7ff feb5 	bl	1cb0 <chIQIsEmptyI>
    1f46:	4603      	mov	r3, r0
    1f48:	2b00      	cmp	r3, #0
    1f4a:	d005      	beq.n	1f58 <sdIncomingDataI+0x28>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
    1f4c:	9b01      	ldr	r3, [sp, #4]
    1f4e:	3304      	adds	r3, #4
    1f50:	4618      	mov	r0, r3
    1f52:	2104      	movs	r1, #4
    1f54:	f7ff fedc 	bl	1d10 <osalEventBroadcastFlagsI>
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
    1f58:	9b01      	ldr	r3, [sp, #4]
    1f5a:	f103 020c 	add.w	r2, r3, #12
    1f5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f62:	4610      	mov	r0, r2
    1f64:	4619      	mov	r1, r3
    1f66:	f7ff fb4b 	bl	1600 <chIQPutI>
    1f6a:	4603      	mov	r3, r0
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	da05      	bge.n	1f7c <sdIncomingDataI+0x4c>
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
    1f70:	9b01      	ldr	r3, [sp, #4]
    1f72:	3304      	adds	r3, #4
    1f74:	4618      	mov	r0, r3
    1f76:	2180      	movs	r1, #128	; 0x80
    1f78:	f7ff feca 	bl	1d10 <osalEventBroadcastFlagsI>
}
    1f7c:	b003      	add	sp, #12
    1f7e:	f85d fb04 	ldr.w	pc, [sp], #4
    1f82:	bf00      	nop
    1f84:	f3af 8000 	nop.w
    1f88:	f3af 8000 	nop.w
    1f8c:	f3af 8000 	nop.w

00001f90 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
    1f90:	b082      	sub	sp, #8
    1f92:	2320      	movs	r3, #32
    1f94:	9301      	str	r3, [sp, #4]
    1f96:	9b01      	ldr	r3, [sp, #4]
    1f98:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    1f9c:	b002      	add	sp, #8
    1f9e:	4770      	bx	lr

00001fa0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
    1fa0:	b082      	sub	sp, #8
    1fa2:	2300      	movs	r3, #0
    1fa4:	9301      	str	r3, [sp, #4]
    1fa6:	9b01      	ldr	r3, [sp, #4]
    1fa8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    1fac:	b002      	add	sp, #8
    1fae:	4770      	bx	lr

00001fb0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
    1fb0:	b508      	push	{r3, lr}

  port_lock();
    1fb2:	f7ff ffed 	bl	1f90 <port_lock>
}
    1fb6:	bd08      	pop	{r3, pc}
    1fb8:	f3af 8000 	nop.w
    1fbc:	f3af 8000 	nop.w

00001fc0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
    1fc0:	b508      	push	{r3, lr}

  port_unlock();
    1fc2:	f7ff ffed 	bl	1fa0 <port_unlock>
}
    1fc6:	bd08      	pop	{r3, pc}
    1fc8:	f3af 8000 	nop.w
    1fcc:	f3af 8000 	nop.w

00001fd0 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
    1fd0:	b508      	push	{r3, lr}

  port_lock_from_isr();
    1fd2:	f7ff ffed 	bl	1fb0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
    1fd6:	bd08      	pop	{r3, pc}
    1fd8:	f3af 8000 	nop.w
    1fdc:	f3af 8000 	nop.w

00001fe0 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
    1fe0:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
    1fe2:	f7ff ffed 	bl	1fc0 <port_unlock_from_isr>
}
    1fe6:	bd08      	pop	{r3, pc}
    1fe8:	f3af 8000 	nop.w
    1fec:	f3af 8000 	nop.w

00001ff0 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
    1ff0:	b508      	push	{r3, lr}

  chSysLockFromISR();
    1ff2:	f7ff ffed 	bl	1fd0 <chSysLockFromISR>
}
    1ff6:	bd08      	pop	{r3, pc}
    1ff8:	f3af 8000 	nop.w
    1ffc:	f3af 8000 	nop.w

00002000 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
    2000:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
    2002:	f7ff ffed 	bl	1fe0 <chSysUnlockFromISR>
}
    2006:	bd08      	pop	{r3, pc}
    2008:	f3af 8000 	nop.w
    200c:	f3af 8000 	nop.w

00002010 <get_hword>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static uint16_t get_hword(uint8_t *p) {
    2010:	b084      	sub	sp, #16
    2012:	9001      	str	r0, [sp, #4]
  uint16_t hw;

  hw  = (uint16_t)*p++;
    2014:	9b01      	ldr	r3, [sp, #4]
    2016:	1c5a      	adds	r2, r3, #1
    2018:	9201      	str	r2, [sp, #4]
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	f8ad 300e 	strh.w	r3, [sp, #14]
  hw |= (uint16_t)*p << 8U;
    2020:	9b01      	ldr	r3, [sp, #4]
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	021b      	lsls	r3, r3, #8
    2026:	b29a      	uxth	r2, r3
    2028:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    202c:	4313      	orrs	r3, r2
    202e:	b29b      	uxth	r3, r3
    2030:	f8ad 300e 	strh.w	r3, [sp, #14]
  return hw;
    2034:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    2038:	4618      	mov	r0, r3
    203a:	b004      	add	sp, #16
    203c:	4770      	bx	lr
    203e:	bf00      	nop

00002040 <set_address>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
    2040:	b500      	push	{lr}
    2042:	b083      	sub	sp, #12
    2044:	9001      	str	r0, [sp, #4]

  usbp->address = usbp->setup[2];
    2046:	9b01      	ldr	r3, [sp, #4]
    2048:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    204c:	9b01      	ldr	r3, [sp, #4]
    204e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  usb_lld_set_address(usbp);
    2052:	9801      	ldr	r0, [sp, #4]
    2054:	f001 faec 	bl	3630 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
    2058:	9b01      	ldr	r3, [sp, #4]
    205a:	685b      	ldr	r3, [r3, #4]
    205c:	681b      	ldr	r3, [r3, #0]
    205e:	2b00      	cmp	r3, #0
    2060:	d005      	beq.n	206e <set_address+0x2e>
    2062:	9b01      	ldr	r3, [sp, #4]
    2064:	685b      	ldr	r3, [r3, #4]
    2066:	681b      	ldr	r3, [r3, #0]
    2068:	9801      	ldr	r0, [sp, #4]
    206a:	2101      	movs	r1, #1
    206c:	4798      	blx	r3
  usbp->state = USB_SELECTED;
    206e:	9b01      	ldr	r3, [sp, #4]
    2070:	2203      	movs	r2, #3
    2072:	701a      	strb	r2, [r3, #0]
}
    2074:	b003      	add	sp, #12
    2076:	f85d fb04 	ldr.w	pc, [sp], #4
    207a:	bf00      	nop
    207c:	f3af 8000 	nop.w

00002080 <default_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The request handling exit code.
 * @retval false        Request not recognized by the handler or error.
 * @retval true         Request handled.
 */
static bool default_handler(USBDriver *usbp) {
    2080:	b570      	push	{r4, r5, r6, lr}
    2082:	b084      	sub	sp, #16
    2084:	9001      	str	r0, [sp, #4]
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
    2086:	9b01      	ldr	r3, [sp, #4]
    2088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    208c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
    2090:	9b01      	ldr	r3, [sp, #4]
    2092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    2096:	021b      	lsls	r3, r3, #8
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
    2098:	4313      	orrs	r3, r2
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
    209a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    209e:	d05a      	beq.n	2156 <default_handler+0xd6>
    20a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    20a4:	d812      	bhi.n	20cc <default_handler+0x4c>
    20a6:	2b02      	cmp	r3, #2
    20a8:	f000 80ee 	beq.w	2288 <default_handler+0x208>
    20ac:	2b02      	cmp	r3, #2
    20ae:	d805      	bhi.n	20bc <default_handler+0x3c>
    20b0:	2b00      	cmp	r3, #0
    20b2:	d028      	beq.n	2106 <default_handler+0x86>
    20b4:	2b01      	cmp	r3, #1
    20b6:	f000 80dc 	beq.w	2272 <default_handler+0x1f2>
    20ba:	e1a6      	b.n	240a <default_handler+0x38a>
    20bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    20c0:	d02e      	beq.n	2120 <default_handler+0xa0>
    20c2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    20c6:	f000 8136 	beq.w	2336 <default_handler+0x2b6>
    20ca:	e19e      	b.n	240a <default_handler+0x38a>
    20cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    20d0:	d074      	beq.n	21bc <default_handler+0x13c>
    20d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    20d6:	d808      	bhi.n	20ea <default_handler+0x6a>
    20d8:	f240 3202 	movw	r2, #770	; 0x302
    20dc:	4293      	cmp	r3, r2
    20de:	f000 815f 	beq.w	23a0 <default_handler+0x320>
    20e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    20e6:	d051      	beq.n	218c <default_handler+0x10c>
    20e8:	e18f      	b.n	240a <default_handler+0x38a>
    20ea:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    20ee:	f000 8098 	beq.w	2222 <default_handler+0x1a2>
    20f2:	f640 4202 	movw	r2, #3074	; 0xc02
    20f6:	4293      	cmp	r3, r2
    20f8:	f000 80bb 	beq.w	2272 <default_handler+0x1f2>
    20fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2100:	f000 8082 	beq.w	2208 <default_handler+0x188>
    2104:	e181      	b.n	240a <default_handler+0x38a>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    2106:	9b01      	ldr	r3, [sp, #4]
    2108:	f103 024c 	add.w	r2, r3, #76	; 0x4c
    210c:	9b01      	ldr	r3, [sp, #4]
    210e:	639a      	str	r2, [r3, #56]	; 0x38
    2110:	9b01      	ldr	r3, [sp, #4]
    2112:	2202      	movs	r2, #2
    2114:	63da      	str	r2, [r3, #60]	; 0x3c
    2116:	9b01      	ldr	r3, [sp, #4]
    2118:	2200      	movs	r2, #0
    211a:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
    211c:	2301      	movs	r3, #1
    211e:	e175      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
    2120:	9b01      	ldr	r3, [sp, #4]
    2122:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
    2126:	2b01      	cmp	r3, #1
    2128:	d113      	bne.n	2152 <default_handler+0xd2>
      usbp->status &= ~2U;
    212a:	9b01      	ldr	r3, [sp, #4]
    212c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    2130:	f023 0302 	bic.w	r3, r3, #2
    2134:	b29a      	uxth	r2, r3
    2136:	9b01      	ldr	r3, [sp, #4]
    2138:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
    213c:	9b01      	ldr	r3, [sp, #4]
    213e:	2200      	movs	r2, #0
    2140:	639a      	str	r2, [r3, #56]	; 0x38
    2142:	9b01      	ldr	r3, [sp, #4]
    2144:	2200      	movs	r2, #0
    2146:	63da      	str	r2, [r3, #60]	; 0x3c
    2148:	9b01      	ldr	r3, [sp, #4]
    214a:	2200      	movs	r2, #0
    214c:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
    214e:	2301      	movs	r3, #1
    2150:	e15c      	b.n	240c <default_handler+0x38c>
    }
    return false;
    2152:	2300      	movs	r3, #0
    2154:	e15a      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
    2156:	9b01      	ldr	r3, [sp, #4]
    2158:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
    215c:	2b01      	cmp	r3, #1
    215e:	d113      	bne.n	2188 <default_handler+0x108>
      usbp->status |= 2U;
    2160:	9b01      	ldr	r3, [sp, #4]
    2162:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    2166:	f043 0302 	orr.w	r3, r3, #2
    216a:	b29a      	uxth	r2, r3
    216c:	9b01      	ldr	r3, [sp, #4]
    216e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
    2172:	9b01      	ldr	r3, [sp, #4]
    2174:	2200      	movs	r2, #0
    2176:	639a      	str	r2, [r3, #56]	; 0x38
    2178:	9b01      	ldr	r3, [sp, #4]
    217a:	2200      	movs	r2, #0
    217c:	63da      	str	r2, [r3, #60]	; 0x3c
    217e:	9b01      	ldr	r3, [sp, #4]
    2180:	2200      	movs	r2, #0
    2182:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
    2184:	2301      	movs	r3, #1
    2186:	e141      	b.n	240c <default_handler+0x38c>
    }
    return false;
    2188:	2300      	movs	r3, #0
    218a:	e13f      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
    218c:	9b01      	ldr	r3, [sp, #4]
    218e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    2192:	2b00      	cmp	r3, #0
    2194:	d107      	bne.n	21a6 <default_handler+0x126>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
    2196:	9b01      	ldr	r3, [sp, #4]
    2198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
    219c:	2b05      	cmp	r3, #5
    219e:	d102      	bne.n	21a6 <default_handler+0x126>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    21a0:	9801      	ldr	r0, [sp, #4]
    21a2:	f7ff ff4d 	bl	2040 <set_address>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    21a6:	9b01      	ldr	r3, [sp, #4]
    21a8:	2200      	movs	r2, #0
    21aa:	639a      	str	r2, [r3, #56]	; 0x38
    21ac:	9b01      	ldr	r3, [sp, #4]
    21ae:	2200      	movs	r2, #0
    21b0:	63da      	str	r2, [r3, #60]	; 0x3c
    21b2:	9b01      	ldr	r3, [sp, #4]
    21b4:	2200      	movs	r2, #0
    21b6:	641a      	str	r2, [r3, #64]	; 0x40
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
    21b8:	2301      	movs	r3, #1
    21ba:	e127      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
    21bc:	9b01      	ldr	r3, [sp, #4]
    21be:	685b      	ldr	r3, [r3, #4]
    21c0:	685c      	ldr	r4, [r3, #4]
    21c2:	9b01      	ldr	r3, [sp, #4]
    21c4:	f893 6047 	ldrb.w	r6, [r3, #71]	; 0x47
    21c8:	9b01      	ldr	r3, [sp, #4]
    21ca:	f893 5046 	ldrb.w	r5, [r3, #70]	; 0x46
    21ce:	9b01      	ldr	r3, [sp, #4]
    21d0:	3348      	adds	r3, #72	; 0x48
    21d2:	4618      	mov	r0, r3
    21d4:	f7ff ff1c 	bl	2010 <get_hword>
    21d8:	4603      	mov	r3, r0
    21da:	9801      	ldr	r0, [sp, #4]
    21dc:	4631      	mov	r1, r6
    21de:	462a      	mov	r2, r5
    21e0:	47a0      	blx	r4
    21e2:	9003      	str	r0, [sp, #12]
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
    21e4:	9b03      	ldr	r3, [sp, #12]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d101      	bne.n	21ee <default_handler+0x16e>
      return false;
    21ea:	2300      	movs	r3, #0
    21ec:	e10e      	b.n	240c <default_handler+0x38c>
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    21ee:	9b03      	ldr	r3, [sp, #12]
    21f0:	685a      	ldr	r2, [r3, #4]
    21f2:	9b01      	ldr	r3, [sp, #4]
    21f4:	639a      	str	r2, [r3, #56]	; 0x38
    21f6:	9b03      	ldr	r3, [sp, #12]
    21f8:	681a      	ldr	r2, [r3, #0]
    21fa:	9b01      	ldr	r3, [sp, #4]
    21fc:	63da      	str	r2, [r3, #60]	; 0x3c
    21fe:	9b01      	ldr	r3, [sp, #4]
    2200:	2200      	movs	r2, #0
    2202:	641a      	str	r2, [r3, #64]	; 0x40
    /*lint -restore*/
    return true;
    2204:	2301      	movs	r3, #1
    2206:	e101      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    2208:	9b01      	ldr	r3, [sp, #4]
    220a:	f103 024f 	add.w	r2, r3, #79	; 0x4f
    220e:	9b01      	ldr	r3, [sp, #4]
    2210:	639a      	str	r2, [r3, #56]	; 0x38
    2212:	9b01      	ldr	r3, [sp, #4]
    2214:	2201      	movs	r2, #1
    2216:	63da      	str	r2, [r3, #60]	; 0x3c
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	2200      	movs	r2, #0
    221c:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
    221e:	2301      	movs	r3, #1
    2220:	e0f4      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
    2222:	9b01      	ldr	r3, [sp, #4]
    2224:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    2228:	9b01      	ldr	r3, [sp, #4]
    222a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
    if (usbp->configuration == 0U) {
    222e:	9b01      	ldr	r3, [sp, #4]
    2230:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
    2234:	2b00      	cmp	r3, #0
    2236:	d103      	bne.n	2240 <default_handler+0x1c0>
      usbp->state = USB_SELECTED;
    2238:	9b01      	ldr	r3, [sp, #4]
    223a:	2203      	movs	r2, #3
    223c:	701a      	strb	r2, [r3, #0]
    223e:	e002      	b.n	2246 <default_handler+0x1c6>
    }
    else {
      usbp->state = USB_ACTIVE;
    2240:	9b01      	ldr	r3, [sp, #4]
    2242:	2204      	movs	r2, #4
    2244:	701a      	strb	r2, [r3, #0]
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
    2246:	9b01      	ldr	r3, [sp, #4]
    2248:	685b      	ldr	r3, [r3, #4]
    224a:	681b      	ldr	r3, [r3, #0]
    224c:	2b00      	cmp	r3, #0
    224e:	d005      	beq.n	225c <default_handler+0x1dc>
    2250:	9b01      	ldr	r3, [sp, #4]
    2252:	685b      	ldr	r3, [r3, #4]
    2254:	681b      	ldr	r3, [r3, #0]
    2256:	9801      	ldr	r0, [sp, #4]
    2258:	2102      	movs	r1, #2
    225a:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
    225c:	9b01      	ldr	r3, [sp, #4]
    225e:	2200      	movs	r2, #0
    2260:	639a      	str	r2, [r3, #56]	; 0x38
    2262:	9b01      	ldr	r3, [sp, #4]
    2264:	2200      	movs	r2, #0
    2266:	63da      	str	r2, [r3, #60]	; 0x3c
    2268:	9b01      	ldr	r3, [sp, #4]
    226a:	2200      	movs	r2, #0
    226c:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
    226e:	2301      	movs	r3, #1
    2270:	e0cc      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    2272:	9b01      	ldr	r3, [sp, #4]
    2274:	4a67      	ldr	r2, [pc, #412]	; (2414 <default_handler+0x394>)
    2276:	639a      	str	r2, [r3, #56]	; 0x38
    2278:	9b01      	ldr	r3, [sp, #4]
    227a:	2202      	movs	r2, #2
    227c:	63da      	str	r2, [r3, #60]	; 0x3c
    227e:	9b01      	ldr	r3, [sp, #4]
    2280:	2200      	movs	r2, #0
    2282:	641a      	str	r2, [r3, #64]	; 0x40
    /*lint -restore*/
    return true;
    2284:	2301      	movs	r3, #1
    2286:	e0c1      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
    2288:	9b01      	ldr	r3, [sp, #4]
    228a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    228e:	b2db      	uxtb	r3, r3
    2290:	b25b      	sxtb	r3, r3
    2292:	2b00      	cmp	r3, #0
    2294:	da27      	bge.n	22e6 <default_handler+0x266>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
    2296:	9b01      	ldr	r3, [sp, #4]
    2298:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    229c:	f003 030f 	and.w	r3, r3, #15
    22a0:	b2db      	uxtb	r3, r3
    22a2:	9801      	ldr	r0, [sp, #4]
    22a4:	4619      	mov	r1, r3
    22a6:	f001 f9fb 	bl	36a0 <usb_lld_get_status_in>
    22aa:	4603      	mov	r3, r0
    22ac:	2b01      	cmp	r3, #1
    22ae:	d002      	beq.n	22b6 <default_handler+0x236>
    22b0:	2b02      	cmp	r3, #2
    22b2:	d00b      	beq.n	22cc <default_handler+0x24c>
    22b4:	e015      	b.n	22e2 <default_handler+0x262>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
    22b6:	9b01      	ldr	r3, [sp, #4]
    22b8:	4a57      	ldr	r2, [pc, #348]	; (2418 <default_handler+0x398>)
    22ba:	639a      	str	r2, [r3, #56]	; 0x38
    22bc:	9b01      	ldr	r3, [sp, #4]
    22be:	2202      	movs	r2, #2
    22c0:	63da      	str	r2, [r3, #60]	; 0x3c
    22c2:	9b01      	ldr	r3, [sp, #4]
    22c4:	2200      	movs	r2, #0
    22c6:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
    22c8:	2301      	movs	r3, #1
    22ca:	e09f      	b.n	240c <default_handler+0x38c>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
    22cc:	9b01      	ldr	r3, [sp, #4]
    22ce:	4a53      	ldr	r2, [pc, #332]	; (241c <default_handler+0x39c>)
    22d0:	639a      	str	r2, [r3, #56]	; 0x38
    22d2:	9b01      	ldr	r3, [sp, #4]
    22d4:	2202      	movs	r2, #2
    22d6:	63da      	str	r2, [r3, #60]	; 0x3c
    22d8:	9b01      	ldr	r3, [sp, #4]
    22da:	2200      	movs	r2, #0
    22dc:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
    22de:	2301      	movs	r3, #1
    22e0:	e094      	b.n	240c <default_handler+0x38c>
      case EP_STATUS_DISABLED:
      default:
        return false;
    22e2:	2300      	movs	r3, #0
    22e4:	e092      	b.n	240c <default_handler+0x38c>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
    22e6:	9b01      	ldr	r3, [sp, #4]
    22e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    22ec:	f003 030f 	and.w	r3, r3, #15
    22f0:	b2db      	uxtb	r3, r3
    22f2:	9801      	ldr	r0, [sp, #4]
    22f4:	4619      	mov	r1, r3
    22f6:	f001 f9b3 	bl	3660 <usb_lld_get_status_out>
    22fa:	4603      	mov	r3, r0
    22fc:	2b01      	cmp	r3, #1
    22fe:	d002      	beq.n	2306 <default_handler+0x286>
    2300:	2b02      	cmp	r3, #2
    2302:	d00b      	beq.n	231c <default_handler+0x29c>
    2304:	e015      	b.n	2332 <default_handler+0x2b2>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
    2306:	9b01      	ldr	r3, [sp, #4]
    2308:	4a43      	ldr	r2, [pc, #268]	; (2418 <default_handler+0x398>)
    230a:	639a      	str	r2, [r3, #56]	; 0x38
    230c:	9b01      	ldr	r3, [sp, #4]
    230e:	2202      	movs	r2, #2
    2310:	63da      	str	r2, [r3, #60]	; 0x3c
    2312:	9b01      	ldr	r3, [sp, #4]
    2314:	2200      	movs	r2, #0
    2316:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
    2318:	2301      	movs	r3, #1
    231a:	e077      	b.n	240c <default_handler+0x38c>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
    231c:	9b01      	ldr	r3, [sp, #4]
    231e:	4a3f      	ldr	r2, [pc, #252]	; (241c <default_handler+0x39c>)
    2320:	639a      	str	r2, [r3, #56]	; 0x38
    2322:	9b01      	ldr	r3, [sp, #4]
    2324:	2202      	movs	r2, #2
    2326:	63da      	str	r2, [r3, #60]	; 0x3c
    2328:	9b01      	ldr	r3, [sp, #4]
    232a:	2200      	movs	r2, #0
    232c:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
    232e:	2301      	movs	r3, #1
    2330:	e06c      	b.n	240c <default_handler+0x38c>
      case EP_STATUS_DISABLED:
      default:
        return false;
    2332:	2300      	movs	r3, #0
    2334:	e06a      	b.n	240c <default_handler+0x38c>
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
    2336:	9b01      	ldr	r3, [sp, #4]
    2338:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
    233c:	2b00      	cmp	r3, #0
    233e:	d001      	beq.n	2344 <default_handler+0x2c4>
      return false;
    2340:	2300      	movs	r3, #0
    2342:	e063      	b.n	240c <default_handler+0x38c>
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
    2344:	9b01      	ldr	r3, [sp, #4]
    2346:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    234a:	f003 030f 	and.w	r3, r3, #15
    234e:	2b00      	cmp	r3, #0
    2350:	d01b      	beq.n	238a <default_handler+0x30a>
      if ((usbp->setup[4] & 0x80U) != 0U) {
    2352:	9b01      	ldr	r3, [sp, #4]
    2354:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    2358:	b2db      	uxtb	r3, r3
    235a:	b25b      	sxtb	r3, r3
    235c:	2b00      	cmp	r3, #0
    235e:	da0a      	bge.n	2376 <default_handler+0x2f6>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
    2360:	9b01      	ldr	r3, [sp, #4]
    2362:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    2366:	f003 030f 	and.w	r3, r3, #15
    236a:	b2db      	uxtb	r3, r3
    236c:	9801      	ldr	r0, [sp, #4]
    236e:	4619      	mov	r1, r3
    2370:	f001 fb16 	bl	39a0 <usb_lld_clear_in>
    2374:	e009      	b.n	238a <default_handler+0x30a>
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
    2376:	9b01      	ldr	r3, [sp, #4]
    2378:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    237c:	f003 030f 	and.w	r3, r3, #15
    2380:	b2db      	uxtb	r3, r3
    2382:	9801      	ldr	r0, [sp, #4]
    2384:	4619      	mov	r1, r3
    2386:	f001 faeb 	bl	3960 <usb_lld_clear_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    238a:	9b01      	ldr	r3, [sp, #4]
    238c:	2200      	movs	r2, #0
    238e:	639a      	str	r2, [r3, #56]	; 0x38
    2390:	9b01      	ldr	r3, [sp, #4]
    2392:	2200      	movs	r2, #0
    2394:	63da      	str	r2, [r3, #60]	; 0x3c
    2396:	9b01      	ldr	r3, [sp, #4]
    2398:	2200      	movs	r2, #0
    239a:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
    239c:	2301      	movs	r3, #1
    239e:	e035      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
    23a0:	9b01      	ldr	r3, [sp, #4]
    23a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
    23a6:	2b00      	cmp	r3, #0
    23a8:	d001      	beq.n	23ae <default_handler+0x32e>
      return false;
    23aa:	2300      	movs	r3, #0
    23ac:	e02e      	b.n	240c <default_handler+0x38c>
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
    23ae:	9b01      	ldr	r3, [sp, #4]
    23b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    23b4:	f003 030f 	and.w	r3, r3, #15
    23b8:	2b00      	cmp	r3, #0
    23ba:	d01b      	beq.n	23f4 <default_handler+0x374>
      if ((usbp->setup[4] & 0x80U) != 0U) {
    23bc:	9b01      	ldr	r3, [sp, #4]
    23be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    23c2:	b2db      	uxtb	r3, r3
    23c4:	b25b      	sxtb	r3, r3
    23c6:	2b00      	cmp	r3, #0
    23c8:	da0a      	bge.n	23e0 <default_handler+0x360>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
    23ca:	9b01      	ldr	r3, [sp, #4]
    23cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    23d0:	f003 030f 	and.w	r3, r3, #15
    23d4:	b2db      	uxtb	r3, r3
    23d6:	9801      	ldr	r0, [sp, #4]
    23d8:	4619      	mov	r1, r3
    23da:	f001 faa1 	bl	3920 <usb_lld_stall_in>
    23de:	e009      	b.n	23f4 <default_handler+0x374>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
    23e0:	9b01      	ldr	r3, [sp, #4]
    23e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    23e6:	f003 030f 	and.w	r3, r3, #15
    23ea:	b2db      	uxtb	r3, r3
    23ec:	9801      	ldr	r0, [sp, #4]
    23ee:	4619      	mov	r1, r3
    23f0:	f001 fa76 	bl	38e0 <usb_lld_stall_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    23f4:	9b01      	ldr	r3, [sp, #4]
    23f6:	2200      	movs	r2, #0
    23f8:	639a      	str	r2, [r3, #56]	; 0x38
    23fa:	9b01      	ldr	r3, [sp, #4]
    23fc:	2200      	movs	r2, #0
    23fe:	63da      	str	r2, [r3, #60]	; 0x3c
    2400:	9b01      	ldr	r3, [sp, #4]
    2402:	2200      	movs	r2, #0
    2404:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
    2406:	2301      	movs	r3, #1
    2408:	e000      	b.n	240c <default_handler+0x38c>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_INTERFACE << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_SET_INTERFACE << 8):
    /* All the above requests are not handled here, if you need them then
       use the hook mechanism and provide handling.*/
  default:
    return false;
    240a:	2300      	movs	r3, #0
  }
}
    240c:	4618      	mov	r0, r3
    240e:	b004      	add	sp, #16
    2410:	bd70      	pop	{r4, r5, r6, pc}
    2412:	bf00      	nop
    2414:	00003f70 	.word	0x00003f70
    2418:	00003f90 	.word	0x00003f90
    241c:	00003f80 	.word	0x00003f80

00002420 <usbInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void usbInit(void) {
    2420:	b508      	push	{r3, lr}

  usb_lld_init();
    2422:	f001 f855 	bl	34d0 <usb_lld_init>
}
    2426:	bd08      	pop	{r3, pc}
    2428:	f3af 8000 	nop.w
    242c:	f3af 8000 	nop.w

00002430 <usbObjectInit>:
 *
 * @param[out] usbp     pointer to the @p USBDriver object
 *
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
    2430:	b084      	sub	sp, #16
    2432:	9001      	str	r0, [sp, #4]
  unsigned i;

  usbp->state        = USB_STOP;
    2434:	9b01      	ldr	r3, [sp, #4]
    2436:	2201      	movs	r2, #1
    2438:	701a      	strb	r2, [r3, #0]
  usbp->config       = NULL;
    243a:	9b01      	ldr	r3, [sp, #4]
    243c:	2200      	movs	r2, #0
    243e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    2440:	2300      	movs	r3, #0
    2442:	9303      	str	r3, [sp, #12]
    2444:	e00f      	b.n	2466 <usbObjectInit+0x36>
    usbp->in_params[i]  = NULL;
    2446:	9a01      	ldr	r2, [sp, #4]
    2448:	9b03      	ldr	r3, [sp, #12]
    244a:	3306      	adds	r3, #6
    244c:	009b      	lsls	r3, r3, #2
    244e:	4413      	add	r3, r2
    2450:	2200      	movs	r2, #0
    2452:	605a      	str	r2, [r3, #4]
    usbp->out_params[i] = NULL;
    2454:	9b01      	ldr	r3, [sp, #4]
    2456:	9a03      	ldr	r2, [sp, #12]
    2458:	320a      	adds	r2, #10
    245a:	2100      	movs	r1, #0
    245c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    2460:	9b03      	ldr	r3, [sp, #12]
    2462:	3301      	adds	r3, #1
    2464:	9303      	str	r3, [sp, #12]
    2466:	9b03      	ldr	r3, [sp, #12]
    2468:	2b02      	cmp	r3, #2
    246a:	d9ec      	bls.n	2446 <usbObjectInit+0x16>
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
    246c:	9b01      	ldr	r3, [sp, #4]
    246e:	2200      	movs	r2, #0
    2470:	811a      	strh	r2, [r3, #8]
  usbp->receiving    = 0;
    2472:	9b01      	ldr	r3, [sp, #4]
    2474:	2200      	movs	r2, #0
    2476:	815a      	strh	r2, [r3, #10]
}
    2478:	b004      	add	sp, #16
    247a:	4770      	bx	lr
    247c:	f3af 8000 	nop.w

00002480 <usbPrepareReceive>:
 * @param[out] buf      buffer where to copy the received data
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
    2480:	b500      	push	{lr}
    2482:	b087      	sub	sp, #28
    2484:	9003      	str	r0, [sp, #12]
    2486:	9201      	str	r2, [sp, #4]
    2488:	9300      	str	r3, [sp, #0]
    248a:	460b      	mov	r3, r1
    248c:	f88d 300b 	strb.w	r3, [sp, #11]
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
    2490:	f89d 300b 	ldrb.w	r3, [sp, #11]
    2494:	9a03      	ldr	r2, [sp, #12]
    2496:	3302      	adds	r3, #2
    2498:	009b      	lsls	r3, r3, #2
    249a:	4413      	add	r3, r2
    249c:	685b      	ldr	r3, [r3, #4]
    249e:	699b      	ldr	r3, [r3, #24]
    24a0:	9305      	str	r3, [sp, #20]

  osp->rxqueued           = false;
    24a2:	9b05      	ldr	r3, [sp, #20]
    24a4:	2200      	movs	r2, #0
    24a6:	701a      	strb	r2, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
    24a8:	9b05      	ldr	r3, [sp, #20]
    24aa:	9a01      	ldr	r2, [sp, #4]
    24ac:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
    24ae:	9b05      	ldr	r3, [sp, #20]
    24b0:	9a00      	ldr	r2, [sp, #0]
    24b2:	605a      	str	r2, [r3, #4]
  osp->rxcnt              = 0;
    24b4:	9b05      	ldr	r3, [sp, #20]
    24b6:	2200      	movs	r2, #0
    24b8:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
    24ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    24be:	9803      	ldr	r0, [sp, #12]
    24c0:	4619      	mov	r1, r3
    24c2:	f001 f925 	bl	3710 <usb_lld_prepare_receive>
}
    24c6:	b007      	add	sp, #28
    24c8:	f85d fb04 	ldr.w	pc, [sp], #4
    24cc:	f3af 8000 	nop.w

000024d0 <usbPrepareTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
    24d0:	b500      	push	{lr}
    24d2:	b087      	sub	sp, #28
    24d4:	9003      	str	r0, [sp, #12]
    24d6:	9201      	str	r2, [sp, #4]
    24d8:	9300      	str	r3, [sp, #0]
    24da:	460b      	mov	r3, r1
    24dc:	f88d 300b 	strb.w	r3, [sp, #11]
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
    24e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    24e4:	9a03      	ldr	r2, [sp, #12]
    24e6:	3302      	adds	r3, #2
    24e8:	009b      	lsls	r3, r3, #2
    24ea:	4413      	add	r3, r2
    24ec:	685b      	ldr	r3, [r3, #4]
    24ee:	695b      	ldr	r3, [r3, #20]
    24f0:	9305      	str	r3, [sp, #20]

  isp->txqueued           = false;
    24f2:	9b05      	ldr	r3, [sp, #20]
    24f4:	2200      	movs	r2, #0
    24f6:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
    24f8:	9b05      	ldr	r3, [sp, #20]
    24fa:	9a01      	ldr	r2, [sp, #4]
    24fc:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
    24fe:	9b05      	ldr	r3, [sp, #20]
    2500:	9a00      	ldr	r2, [sp, #0]
    2502:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
    2504:	9b05      	ldr	r3, [sp, #20]
    2506:	2200      	movs	r2, #0
    2508:	609a      	str	r2, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
    250a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    250e:	9803      	ldr	r0, [sp, #12]
    2510:	4619      	mov	r1, r3
    2512:	f001 f945 	bl	37a0 <usb_lld_prepare_transmit>
}
    2516:	b007      	add	sp, #28
    2518:	f85d fb04 	ldr.w	pc, [sp], #4
    251c:	f3af 8000 	nop.w

00002520 <usbStartReceiveI>:
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
    2520:	b500      	push	{lr}
    2522:	b083      	sub	sp, #12
    2524:	9001      	str	r0, [sp, #4]
    2526:	460b      	mov	r3, r1
    2528:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
    252c:	9b01      	ldr	r3, [sp, #4]
    252e:	895a      	ldrh	r2, [r3, #10]
    2530:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2534:	2101      	movs	r1, #1
    2536:	fa01 f303 	lsl.w	r3, r1, r3
    253a:	b29b      	uxth	r3, r3
    253c:	4013      	ands	r3, r2
    253e:	b29b      	uxth	r3, r3
    2540:	2b00      	cmp	r3, #0
    2542:	d001      	beq.n	2548 <usbStartReceiveI+0x28>
    return true;
    2544:	2301      	movs	r3, #1
    2546:	e012      	b.n	256e <usbStartReceiveI+0x4e>
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
    2548:	9b01      	ldr	r3, [sp, #4]
    254a:	895a      	ldrh	r2, [r3, #10]
    254c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2550:	2101      	movs	r1, #1
    2552:	fa01 f303 	lsl.w	r3, r1, r3
    2556:	b29b      	uxth	r3, r3
    2558:	4313      	orrs	r3, r2
    255a:	b29a      	uxth	r2, r3
    255c:	9b01      	ldr	r3, [sp, #4]
    255e:	815a      	strh	r2, [r3, #10]
  usb_lld_start_out(usbp, ep);
    2560:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2564:	9801      	ldr	r0, [sp, #4]
    2566:	4619      	mov	r1, r3
    2568:	f001 f972 	bl	3850 <usb_lld_start_out>
  return false;
    256c:	2300      	movs	r3, #0
}
    256e:	4618      	mov	r0, r3
    2570:	b003      	add	sp, #12
    2572:	f85d fb04 	ldr.w	pc, [sp], #4
    2576:	bf00      	nop
    2578:	f3af 8000 	nop.w
    257c:	f3af 8000 	nop.w

00002580 <usbStartTransmitI>:
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
    2580:	b500      	push	{lr}
    2582:	b083      	sub	sp, #12
    2584:	9001      	str	r0, [sp, #4]
    2586:	460b      	mov	r3, r1
    2588:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
    258c:	9b01      	ldr	r3, [sp, #4]
    258e:	891a      	ldrh	r2, [r3, #8]
    2590:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2594:	2101      	movs	r1, #1
    2596:	fa01 f303 	lsl.w	r3, r1, r3
    259a:	b29b      	uxth	r3, r3
    259c:	4013      	ands	r3, r2
    259e:	b29b      	uxth	r3, r3
    25a0:	2b00      	cmp	r3, #0
    25a2:	d001      	beq.n	25a8 <usbStartTransmitI+0x28>
    return true;
    25a4:	2301      	movs	r3, #1
    25a6:	e012      	b.n	25ce <usbStartTransmitI+0x4e>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
    25a8:	9b01      	ldr	r3, [sp, #4]
    25aa:	891a      	ldrh	r2, [r3, #8]
    25ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25b0:	2101      	movs	r1, #1
    25b2:	fa01 f303 	lsl.w	r3, r1, r3
    25b6:	b29b      	uxth	r3, r3
    25b8:	4313      	orrs	r3, r2
    25ba:	b29a      	uxth	r2, r3
    25bc:	9b01      	ldr	r3, [sp, #4]
    25be:	811a      	strh	r2, [r3, #8]
  usb_lld_start_in(usbp, ep);
    25c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25c4:	9801      	ldr	r0, [sp, #4]
    25c6:	4619      	mov	r1, r3
    25c8:	f001 f962 	bl	3890 <usb_lld_start_in>
  return false;
    25cc:	2300      	movs	r3, #0
}
    25ce:	4618      	mov	r0, r3
    25d0:	b003      	add	sp, #12
    25d2:	f85d fb04 	ldr.w	pc, [sp], #4
    25d6:	bf00      	nop
    25d8:	f3af 8000 	nop.w
    25dc:	f3af 8000 	nop.w

000025e0 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
    25e0:	b500      	push	{lr}
    25e2:	b085      	sub	sp, #20
    25e4:	9001      	str	r0, [sp, #4]
  unsigned i;

  usbp->state         = USB_READY;
    25e6:	9b01      	ldr	r3, [sp, #4]
    25e8:	2202      	movs	r2, #2
    25ea:	701a      	strb	r2, [r3, #0]
  usbp->status        = 0;
    25ec:	9b01      	ldr	r3, [sp, #4]
    25ee:	2200      	movs	r2, #0
    25f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  usbp->address       = 0;
    25f4:	9b01      	ldr	r3, [sp, #4]
    25f6:	2200      	movs	r2, #0
    25f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  usbp->configuration = 0;
    25fc:	9b01      	ldr	r3, [sp, #4]
    25fe:	2200      	movs	r2, #0
    2600:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
  usbp->transmitting  = 0;
    2604:	9b01      	ldr	r3, [sp, #4]
    2606:	2200      	movs	r2, #0
    2608:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	2200      	movs	r2, #0
    260e:	815a      	strh	r2, [r3, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    2610:	2300      	movs	r3, #0
    2612:	9303      	str	r3, [sp, #12]
    2614:	e009      	b.n	262a <_usb_reset+0x4a>
    usbp->epc[i] = NULL;
    2616:	9a01      	ldr	r2, [sp, #4]
    2618:	9b03      	ldr	r3, [sp, #12]
    261a:	3302      	adds	r3, #2
    261c:	009b      	lsls	r3, r3, #2
    261e:	4413      	add	r3, r2
    2620:	2200      	movs	r2, #0
    2622:	605a      	str	r2, [r3, #4]
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    2624:	9b03      	ldr	r3, [sp, #12]
    2626:	3301      	adds	r3, #1
    2628:	9303      	str	r3, [sp, #12]
    262a:	9b03      	ldr	r3, [sp, #12]
    262c:	2b03      	cmp	r3, #3
    262e:	d9f2      	bls.n	2616 <_usb_reset+0x36>
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
    2630:	9b01      	ldr	r3, [sp, #4]
    2632:	2200      	movs	r2, #0
    2634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
    2638:	9801      	ldr	r0, [sp, #4]
    263a:	f000 ff61 	bl	3500 <usb_lld_reset>
}
    263e:	b005      	add	sp, #20
    2640:	f85d fb04 	ldr.w	pc, [sp], #4
    2644:	f3af 8000 	nop.w
    2648:	f3af 8000 	nop.w
    264c:	f3af 8000 	nop.w

00002650 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
    2650:	b500      	push	{lr}
    2652:	b085      	sub	sp, #20
    2654:	9001      	str	r0, [sp, #4]
    2656:	460b      	mov	r3, r1
    2658:	f88d 3003 	strb.w	r3, [sp, #3]
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
    265c:	9b01      	ldr	r3, [sp, #4]
    265e:	2200      	movs	r2, #0
    2660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
    2664:	9b01      	ldr	r3, [sp, #4]
    2666:	3344      	adds	r3, #68	; 0x44
    2668:	f89d 2003 	ldrb.w	r2, [sp, #3]
    266c:	9801      	ldr	r0, [sp, #4]
    266e:	4611      	mov	r1, r2
    2670:	461a      	mov	r2, r3
    2672:	f001 f835 	bl	36e0 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
    2676:	9b01      	ldr	r3, [sp, #4]
    2678:	685b      	ldr	r3, [r3, #4]
    267a:	689b      	ldr	r3, [r3, #8]
    267c:	2b00      	cmp	r3, #0
    267e:	d00a      	beq.n	2696 <_usb_ep0setup+0x46>
      !(usbp->config->requests_hook_cb(usbp))) {
    2680:	9b01      	ldr	r3, [sp, #4]
    2682:	685b      	ldr	r3, [r3, #4]
    2684:	689b      	ldr	r3, [r3, #8]
    2686:	9801      	ldr	r0, [sp, #4]
    2688:	4798      	blx	r3
    268a:	4603      	mov	r3, r0
    268c:	f083 0301 	eor.w	r3, r3, #1
    2690:	b2db      	uxtb	r3, r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
    2692:	2b00      	cmp	r3, #0
    2694:	d027      	beq.n	26e6 <_usb_ep0setup+0x96>
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
    2696:	9b01      	ldr	r3, [sp, #4]
    2698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    269c:	f003 0360 	and.w	r3, r3, #96	; 0x60
    26a0:	2b00      	cmp	r3, #0
    26a2:	d108      	bne.n	26b6 <_usb_ep0setup+0x66>
        !default_handler(usbp)) {
    26a4:	9801      	ldr	r0, [sp, #4]
    26a6:	f7ff fceb 	bl	2080 <default_handler>
    26aa:	4603      	mov	r3, r0
    26ac:	f083 0301 	eor.w	r3, r3, #1
    26b0:	b2db      	uxtb	r3, r3
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
    26b2:	2b00      	cmp	r3, #0
    26b4:	d017      	beq.n	26e6 <_usb_ep0setup+0x96>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
    26b6:	9801      	ldr	r0, [sp, #4]
    26b8:	2100      	movs	r1, #0
    26ba:	f001 f931 	bl	3920 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
    26be:	9801      	ldr	r0, [sp, #4]
    26c0:	2100      	movs	r1, #0
    26c2:	f001 f90d 	bl	38e0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
    26c6:	9b01      	ldr	r3, [sp, #4]
    26c8:	685b      	ldr	r3, [r3, #4]
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d005      	beq.n	26dc <_usb_ep0setup+0x8c>
    26d0:	9b01      	ldr	r3, [sp, #4]
    26d2:	685b      	ldr	r3, [r3, #4]
    26d4:	681b      	ldr	r3, [r3, #0]
    26d6:	9801      	ldr	r0, [sp, #4]
    26d8:	2105      	movs	r1, #5
    26da:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
    26dc:	9b01      	ldr	r3, [sp, #4]
    26de:	2206      	movs	r2, #6
    26e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return;
    26e4:	e06c      	b.n	27c0 <_usb_ep0setup+0x170>
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
    26e6:	9b01      	ldr	r3, [sp, #4]
    26e8:	334a      	adds	r3, #74	; 0x4a
    26ea:	4618      	mov	r0, r3
    26ec:	f7ff fc90 	bl	2010 <get_hword>
    26f0:	4603      	mov	r3, r0
    26f2:	9303      	str	r3, [sp, #12]
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    26f4:	9b01      	ldr	r3, [sp, #4]
    26f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    26f8:	9b03      	ldr	r3, [sp, #12]
    26fa:	429a      	cmp	r2, r3
    26fc:	d902      	bls.n	2704 <_usb_ep0setup+0xb4>
    usbp->ep0n = max;
    26fe:	9b01      	ldr	r3, [sp, #4]
    2700:	9a03      	ldr	r2, [sp, #12]
    2702:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    2704:	9b01      	ldr	r3, [sp, #4]
    2706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    270a:	b2db      	uxtb	r3, r3
    270c:	b25b      	sxtb	r3, r3
    270e:	2b00      	cmp	r3, #0
    2710:	da2b      	bge.n	276a <_usb_ep0setup+0x11a>
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
    2712:	9b01      	ldr	r3, [sp, #4]
    2714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2716:	2b00      	cmp	r3, #0
    2718:	d014      	beq.n	2744 <_usb_ep0setup+0xf4>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
    271a:	9b01      	ldr	r3, [sp, #4]
    271c:	2201      	movs	r2, #1
    271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
    2722:	9b01      	ldr	r3, [sp, #4]
    2724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2726:	9b01      	ldr	r3, [sp, #4]
    2728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    272a:	9801      	ldr	r0, [sp, #4]
    272c:	2100      	movs	r1, #0
    272e:	f7ff fecf 	bl	24d0 <usbPrepareTransmit>
      osalSysLockFromISR();
    2732:	f7ff fc5d 	bl	1ff0 <osalSysLockFromISR>
      (void) usbStartTransmitI(usbp, 0);
    2736:	9801      	ldr	r0, [sp, #4]
    2738:	2100      	movs	r1, #0
    273a:	f7ff ff21 	bl	2580 <usbStartTransmitI>
      osalSysUnlockFromISR();
    273e:	f7ff fc5f 	bl	2000 <osalSysUnlockFromISR>
    2742:	e03d      	b.n	27c0 <_usb_ep0setup+0x170>
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
    2744:	9b01      	ldr	r3, [sp, #4]
    2746:	2203      	movs	r2, #3
    2748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
    274c:	9801      	ldr	r0, [sp, #4]
    274e:	2100      	movs	r1, #0
    2750:	2200      	movs	r2, #0
    2752:	2300      	movs	r3, #0
    2754:	f7ff fe94 	bl	2480 <usbPrepareReceive>
      osalSysLockFromISR();
    2758:	f7ff fc4a 	bl	1ff0 <osalSysLockFromISR>
      (void) usbStartReceiveI(usbp, 0);
    275c:	9801      	ldr	r0, [sp, #4]
    275e:	2100      	movs	r1, #0
    2760:	f7ff fede 	bl	2520 <usbStartReceiveI>
      osalSysUnlockFromISR();
    2764:	f7ff fc4c 	bl	2000 <osalSysUnlockFromISR>
    2768:	e02a      	b.n	27c0 <_usb_ep0setup+0x170>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
    276a:	9b01      	ldr	r3, [sp, #4]
    276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    276e:	2b00      	cmp	r3, #0
    2770:	d014      	beq.n	279c <_usb_ep0setup+0x14c>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
    2772:	9b01      	ldr	r3, [sp, #4]
    2774:	2204      	movs	r2, #4
    2776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
    277a:	9b01      	ldr	r3, [sp, #4]
    277c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    277e:	9b01      	ldr	r3, [sp, #4]
    2780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2782:	9801      	ldr	r0, [sp, #4]
    2784:	2100      	movs	r1, #0
    2786:	f7ff fe7b 	bl	2480 <usbPrepareReceive>
      osalSysLockFromISR();
    278a:	f7ff fc31 	bl	1ff0 <osalSysLockFromISR>
      (void) usbStartReceiveI(usbp, 0);
    278e:	9801      	ldr	r0, [sp, #4]
    2790:	2100      	movs	r1, #0
    2792:	f7ff fec5 	bl	2520 <usbStartReceiveI>
      osalSysUnlockFromISR();
    2796:	f7ff fc33 	bl	2000 <osalSysUnlockFromISR>
    279a:	e011      	b.n	27c0 <_usb_ep0setup+0x170>
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	2205      	movs	r2, #5
    27a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
    27a4:	9801      	ldr	r0, [sp, #4]
    27a6:	2100      	movs	r1, #0
    27a8:	2200      	movs	r2, #0
    27aa:	2300      	movs	r3, #0
    27ac:	f7ff fe90 	bl	24d0 <usbPrepareTransmit>
      osalSysLockFromISR();
    27b0:	f7ff fc1e 	bl	1ff0 <osalSysLockFromISR>
      (void) usbStartTransmitI(usbp, 0);
    27b4:	9801      	ldr	r0, [sp, #4]
    27b6:	2100      	movs	r1, #0
    27b8:	f7ff fee2 	bl	2580 <usbStartTransmitI>
      osalSysUnlockFromISR();
    27bc:	f7ff fc20 	bl	2000 <osalSysUnlockFromISR>
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
    27c0:	b005      	add	sp, #20
    27c2:	f85d fb04 	ldr.w	pc, [sp], #4
    27c6:	bf00      	nop
    27c8:	f3af 8000 	nop.w
    27cc:	f3af 8000 	nop.w

000027d0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
    27d0:	b500      	push	{lr}
    27d2:	b085      	sub	sp, #20
    27d4:	9001      	str	r0, [sp, #4]
    27d6:	460b      	mov	r3, r1
    27d8:	f88d 3003 	strb.w	r3, [sp, #3]
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
    27dc:	9b01      	ldr	r3, [sp, #4]
    27de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    27e2:	2b06      	cmp	r3, #6
    27e4:	d873      	bhi.n	28ce <_usb_ep0in+0xfe>
    27e6:	a201      	add	r2, pc, #4	; (adr r2, 27ec <_usb_ep0in+0x1c>)
    27e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    27ec:	0000289f 	.word	0x0000289f
    27f0:	00002809 	.word	0x00002809
    27f4:	0000285f 	.word	0x0000285f
    27f8:	0000289f 	.word	0x0000289f
    27fc:	0000289f 	.word	0x0000289f
    2800:	00002885 	.word	0x00002885
    2804:	0000289f 	.word	0x0000289f
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    2808:	9b01      	ldr	r3, [sp, #4]
    280a:	334a      	adds	r3, #74	; 0x4a
    280c:	4618      	mov	r0, r3
    280e:	f7ff fbff 	bl	2010 <get_hword>
    2812:	4603      	mov	r3, r0
    2814:	9303      	str	r3, [sp, #12]
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
    2816:	9b01      	ldr	r3, [sp, #4]
    2818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    281a:	9b03      	ldr	r3, [sp, #12]
    281c:	429a      	cmp	r2, r3
    281e:	d21e      	bcs.n	285e <_usb_ep0in+0x8e>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
    2820:	9b01      	ldr	r3, [sp, #4]
    2822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2824:	9a01      	ldr	r2, [sp, #4]
    2826:	68d2      	ldr	r2, [r2, #12]
    2828:	8a12      	ldrh	r2, [r2, #16]
    282a:	fbb3 f1f2 	udiv	r1, r3, r2
    282e:	fb02 f201 	mul.w	r2, r2, r1
    2832:	1a9b      	subs	r3, r3, r2
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
    2834:	2b00      	cmp	r3, #0
    2836:	d112      	bne.n	285e <_usb_ep0in+0x8e>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
    2838:	9801      	ldr	r0, [sp, #4]
    283a:	2100      	movs	r1, #0
    283c:	2200      	movs	r2, #0
    283e:	2300      	movs	r3, #0
    2840:	f7ff fe46 	bl	24d0 <usbPrepareTransmit>
      osalSysLockFromISR();
    2844:	f7ff fbd4 	bl	1ff0 <osalSysLockFromISR>
      (void) usbStartTransmitI(usbp, 0);
    2848:	9801      	ldr	r0, [sp, #4]
    284a:	2100      	movs	r1, #0
    284c:	f7ff fe98 	bl	2580 <usbStartTransmitI>
      osalSysUnlockFromISR();
    2850:	f7ff fbd6 	bl	2000 <osalSysUnlockFromISR>
      usbp->ep0state = USB_EP0_WAITING_TX0;
    2854:	9b01      	ldr	r3, [sp, #4]
    2856:	2202      	movs	r2, #2
    2858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return;
    285c:	e037      	b.n	28ce <_usb_ep0in+0xfe>
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
    285e:	9b01      	ldr	r3, [sp, #4]
    2860:	2203      	movs	r2, #3
    2862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    2866:	9801      	ldr	r0, [sp, #4]
    2868:	2100      	movs	r1, #0
    286a:	2200      	movs	r2, #0
    286c:	2300      	movs	r3, #0
    286e:	f7ff fe07 	bl	2480 <usbPrepareReceive>
    osalSysLockFromISR();
    2872:	f7ff fbbd 	bl	1ff0 <osalSysLockFromISR>
    (void) usbStartReceiveI(usbp, 0);
    2876:	9801      	ldr	r0, [sp, #4]
    2878:	2100      	movs	r1, #0
    287a:	f7ff fe51 	bl	2520 <usbStartReceiveI>
    osalSysUnlockFromISR();
    287e:	f7ff fbbf 	bl	2000 <osalSysUnlockFromISR>
#else
    usb_lld_end_setup(usbp, ep);
#endif
    return;
    2882:	e024      	b.n	28ce <_usb_ep0in+0xfe>
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
    2884:	9b01      	ldr	r3, [sp, #4]
    2886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2888:	2b00      	cmp	r3, #0
    288a:	d003      	beq.n	2894 <_usb_ep0in+0xc4>
      usbp->ep0endcb(usbp);
    288c:	9b01      	ldr	r3, [sp, #4]
    288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2890:	9801      	ldr	r0, [sp, #4]
    2892:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
    2894:	9b01      	ldr	r3, [sp, #4]
    2896:	2200      	movs	r2, #0
    2898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
    289c:	e017      	b.n	28ce <_usb_ep0in+0xfe>
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    289e:	9801      	ldr	r0, [sp, #4]
    28a0:	2100      	movs	r1, #0
    28a2:	f001 f83d 	bl	3920 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
    28a6:	9801      	ldr	r0, [sp, #4]
    28a8:	2100      	movs	r1, #0
    28aa:	f001 f819 	bl	38e0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
    28ae:	9b01      	ldr	r3, [sp, #4]
    28b0:	685b      	ldr	r3, [r3, #4]
    28b2:	681b      	ldr	r3, [r3, #0]
    28b4:	2b00      	cmp	r3, #0
    28b6:	d005      	beq.n	28c4 <_usb_ep0in+0xf4>
    28b8:	9b01      	ldr	r3, [sp, #4]
    28ba:	685b      	ldr	r3, [r3, #4]
    28bc:	681b      	ldr	r3, [r3, #0]
    28be:	9801      	ldr	r0, [sp, #4]
    28c0:	2105      	movs	r1, #5
    28c2:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
    28c4:	9b01      	ldr	r3, [sp, #4]
    28c6:	2206      	movs	r2, #6
    28c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
    28cc:	bf00      	nop
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
    28ce:	b005      	add	sp, #20
    28d0:	f85d fb04 	ldr.w	pc, [sp], #4
    28d4:	f3af 8000 	nop.w
    28d8:	f3af 8000 	nop.w
    28dc:	f3af 8000 	nop.w

000028e0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
    28e0:	b500      	push	{lr}
    28e2:	b083      	sub	sp, #12
    28e4:	9001      	str	r0, [sp, #4]
    28e6:	460b      	mov	r3, r1
    28e8:	f88d 3003 	strb.w	r3, [sp, #3]

  (void)ep;
  switch (usbp->ep0state) {
    28ec:	9b01      	ldr	r3, [sp, #4]
    28ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    28f2:	2b06      	cmp	r3, #6
    28f4:	d84f      	bhi.n	2996 <_usb_ep0out+0xb6>
    28f6:	a201      	add	r2, pc, #4	; (adr r2, 28fc <_usb_ep0out+0x1c>)
    28f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    28fc:	00002967 	.word	0x00002967
    2900:	00002967 	.word	0x00002967
    2904:	00002967 	.word	0x00002967
    2908:	0000293f 	.word	0x0000293f
    290c:	00002919 	.word	0x00002919
    2910:	00002967 	.word	0x00002967
    2914:	00002967 	.word	0x00002967
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
    2918:	9b01      	ldr	r3, [sp, #4]
    291a:	2205      	movs	r2, #5
    291c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    2920:	9801      	ldr	r0, [sp, #4]
    2922:	2100      	movs	r1, #0
    2924:	2200      	movs	r2, #0
    2926:	2300      	movs	r3, #0
    2928:	f7ff fdd2 	bl	24d0 <usbPrepareTransmit>
    osalSysLockFromISR();
    292c:	f7ff fb60 	bl	1ff0 <osalSysLockFromISR>
    (void) usbStartTransmitI(usbp, 0);
    2930:	9801      	ldr	r0, [sp, #4]
    2932:	2100      	movs	r1, #0
    2934:	f7ff fe24 	bl	2580 <usbStartTransmitI>
    osalSysUnlockFromISR();
    2938:	f7ff fb62 	bl	2000 <osalSysUnlockFromISR>
#else
    usb_lld_end_setup(usbp, ep);
#endif
    return;
    293c:	e02b      	b.n	2996 <_usb_ep0out+0xb6>
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
    293e:	9b01      	ldr	r3, [sp, #4]
    2940:	68db      	ldr	r3, [r3, #12]
    2942:	699b      	ldr	r3, [r3, #24]
    2944:	689b      	ldr	r3, [r3, #8]
    2946:	2b00      	cmp	r3, #0
    2948:	d000      	beq.n	294c <_usb_ep0out+0x6c>
      break;
    294a:	e024      	b.n	2996 <_usb_ep0out+0xb6>
    }
#endif
    if (usbp->ep0endcb != NULL) {
    294c:	9b01      	ldr	r3, [sp, #4]
    294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2950:	2b00      	cmp	r3, #0
    2952:	d003      	beq.n	295c <_usb_ep0out+0x7c>
      usbp->ep0endcb(usbp);
    2954:	9b01      	ldr	r3, [sp, #4]
    2956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2958:	9801      	ldr	r0, [sp, #4]
    295a:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
    295c:	9b01      	ldr	r3, [sp, #4]
    295e:	2200      	movs	r2, #0
    2960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
    2964:	e017      	b.n	2996 <_usb_ep0out+0xb6>
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    2966:	9801      	ldr	r0, [sp, #4]
    2968:	2100      	movs	r1, #0
    296a:	f000 ffd9 	bl	3920 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
    296e:	9801      	ldr	r0, [sp, #4]
    2970:	2100      	movs	r1, #0
    2972:	f000 ffb5 	bl	38e0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
    2976:	9b01      	ldr	r3, [sp, #4]
    2978:	685b      	ldr	r3, [r3, #4]
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	2b00      	cmp	r3, #0
    297e:	d005      	beq.n	298c <_usb_ep0out+0xac>
    2980:	9b01      	ldr	r3, [sp, #4]
    2982:	685b      	ldr	r3, [r3, #4]
    2984:	681b      	ldr	r3, [r3, #0]
    2986:	9801      	ldr	r0, [sp, #4]
    2988:	2105      	movs	r1, #5
    298a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
    298c:	9b01      	ldr	r3, [sp, #4]
    298e:	2206      	movs	r2, #6
    2990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
    2994:	bf00      	nop
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
    2996:	b003      	add	sp, #12
    2998:	f85d fb04 	ldr.w	pc, [sp], #4
    299c:	f3af 8000 	nop.w

000029a0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
    29a0:	b082      	sub	sp, #8
    29a2:	9001      	str	r0, [sp, #4]
    29a4:	9100      	str	r1, [sp, #0]

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
    29a6:	4911      	ldr	r1, [pc, #68]	; (29ec <nvicEnableVector+0x4c>)
    29a8:	9b00      	ldr	r3, [sp, #0]
    29aa:	b2db      	uxtb	r3, r3
    29ac:	011b      	lsls	r3, r3, #4
    29ae:	b2da      	uxtb	r2, r3
    29b0:	9b01      	ldr	r3, [sp, #4]
    29b2:	440b      	add	r3, r1
    29b4:	f503 7340 	add.w	r3, r3, #768	; 0x300
    29b8:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
    29ba:	4b0c      	ldr	r3, [pc, #48]	; (29ec <nvicEnableVector+0x4c>)
    29bc:	9a01      	ldr	r2, [sp, #4]
    29be:	0952      	lsrs	r2, r2, #5
    29c0:	9901      	ldr	r1, [sp, #4]
    29c2:	f001 011f 	and.w	r1, r1, #31
    29c6:	2001      	movs	r0, #1
    29c8:	fa00 f101 	lsl.w	r1, r0, r1
    29cc:	3260      	adds	r2, #96	; 0x60
    29ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
    29d2:	4b06      	ldr	r3, [pc, #24]	; (29ec <nvicEnableVector+0x4c>)
    29d4:	9a01      	ldr	r2, [sp, #4]
    29d6:	0952      	lsrs	r2, r2, #5
    29d8:	9901      	ldr	r1, [sp, #4]
    29da:	f001 011f 	and.w	r1, r1, #31
    29de:	2001      	movs	r0, #1
    29e0:	fa00 f101 	lsl.w	r1, r0, r1
    29e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    29e8:	b002      	add	sp, #8
    29ea:	4770      	bx	lr
    29ec:	e000e100 	.word	0xe000e100

000029f0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
    29f0:	4b0d      	ldr	r3, [pc, #52]	; (2a28 <hal_lld_backup_domain_init+0x38>)
    29f2:	4a0d      	ldr	r2, [pc, #52]	; (2a28 <hal_lld_backup_domain_init+0x38>)
    29f4:	6812      	ldr	r2, [r2, #0]
    29f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    29fa:	601a      	str	r2, [r3, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
    29fc:	4b0b      	ldr	r3, [pc, #44]	; (2a2c <hal_lld_backup_domain_init+0x3c>)
    29fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
    2a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2a08:	d006      	beq.n	2a18 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
    2a0a:	4b08      	ldr	r3, [pc, #32]	; (2a2c <hal_lld_backup_domain_init+0x3c>)
    2a0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2a10:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
    2a12:	4b06      	ldr	r3, [pc, #24]	; (2a2c <hal_lld_backup_domain_init+0x3c>)
    2a14:	2200      	movs	r2, #0
    2a16:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
    2a18:	4b03      	ldr	r3, [pc, #12]	; (2a28 <hal_lld_backup_domain_init+0x38>)
    2a1a:	4a03      	ldr	r2, [pc, #12]	; (2a28 <hal_lld_backup_domain_init+0x38>)
    2a1c:	6852      	ldr	r2, [r2, #4]
    2a1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    2a22:	605a      	str	r2, [r3, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
    2a24:	4770      	bx	lr
    2a26:	bf00      	nop
    2a28:	40007000 	.word	0x40007000
    2a2c:	40023800 	.word	0x40023800

00002a30 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
    2a30:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
    2a32:	4b16      	ldr	r3, [pc, #88]	; (2a8c <hal_lld_init+0x5c>)
    2a34:	691b      	ldr	r3, [r3, #16]
    2a36:	4b15      	ldr	r3, [pc, #84]	; (2a8c <hal_lld_init+0x5c>)
    2a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a3c:	611a      	str	r2, [r3, #16]
    2a3e:	4b13      	ldr	r3, [pc, #76]	; (2a8c <hal_lld_init+0x5c>)
    2a40:	2200      	movs	r2, #0
    2a42:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
    2a44:	4b11      	ldr	r3, [pc, #68]	; (2a8c <hal_lld_init+0x5c>)
    2a46:	695b      	ldr	r3, [r3, #20]
    2a48:	4b10      	ldr	r3, [pc, #64]	; (2a8c <hal_lld_init+0x5c>)
    2a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a4e:	615a      	str	r2, [r3, #20]
    2a50:	4b0e      	ldr	r3, [pc, #56]	; (2a8c <hal_lld_init+0x5c>)
    2a52:	2200      	movs	r2, #0
    2a54:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
    2a56:	4b0d      	ldr	r3, [pc, #52]	; (2a8c <hal_lld_init+0x5c>)
    2a58:	4a0c      	ldr	r2, [pc, #48]	; (2a8c <hal_lld_init+0x5c>)
    2a5a:	6a12      	ldr	r2, [r2, #32]
    2a5c:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
    2a60:	621a      	str	r2, [r3, #32]
    2a62:	4b0a      	ldr	r3, [pc, #40]	; (2a8c <hal_lld_init+0x5c>)
    2a64:	2200      	movs	r2, #0
    2a66:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
    2a68:	4b08      	ldr	r3, [pc, #32]	; (2a8c <hal_lld_init+0x5c>)
    2a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2a6c:	4b07      	ldr	r3, [pc, #28]	; (2a8c <hal_lld_init+0x5c>)
    2a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a72:	625a      	str	r2, [r3, #36]	; 0x24
    2a74:	4b05      	ldr	r3, [pc, #20]	; (2a8c <hal_lld_init+0x5c>)
    2a76:	2200      	movs	r2, #0
    2a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
    2a7a:	4b04      	ldr	r3, [pc, #16]	; (2a8c <hal_lld_init+0x5c>)
    2a7c:	4a03      	ldr	r2, [pc, #12]	; (2a8c <hal_lld_init+0x5c>)
    2a7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    2a80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2a84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
    2a86:	f7ff ffb3 	bl	29f0 <hal_lld_backup_domain_init>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
    2a8a:	bd08      	pop	{r3, pc}
    2a8c:	40023800 	.word	0x40023800

00002a90 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
    2a90:	4b40      	ldr	r3, [pc, #256]	; (2b94 <stm32_clock_init+0x104>)
    2a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
    2a98:	4b3f      	ldr	r3, [pc, #252]	; (2b98 <stm32_clock_init+0x108>)
    2a9a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    2a9e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
    2aa0:	4b3c      	ldr	r3, [pc, #240]	; (2b94 <stm32_clock_init+0x104>)
    2aa2:	4a3c      	ldr	r2, [pc, #240]	; (2b94 <stm32_clock_init+0x104>)
    2aa4:	6812      	ldr	r2, [r2, #0]
    2aa6:	f042 0201 	orr.w	r2, r2, #1
    2aaa:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
    2aac:	bf00      	nop
    2aae:	4b39      	ldr	r3, [pc, #228]	; (2b94 <stm32_clock_init+0x104>)
    2ab0:	681b      	ldr	r3, [r3, #0]
    2ab2:	f003 0302 	and.w	r3, r3, #2
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	d0f9      	beq.n	2aae <stm32_clock_init+0x1e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
    2aba:	4b36      	ldr	r3, [pc, #216]	; (2b94 <stm32_clock_init+0x104>)
    2abc:	4a35      	ldr	r2, [pc, #212]	; (2b94 <stm32_clock_init+0x104>)
    2abe:	6892      	ldr	r2, [r2, #8]
    2ac0:	f022 0203 	bic.w	r2, r2, #3
    2ac4:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
    2ac6:	4b33      	ldr	r3, [pc, #204]	; (2b94 <stm32_clock_init+0x104>)
    2ac8:	4a32      	ldr	r2, [pc, #200]	; (2b94 <stm32_clock_init+0x104>)
    2aca:	6892      	ldr	r2, [r2, #8]
    2acc:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
    2ace:	bf00      	nop
    2ad0:	4b30      	ldr	r3, [pc, #192]	; (2b94 <stm32_clock_init+0x104>)
    2ad2:	689b      	ldr	r3, [r3, #8]
    2ad4:	f003 030c 	and.w	r3, r3, #12
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d1f9      	bne.n	2ad0 <stm32_clock_init+0x40>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
    2adc:	4b2d      	ldr	r3, [pc, #180]	; (2b94 <stm32_clock_init+0x104>)
    2ade:	4a2d      	ldr	r2, [pc, #180]	; (2b94 <stm32_clock_init+0x104>)
    2ae0:	6812      	ldr	r2, [r2, #0]
    2ae2:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
    2ae6:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
    2ae8:	4b2a      	ldr	r3, [pc, #168]	; (2b94 <stm32_clock_init+0x104>)
    2aea:	2200      	movs	r2, #0
    2aec:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
    2aee:	4b29      	ldr	r3, [pc, #164]	; (2b94 <stm32_clock_init+0x104>)
    2af0:	4a28      	ldr	r2, [pc, #160]	; (2b94 <stm32_clock_init+0x104>)
    2af2:	6812      	ldr	r2, [r2, #0]
    2af4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    2af8:	601a      	str	r2, [r3, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
    2afa:	bf00      	nop
    2afc:	4b25      	ldr	r3, [pc, #148]	; (2b94 <stm32_clock_init+0x104>)
    2afe:	681b      	ldr	r3, [r3, #0]
    2b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    2b04:	2b00      	cmp	r3, #0
    2b06:	d0f9      	beq.n	2afc <stm32_clock_init+0x6c>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
    2b08:	4b22      	ldr	r3, [pc, #136]	; (2b94 <stm32_clock_init+0x104>)
    2b0a:	4a22      	ldr	r2, [pc, #136]	; (2b94 <stm32_clock_init+0x104>)
    2b0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
    2b0e:	f042 0201 	orr.w	r2, r2, #1
    2b12:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
    2b14:	bf00      	nop
    2b16:	4b1f      	ldr	r3, [pc, #124]	; (2b94 <stm32_clock_init+0x104>)
    2b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    2b1a:	f003 0302 	and.w	r3, r3, #2
    2b1e:	2b00      	cmp	r3, #0
    2b20:	d0f9      	beq.n	2b16 <stm32_clock_init+0x86>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
    2b22:	4b1c      	ldr	r3, [pc, #112]	; (2b94 <stm32_clock_init+0x104>)
    2b24:	4a1d      	ldr	r2, [pc, #116]	; (2b9c <stm32_clock_init+0x10c>)
    2b26:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
    2b28:	4b1a      	ldr	r3, [pc, #104]	; (2b94 <stm32_clock_init+0x104>)
    2b2a:	4a1a      	ldr	r2, [pc, #104]	; (2b94 <stm32_clock_init+0x104>)
    2b2c:	6812      	ldr	r2, [r2, #0]
    2b2e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2b32:	601a      	str	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
    2b34:	bf00      	nop
    2b36:	4b18      	ldr	r3, [pc, #96]	; (2b98 <stm32_clock_init+0x108>)
    2b38:	685b      	ldr	r3, [r3, #4]
    2b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d0f9      	beq.n	2b36 <stm32_clock_init+0xa6>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
    2b42:	bf00      	nop
    2b44:	4b13      	ldr	r3, [pc, #76]	; (2b94 <stm32_clock_init+0x104>)
    2b46:	681b      	ldr	r3, [r3, #0]
    2b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d0f9      	beq.n	2b44 <stm32_clock_init+0xb4>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
    2b50:	4b10      	ldr	r3, [pc, #64]	; (2b94 <stm32_clock_init+0x104>)
    2b52:	4a13      	ldr	r2, [pc, #76]	; (2ba0 <stm32_clock_init+0x110>)
    2b54:	609a      	str	r2, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
    2b56:	4b13      	ldr	r3, [pc, #76]	; (2ba4 <stm32_clock_init+0x114>)
    2b58:	f240 7205 	movw	r2, #1797	; 0x705
    2b5c:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
    2b5e:	4b0d      	ldr	r3, [pc, #52]	; (2b94 <stm32_clock_init+0x104>)
    2b60:	4a0c      	ldr	r2, [pc, #48]	; (2b94 <stm32_clock_init+0x104>)
    2b62:	6892      	ldr	r2, [r2, #8]
    2b64:	f042 0202 	orr.w	r2, r2, #2
    2b68:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
    2b6a:	bf00      	nop
    2b6c:	4b09      	ldr	r3, [pc, #36]	; (2b94 <stm32_clock_init+0x104>)
    2b6e:	689b      	ldr	r3, [r3, #8]
    2b70:	f003 030c 	and.w	r3, r3, #12
    2b74:	2b08      	cmp	r3, #8
    2b76:	d1f9      	bne.n	2b6c <stm32_clock_init+0xdc>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
    2b78:	4b06      	ldr	r3, [pc, #24]	; (2b94 <stm32_clock_init+0x104>)
    2b7a:	4a06      	ldr	r2, [pc, #24]	; (2b94 <stm32_clock_init+0x104>)
    2b7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
    2b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2b82:	645a      	str	r2, [r3, #68]	; 0x44
    2b84:	4b03      	ldr	r3, [pc, #12]	; (2b94 <stm32_clock_init+0x104>)
    2b86:	4a03      	ldr	r2, [pc, #12]	; (2b94 <stm32_clock_init+0x104>)
    2b88:	6e52      	ldr	r2, [r2, #100]	; 0x64
    2b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2b8e:	665a      	str	r2, [r3, #100]	; 0x64
}
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop
    2b94:	40023800 	.word	0x40023800
    2b98:	40007000 	.word	0x40007000
    2b9c:	07405408 	.word	0x07405408
    2ba0:	38089400 	.word	0x38089400
    2ba4:	40023c00 	.word	0x40023c00
    2ba8:	f3af 8000 	nop.w
    2bac:	f3af 8000 	nop.w

00002bb0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
    2bb0:	b082      	sub	sp, #8
    2bb2:	2320      	movs	r3, #32
    2bb4:	9301      	str	r3, [sp, #4]
    2bb6:	9b01      	ldr	r3, [sp, #4]
    2bb8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    2bbc:	b002      	add	sp, #8
    2bbe:	4770      	bx	lr

00002bc0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
    2bc0:	b082      	sub	sp, #8
    2bc2:	2300      	movs	r3, #0
    2bc4:	9301      	str	r3, [sp, #4]
    2bc6:	9b01      	ldr	r3, [sp, #4]
    2bc8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    2bcc:	b002      	add	sp, #8
    2bce:	4770      	bx	lr

00002bd0 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
    2bd0:	b508      	push	{r3, lr}

  port_lock();
    2bd2:	f7ff ffed 	bl	2bb0 <port_lock>
}
    2bd6:	bd08      	pop	{r3, pc}
    2bd8:	f3af 8000 	nop.w
    2bdc:	f3af 8000 	nop.w

00002be0 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
    2be0:	b508      	push	{r3, lr}

  port_unlock();
    2be2:	f7ff ffed 	bl	2bc0 <port_unlock>
}
    2be6:	bd08      	pop	{r3, pc}
    2be8:	f3af 8000 	nop.w
    2bec:	f3af 8000 	nop.w

00002bf0 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
    2bf0:	b508      	push	{r3, lr}

  port_lock_from_isr();
    2bf2:	f7ff ffed 	bl	2bd0 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
    2bf6:	bd08      	pop	{r3, pc}
    2bf8:	f3af 8000 	nop.w
    2bfc:	f3af 8000 	nop.w

00002c00 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
    2c00:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
    2c02:	f7ff ffed 	bl	2be0 <port_unlock_from_isr>
}
    2c06:	bd08      	pop	{r3, pc}
    2c08:	f3af 8000 	nop.w
    2c0c:	f3af 8000 	nop.w

00002c10 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
    2c10:	b508      	push	{r3, lr}

  chSysLockFromISR();
    2c12:	f7ff ffed 	bl	2bf0 <chSysLockFromISR>
}
    2c16:	bd08      	pop	{r3, pc}
    2c18:	f3af 8000 	nop.w
    2c1c:	f3af 8000 	nop.w

00002c20 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
    2c20:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
    2c22:	f7ff ffed 	bl	2c00 <chSysUnlockFromISR>
}
    2c26:	bd08      	pop	{r3, pc}
    2c28:	f3af 8000 	nop.w
    2c2c:	f3af 8000 	nop.w

00002c30 <osalOsTimerHandlerI>:
 * @brief   Systick callback for the underlying OS.
 * @note    This callback is only defined if the OSAL requires such a
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {
    2c30:	b508      	push	{r3, lr}

  chSysTimerHandlerI();
    2c32:	f7fd fdb5 	bl	7a0 <chSysTimerHandlerI>
}
    2c36:	bd08      	pop	{r3, pc}
    2c38:	f3af 8000 	nop.w
    2c3c:	f3af 8000 	nop.w

00002c40 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
    2c40:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    2c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c46:	691b      	ldr	r3, [r3, #16]
    2c48:	f003 0302 	and.w	r3, r3, #2
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d009      	beq.n	2c64 <VectorB0+0x24>
    STM32_ST_TIM->SR = 0U;
    2c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c54:	2200      	movs	r2, #0
    2c56:	611a      	str	r2, [r3, #16]

    osalSysLockFromISR();
    2c58:	f7ff ffda 	bl	2c10 <osalSysLockFromISR>
    osalOsTimerHandlerI();
    2c5c:	f7ff ffe8 	bl	2c30 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
    2c60:	f7ff ffde 	bl	2c20 <osalSysUnlockFromISR>
  }

  OSAL_IRQ_EPILOGUE();
    2c64:	f7fe ff54 	bl	1b10 <_port_irq_epilogue>
}
    2c68:	bd08      	pop	{r3, pc}
    2c6a:	bf00      	nop
    2c6c:	f3af 8000 	nop.w

00002c70 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
    2c70:	b508      	push	{r3, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
    2c72:	4b19      	ldr	r3, [pc, #100]	; (2cd8 <st_lld_init+0x68>)
    2c74:	4a18      	ldr	r2, [pc, #96]	; (2cd8 <st_lld_init+0x68>)
    2c76:	6c12      	ldr	r2, [r2, #64]	; 0x40
    2c78:	f042 0201 	orr.w	r2, r2, #1
    2c7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
    2c7e:	4b17      	ldr	r3, [pc, #92]	; (2cdc <st_lld_init+0x6c>)
    2c80:	4a16      	ldr	r2, [pc, #88]	; (2cdc <st_lld_init+0x6c>)
    2c82:	6892      	ldr	r2, [r2, #8]
    2c84:	f042 0201 	orr.w	r2, r2, #1
    2c88:	609a      	str	r2, [r3, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
    2c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c8e:	f242 02cf 	movw	r2, #8399	; 0x20cf
    2c92:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
    2c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
    2c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ca2:	2200      	movs	r2, #0
    2ca4:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
    2ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2caa:	2200      	movs	r2, #0
    2cac:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
    2cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cb2:	2200      	movs	r2, #0
    2cb4:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
    2cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cba:	2200      	movs	r2, #0
    2cbc:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
    2cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cc2:	2201      	movs	r2, #1
    2cc4:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
    2cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cca:	2201      	movs	r2, #1
    2ccc:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
    2cce:	201c      	movs	r0, #28
    2cd0:	2108      	movs	r1, #8
    2cd2:	f7ff fe65 	bl	29a0 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
    2cd6:	bd08      	pop	{r3, pc}
    2cd8:	40023800 	.word	0x40023800
    2cdc:	e0042000 	.word	0xe0042000

00002ce0 <initgpio>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {
    2ce0:	b082      	sub	sp, #8
    2ce2:	9001      	str	r0, [sp, #4]
    2ce4:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
    2ce6:	9b00      	ldr	r3, [sp, #0]
    2ce8:	685a      	ldr	r2, [r3, #4]
    2cea:	9b01      	ldr	r3, [sp, #4]
    2cec:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
    2cee:	9b00      	ldr	r3, [sp, #0]
    2cf0:	689a      	ldr	r2, [r3, #8]
    2cf2:	9b01      	ldr	r3, [sp, #4]
    2cf4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
    2cf6:	9b00      	ldr	r3, [sp, #0]
    2cf8:	68da      	ldr	r2, [r3, #12]
    2cfa:	9b01      	ldr	r3, [sp, #4]
    2cfc:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
    2cfe:	9b00      	ldr	r3, [sp, #0]
    2d00:	691a      	ldr	r2, [r3, #16]
    2d02:	9b01      	ldr	r3, [sp, #4]
    2d04:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
    2d06:	9b00      	ldr	r3, [sp, #0]
    2d08:	695a      	ldr	r2, [r3, #20]
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
    2d0e:	9b00      	ldr	r3, [sp, #0]
    2d10:	699a      	ldr	r2, [r3, #24]
    2d12:	9b01      	ldr	r3, [sp, #4]
    2d14:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
    2d16:	9b00      	ldr	r3, [sp, #0]
    2d18:	681a      	ldr	r2, [r3, #0]
    2d1a:	9b01      	ldr	r3, [sp, #4]
    2d1c:	601a      	str	r2, [r3, #0]
}
    2d1e:	b002      	add	sp, #8
    2d20:	4770      	bx	lr
    2d22:	bf00      	nop
    2d24:	f3af 8000 	nop.w
    2d28:	f3af 8000 	nop.w
    2d2c:	f3af 8000 	nop.w

00002d30 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    2d30:	b500      	push	{lr}
    2d32:	b083      	sub	sp, #12
    2d34:	9001      	str	r0, [sp, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
    2d36:	4a24      	ldr	r2, [pc, #144]	; (2dc8 <_pal_lld_init+0x98>)
    2d38:	4b23      	ldr	r3, [pc, #140]	; (2dc8 <_pal_lld_init+0x98>)
    2d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d3c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2d40:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2d44:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
    2d46:	4a20      	ldr	r2, [pc, #128]	; (2dc8 <_pal_lld_init+0x98>)
    2d48:	4b1f      	ldr	r3, [pc, #124]	; (2dc8 <_pal_lld_init+0x98>)
    2d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2d4c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2d50:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2d54:	6513      	str	r3, [r2, #80]	; 0x50

  /*
   * Initial GPIO setup.
   */
#if STM32_HAS_GPIOA
  initgpio(GPIOA, &config->PAData);
    2d56:	9b01      	ldr	r3, [sp, #4]
    2d58:	481c      	ldr	r0, [pc, #112]	; (2dcc <_pal_lld_init+0x9c>)
    2d5a:	4619      	mov	r1, r3
    2d5c:	f7ff ffc0 	bl	2ce0 <initgpio>
#endif
#if STM32_HAS_GPIOB
  initgpio(GPIOB, &config->PBData);
    2d60:	9b01      	ldr	r3, [sp, #4]
    2d62:	331c      	adds	r3, #28
    2d64:	481a      	ldr	r0, [pc, #104]	; (2dd0 <_pal_lld_init+0xa0>)
    2d66:	4619      	mov	r1, r3
    2d68:	f7ff ffba 	bl	2ce0 <initgpio>
#endif
#if STM32_HAS_GPIOC
  initgpio(GPIOC, &config->PCData);
    2d6c:	9b01      	ldr	r3, [sp, #4]
    2d6e:	3338      	adds	r3, #56	; 0x38
    2d70:	4818      	ldr	r0, [pc, #96]	; (2dd4 <_pal_lld_init+0xa4>)
    2d72:	4619      	mov	r1, r3
    2d74:	f7ff ffb4 	bl	2ce0 <initgpio>
#endif
#if STM32_HAS_GPIOD
  initgpio(GPIOD, &config->PDData);
    2d78:	9b01      	ldr	r3, [sp, #4]
    2d7a:	3354      	adds	r3, #84	; 0x54
    2d7c:	4816      	ldr	r0, [pc, #88]	; (2dd8 <_pal_lld_init+0xa8>)
    2d7e:	4619      	mov	r1, r3
    2d80:	f7ff ffae 	bl	2ce0 <initgpio>
#endif
#if STM32_HAS_GPIOE
  initgpio(GPIOE, &config->PEData);
    2d84:	9b01      	ldr	r3, [sp, #4]
    2d86:	3370      	adds	r3, #112	; 0x70
    2d88:	4814      	ldr	r0, [pc, #80]	; (2ddc <_pal_lld_init+0xac>)
    2d8a:	4619      	mov	r1, r3
    2d8c:	f7ff ffa8 	bl	2ce0 <initgpio>
#endif
#if STM32_HAS_GPIOF
  initgpio(GPIOF, &config->PFData);
    2d90:	9b01      	ldr	r3, [sp, #4]
    2d92:	338c      	adds	r3, #140	; 0x8c
    2d94:	4812      	ldr	r0, [pc, #72]	; (2de0 <_pal_lld_init+0xb0>)
    2d96:	4619      	mov	r1, r3
    2d98:	f7ff ffa2 	bl	2ce0 <initgpio>
#endif
#if STM32_HAS_GPIOG
  initgpio(GPIOG, &config->PGData);
    2d9c:	9b01      	ldr	r3, [sp, #4]
    2d9e:	33a8      	adds	r3, #168	; 0xa8
    2da0:	4810      	ldr	r0, [pc, #64]	; (2de4 <_pal_lld_init+0xb4>)
    2da2:	4619      	mov	r1, r3
    2da4:	f7ff ff9c 	bl	2ce0 <initgpio>
#endif
#if STM32_HAS_GPIOH
  initgpio(GPIOH, &config->PHData);
    2da8:	9b01      	ldr	r3, [sp, #4]
    2daa:	33c4      	adds	r3, #196	; 0xc4
    2dac:	480e      	ldr	r0, [pc, #56]	; (2de8 <_pal_lld_init+0xb8>)
    2dae:	4619      	mov	r1, r3
    2db0:	f7ff ff96 	bl	2ce0 <initgpio>
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
    2db4:	9b01      	ldr	r3, [sp, #4]
    2db6:	33e0      	adds	r3, #224	; 0xe0
    2db8:	480c      	ldr	r0, [pc, #48]	; (2dec <_pal_lld_init+0xbc>)
    2dba:	4619      	mov	r1, r3
    2dbc:	f7ff ff90 	bl	2ce0 <initgpio>
  initgpio(GPIOJ, &config->PJData);
#endif
#if STM32_HAS_GPIOK
  initgpio(GPIOK, &config->PKData);
#endif
}
    2dc0:	b003      	add	sp, #12
    2dc2:	f85d fb04 	ldr.w	pc, [sp], #4
    2dc6:	bf00      	nop
    2dc8:	40023800 	.word	0x40023800
    2dcc:	40020000 	.word	0x40020000
    2dd0:	40020400 	.word	0x40020400
    2dd4:	40020800 	.word	0x40020800
    2dd8:	40020c00 	.word	0x40020c00
    2ddc:	40021000 	.word	0x40021000
    2de0:	40021400 	.word	0x40021400
    2de4:	40021800 	.word	0x40021800
    2de8:	40021c00 	.word	0x40021c00
    2dec:	40022000 	.word	0x40022000

00002df0 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
    2df0:	b08e      	sub	sp, #56	; 0x38
    2df2:	9003      	str	r0, [sp, #12]
    2df4:	9102      	str	r1, [sp, #8]
    2df6:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
    2df8:	9b01      	ldr	r3, [sp, #4]
    2dfa:	f003 0303 	and.w	r3, r3, #3
    2dfe:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
    2e00:	9b01      	ldr	r3, [sp, #4]
    2e02:	f003 0304 	and.w	r3, r3, #4
    2e06:	089b      	lsrs	r3, r3, #2
    2e08:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
    2e0a:	9b01      	ldr	r3, [sp, #4]
    2e0c:	f003 0318 	and.w	r3, r3, #24
    2e10:	08db      	lsrs	r3, r3, #3
    2e12:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
    2e14:	9b01      	ldr	r3, [sp, #4]
    2e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
    2e1a:	095b      	lsrs	r3, r3, #5
    2e1c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
    2e1e:	9b01      	ldr	r3, [sp, #4]
    2e20:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    2e24:	09db      	lsrs	r3, r3, #7
    2e26:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
    2e28:	2300      	movs	r3, #0
    2e2a:	9309      	str	r3, [sp, #36]	; 0x24
  while (TRUE) {
    if ((mask & 1) != 0) {
    2e2c:	9b02      	ldr	r3, [sp, #8]
    2e2e:	f003 0301 	and.w	r3, r3, #1
    2e32:	2b00      	cmp	r3, #0
    2e34:	d054      	beq.n	2ee0 <_pal_lld_setgroupmode+0xf0>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
    2e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e38:	f003 0307 	and.w	r3, r3, #7
    2e3c:	009b      	lsls	r3, r3, #2
    2e3e:	9a08      	ldr	r2, [sp, #32]
    2e40:	fa02 f303 	lsl.w	r3, r2, r3
    2e44:	9307      	str	r3, [sp, #28]
      m4 = 15 << ((bit & 7) * 4);
    2e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e48:	f003 0307 	and.w	r3, r3, #7
    2e4c:	009b      	lsls	r3, r3, #2
    2e4e:	220f      	movs	r2, #15
    2e50:	fa02 f303 	lsl.w	r3, r2, r3
    2e54:	9306      	str	r3, [sp, #24]
      if (bit < 8)
    2e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e58:	2b07      	cmp	r3, #7
    2e5a:	d809      	bhi.n	2e70 <_pal_lld_setgroupmode+0x80>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
    2e5c:	9b03      	ldr	r3, [sp, #12]
    2e5e:	6a1a      	ldr	r2, [r3, #32]
    2e60:	9b06      	ldr	r3, [sp, #24]
    2e62:	43db      	mvns	r3, r3
    2e64:	401a      	ands	r2, r3
    2e66:	9b07      	ldr	r3, [sp, #28]
    2e68:	431a      	orrs	r2, r3
    2e6a:	9b03      	ldr	r3, [sp, #12]
    2e6c:	621a      	str	r2, [r3, #32]
    2e6e:	e008      	b.n	2e82 <_pal_lld_setgroupmode+0x92>
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
    2e70:	9b03      	ldr	r3, [sp, #12]
    2e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2e74:	9b06      	ldr	r3, [sp, #24]
    2e76:	43db      	mvns	r3, r3
    2e78:	401a      	ands	r2, r3
    2e7a:	9b07      	ldr	r3, [sp, #28]
    2e7c:	431a      	orrs	r2, r3
    2e7e:	9b03      	ldr	r3, [sp, #12]
    2e80:	625a      	str	r2, [r3, #36]	; 0x24
      m1 = 1 << bit;
    2e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e84:	2201      	movs	r2, #1
    2e86:	fa02 f303 	lsl.w	r3, r2, r3
    2e8a:	9305      	str	r3, [sp, #20]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
    2e8c:	9b03      	ldr	r3, [sp, #12]
    2e8e:	685a      	ldr	r2, [r3, #4]
    2e90:	9b05      	ldr	r3, [sp, #20]
    2e92:	43db      	mvns	r3, r3
    2e94:	401a      	ands	r2, r3
    2e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2e98:	431a      	orrs	r2, r3
    2e9a:	9b03      	ldr	r3, [sp, #12]
    2e9c:	605a      	str	r2, [r3, #4]
      m2 = 3 << (bit * 2);
    2e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ea0:	005b      	lsls	r3, r3, #1
    2ea2:	2203      	movs	r2, #3
    2ea4:	fa02 f303 	lsl.w	r3, r2, r3
    2ea8:	9304      	str	r3, [sp, #16]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
    2eaa:	9b03      	ldr	r3, [sp, #12]
    2eac:	689a      	ldr	r2, [r3, #8]
    2eae:	9b04      	ldr	r3, [sp, #16]
    2eb0:	43db      	mvns	r3, r3
    2eb2:	401a      	ands	r2, r3
    2eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2eb6:	431a      	orrs	r2, r3
    2eb8:	9b03      	ldr	r3, [sp, #12]
    2eba:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
    2ebc:	9b03      	ldr	r3, [sp, #12]
    2ebe:	68da      	ldr	r2, [r3, #12]
    2ec0:	9b04      	ldr	r3, [sp, #16]
    2ec2:	43db      	mvns	r3, r3
    2ec4:	401a      	ands	r2, r3
    2ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2ec8:	431a      	orrs	r2, r3
    2eca:	9b03      	ldr	r3, [sp, #12]
    2ecc:	60da      	str	r2, [r3, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
    2ece:	9b03      	ldr	r3, [sp, #12]
    2ed0:	681a      	ldr	r2, [r3, #0]
    2ed2:	9b04      	ldr	r3, [sp, #16]
    2ed4:	43db      	mvns	r3, r3
    2ed6:	401a      	ands	r2, r3
    2ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2eda:	431a      	orrs	r2, r3
    2edc:	9b03      	ldr	r3, [sp, #12]
    2ede:	601a      	str	r2, [r3, #0]
    }
    mask >>= 1;
    2ee0:	9b02      	ldr	r3, [sp, #8]
    2ee2:	085b      	lsrs	r3, r3, #1
    2ee4:	9302      	str	r3, [sp, #8]
    if (!mask)
    2ee6:	9b02      	ldr	r3, [sp, #8]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d100      	bne.n	2eee <_pal_lld_setgroupmode+0xfe>
      return;
    2eec:	e00f      	b.n	2f0e <_pal_lld_setgroupmode+0x11e>
    otyper <<= 1;
    2eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ef0:	005b      	lsls	r3, r3, #1
    2ef2:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
    2ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2ef6:	009b      	lsls	r3, r3, #2
    2ef8:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
    2efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2efc:	009b      	lsls	r3, r3, #2
    2efe:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
    2f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2f02:	009b      	lsls	r3, r3, #2
    2f04:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
    2f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f08:	3301      	adds	r3, #1
    2f0a:	9309      	str	r3, [sp, #36]	; 0x24
  }
    2f0c:	e78e      	b.n	2e2c <_pal_lld_setgroupmode+0x3c>
}
    2f0e:	b00e      	add	sp, #56	; 0x38
    2f10:	4770      	bx	lr
    2f12:	bf00      	nop
    2f14:	f3af 8000 	nop.w
    2f18:	f3af 8000 	nop.w
    2f1c:	f3af 8000 	nop.w

00002f20 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
    2f20:	b082      	sub	sp, #8
    2f22:	2320      	movs	r3, #32
    2f24:	9301      	str	r3, [sp, #4]
    2f26:	9b01      	ldr	r3, [sp, #4]
    2f28:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    2f2c:	b002      	add	sp, #8
    2f2e:	4770      	bx	lr

00002f30 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
    2f30:	b082      	sub	sp, #8
    2f32:	2300      	movs	r3, #0
    2f34:	9301      	str	r3, [sp, #4]
    2f36:	9b01      	ldr	r3, [sp, #4]
    2f38:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    2f3c:	b002      	add	sp, #8
    2f3e:	4770      	bx	lr

00002f40 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
    2f40:	b508      	push	{r3, lr}

  port_lock();
    2f42:	f7ff ffed 	bl	2f20 <port_lock>
}
    2f46:	bd08      	pop	{r3, pc}
    2f48:	f3af 8000 	nop.w
    2f4c:	f3af 8000 	nop.w

00002f50 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
    2f50:	b508      	push	{r3, lr}

  port_unlock();
    2f52:	f7ff ffed 	bl	2f30 <port_unlock>
}
    2f56:	bd08      	pop	{r3, pc}
    2f58:	f3af 8000 	nop.w
    2f5c:	f3af 8000 	nop.w

00002f60 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
    2f60:	b508      	push	{r3, lr}

  port_lock_from_isr();
    2f62:	f7ff ffed 	bl	2f40 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
    2f66:	bd08      	pop	{r3, pc}
    2f68:	f3af 8000 	nop.w
    2f6c:	f3af 8000 	nop.w

00002f70 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
    2f70:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
    2f72:	f7ff ffed 	bl	2f50 <port_unlock_from_isr>
}
    2f76:	bd08      	pop	{r3, pc}
    2f78:	f3af 8000 	nop.w
    2f7c:	f3af 8000 	nop.w

00002f80 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
    2f80:	b508      	push	{r3, lr}

  chSysLockFromISR();
    2f82:	f7ff ffed 	bl	2f60 <chSysLockFromISR>
}
    2f86:	bd08      	pop	{r3, pc}
    2f88:	f3af 8000 	nop.w
    2f8c:	f3af 8000 	nop.w

00002f90 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
    2f90:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
    2f92:	f7ff ffed 	bl	2f70 <chSysUnlockFromISR>
}
    2f96:	bd08      	pop	{r3, pc}
    2f98:	f3af 8000 	nop.w
    2f9c:	f3af 8000 	nop.w

00002fa0 <osalSysPolledDelayX>:
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {
    2fa0:	b500      	push	{lr}
    2fa2:	b083      	sub	sp, #12
    2fa4:	9001      	str	r0, [sp, #4]

  chSysPolledDelayX(cycles);
    2fa6:	9801      	ldr	r0, [sp, #4]
    2fa8:	f7fd fc1a 	bl	7e0 <chSysPolledDelayX>
}
    2fac:	b003      	add	sp, #12
    2fae:	f85d fb04 	ldr.w	pc, [sp], #4
    2fb2:	bf00      	nop
    2fb4:	f3af 8000 	nop.w
    2fb8:	f3af 8000 	nop.w
    2fbc:	f3af 8000 	nop.w

00002fc0 <osalThreadResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
    2fc0:	b500      	push	{lr}
    2fc2:	b083      	sub	sp, #12
    2fc4:	9001      	str	r0, [sp, #4]
    2fc6:	9100      	str	r1, [sp, #0]

  chThdResumeI(trp, msg);
    2fc8:	9801      	ldr	r0, [sp, #4]
    2fca:	9900      	ldr	r1, [sp, #0]
    2fcc:	f7fe f8f0 	bl	11b0 <chThdResumeI>
}
    2fd0:	b003      	add	sp, #12
    2fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    2fd6:	bf00      	nop
    2fd8:	f3af 8000 	nop.w
    2fdc:	f3af 8000 	nop.w

00002fe0 <otg_rxfifo_flush>:
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
}

static void otg_rxfifo_flush(USBDriver *usbp) {
    2fe0:	b500      	push	{lr}
    2fe2:	b085      	sub	sp, #20
    2fe4:	9001      	str	r0, [sp, #4]
  stm32_otg_t *otgp = usbp->otg;
    2fe6:	9b01      	ldr	r3, [sp, #4]
    2fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2fea:	9303      	str	r3, [sp, #12]

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
    2fec:	9b03      	ldr	r3, [sp, #12]
    2fee:	2210      	movs	r2, #16
    2ff0:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
    2ff2:	bf00      	nop
    2ff4:	9b03      	ldr	r3, [sp, #12]
    2ff6:	691b      	ldr	r3, [r3, #16]
    2ff8:	f003 0310 	and.w	r3, r3, #16
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d1f9      	bne.n	2ff4 <otg_rxfifo_flush+0x14>
    ;
  /* Wait for 3 PHY Clocks.*/
  osalSysPolledDelayX(12);
    3000:	200c      	movs	r0, #12
    3002:	f7ff ffcd 	bl	2fa0 <osalSysPolledDelayX>
}
    3006:	b005      	add	sp, #20
    3008:	f85d fb04 	ldr.w	pc, [sp], #4
    300c:	f3af 8000 	nop.w

00003010 <otg_txfifo_flush>:

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
    3010:	b500      	push	{lr}
    3012:	b085      	sub	sp, #20
    3014:	9001      	str	r0, [sp, #4]
    3016:	9100      	str	r1, [sp, #0]
  stm32_otg_t *otgp = usbp->otg;
    3018:	9b01      	ldr	r3, [sp, #4]
    301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    301c:	9303      	str	r3, [sp, #12]

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
    301e:	9b00      	ldr	r3, [sp, #0]
    3020:	019b      	lsls	r3, r3, #6
    3022:	f043 0220 	orr.w	r2, r3, #32
    3026:	9b03      	ldr	r3, [sp, #12]
    3028:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
    302a:	bf00      	nop
    302c:	9b03      	ldr	r3, [sp, #12]
    302e:	691b      	ldr	r3, [r3, #16]
    3030:	f003 0320 	and.w	r3, r3, #32
    3034:	2b00      	cmp	r3, #0
    3036:	d1f9      	bne.n	302c <otg_txfifo_flush+0x1c>
    ;
  /* Wait for 3 PHY Clocks.*/
  osalSysPolledDelayX(12);
    3038:	200c      	movs	r0, #12
    303a:	f7ff ffb1 	bl	2fa0 <osalSysPolledDelayX>
}
    303e:	b005      	add	sp, #20
    3040:	f85d fb04 	ldr.w	pc, [sp], #4
    3044:	f3af 8000 	nop.w
    3048:	f3af 8000 	nop.w
    304c:	f3af 8000 	nop.w

00003050 <otg_ram_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {
    3050:	b082      	sub	sp, #8
    3052:	9001      	str	r0, [sp, #4]

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
    3054:	9b01      	ldr	r3, [sp, #4]
    3056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3058:	681a      	ldr	r2, [r3, #0]
    305a:	9b01      	ldr	r3, [sp, #4]
    305c:	659a      	str	r2, [r3, #88]	; 0x58
}
    305e:	b002      	add	sp, #8
    3060:	4770      	bx	lr
    3062:	bf00      	nop
    3064:	f3af 8000 	nop.w
    3068:	f3af 8000 	nop.w
    306c:	f3af 8000 	nop.w

00003070 <otg_ram_alloc>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] size      size of the packet buffer to allocate in words
 *
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
    3070:	b084      	sub	sp, #16
    3072:	9001      	str	r0, [sp, #4]
    3074:	9100      	str	r1, [sp, #0]
  uint32_t next;

  next = usbp->pmnext;
    3076:	9b01      	ldr	r3, [sp, #4]
    3078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    307a:	9303      	str	r3, [sp, #12]
  usbp->pmnext += size;
    307c:	9b01      	ldr	r3, [sp, #4]
    307e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    3080:	9b00      	ldr	r3, [sp, #0]
    3082:	441a      	add	r2, r3
    3084:	9b01      	ldr	r3, [sp, #4]
    3086:	659a      	str	r2, [r3, #88]	; 0x58
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
                "OTG FIFO memory overflow");
  return next;
    3088:	9b03      	ldr	r3, [sp, #12]
}
    308a:	4618      	mov	r0, r3
    308c:	b004      	add	sp, #16
    308e:	4770      	bx	lr

00003090 <otg_epin_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
    3090:	b500      	push	{lr}
    3092:	b087      	sub	sp, #28
    3094:	9001      	str	r0, [sp, #4]
    3096:	460b      	mov	r3, r1
    3098:	f88d 3003 	strb.w	r3, [sp, #3]
  stm32_otg_t *otgp = usbp->otg;
    309c:	9b01      	ldr	r3, [sp, #4]
    309e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    30a0:	9305      	str	r3, [sp, #20]
  uint32_t epint = otgp->ie[ep].DIEPINT;
    30a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    30a6:	9a05      	ldr	r2, [sp, #20]
    30a8:	015b      	lsls	r3, r3, #5
    30aa:	4413      	add	r3, r2
    30ac:	f603 1308 	addw	r3, r3, #2312	; 0x908
    30b0:	681b      	ldr	r3, [r3, #0]
    30b2:	9304      	str	r3, [sp, #16]

  otgp->ie[ep].DIEPINT = epint;
    30b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    30b8:	9a05      	ldr	r2, [sp, #20]
    30ba:	015b      	lsls	r3, r3, #5
    30bc:	4413      	add	r3, r2
    30be:	f603 1308 	addw	r3, r3, #2312	; 0x908
    30c2:	9a04      	ldr	r2, [sp, #16]
    30c4:	601a      	str	r2, [r3, #0]

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    30c6:	9b04      	ldr	r3, [sp, #16]
    30c8:	f003 0301 	and.w	r3, r3, #1
    30cc:	2b00      	cmp	r3, #0
    30ce:	d04d      	beq.n	316c <otg_epin_handler+0xdc>
    30d0:	9b05      	ldr	r3, [sp, #20]
    30d2:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
    30d6:	f003 0301 	and.w	r3, r3, #1
    30da:	2b00      	cmp	r3, #0
    30dc:	d046      	beq.n	316c <otg_epin_handler+0xdc>
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
    30de:	f89d 3003 	ldrb.w	r3, [sp, #3]
    30e2:	9a01      	ldr	r2, [sp, #4]
    30e4:	3302      	adds	r3, #2
    30e6:	009b      	lsls	r3, r3, #2
    30e8:	4413      	add	r3, r2
    30ea:	685b      	ldr	r3, [r3, #4]
    30ec:	695b      	ldr	r3, [r3, #20]
    30ee:	9303      	str	r3, [sp, #12]

    if (isp->txsize < isp->totsize) {
    30f0:	9b03      	ldr	r3, [sp, #12]
    30f2:	685a      	ldr	r2, [r3, #4]
    30f4:	9b03      	ldr	r3, [sp, #12]
    30f6:	691b      	ldr	r3, [r3, #16]
    30f8:	429a      	cmp	r2, r3
    30fa:	d21a      	bcs.n	3132 <otg_epin_handler+0xa2>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
    30fc:	9b03      	ldr	r3, [sp, #12]
    30fe:	691a      	ldr	r2, [r3, #16]
    3100:	9b03      	ldr	r3, [sp, #12]
    3102:	685b      	ldr	r3, [r3, #4]
    3104:	1ad2      	subs	r2, r2, r3
    3106:	9b03      	ldr	r3, [sp, #12]
    3108:	605a      	str	r2, [r3, #4]
      isp->txcnt  = 0;
    310a:	9b03      	ldr	r3, [sp, #12]
    310c:	2200      	movs	r2, #0
    310e:	609a      	str	r2, [r3, #8]
      usb_lld_prepare_transmit(usbp, ep);
    3110:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3114:	9801      	ldr	r0, [sp, #4]
    3116:	4619      	mov	r1, r3
    3118:	f000 fb42 	bl	37a0 <usb_lld_prepare_transmit>
      osalSysLockFromISR();
    311c:	f7ff ff30 	bl	2f80 <osalSysLockFromISR>
      usb_lld_start_in(usbp, ep);
    3120:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3124:	9801      	ldr	r0, [sp, #4]
    3126:	4619      	mov	r1, r3
    3128:	f000 fbb2 	bl	3890 <usb_lld_start_in>
      osalSysUnlockFromISR();
    312c:	f7ff ff30 	bl	2f90 <osalSysUnlockFromISR>
    3130:	e01c      	b.n	316c <otg_epin_handler+0xdc>
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    3132:	9b01      	ldr	r3, [sp, #4]
    3134:	891b      	ldrh	r3, [r3, #8]
    3136:	b29a      	uxth	r2, r3
    3138:	f89d 3003 	ldrb.w	r3, [sp, #3]
    313c:	2101      	movs	r1, #1
    313e:	fa01 f303 	lsl.w	r3, r1, r3
    3142:	b29b      	uxth	r3, r3
    3144:	43db      	mvns	r3, r3
    3146:	b29b      	uxth	r3, r3
    3148:	4013      	ands	r3, r2
    314a:	b29b      	uxth	r3, r3
    314c:	b29a      	uxth	r2, r3
    314e:	9b01      	ldr	r3, [sp, #4]
    3150:	811a      	strh	r2, [r3, #8]
    3152:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3156:	9a01      	ldr	r2, [sp, #4]
    3158:	3302      	adds	r3, #2
    315a:	009b      	lsls	r3, r3, #2
    315c:	4413      	add	r3, r2
    315e:	685b      	ldr	r3, [r3, #4]
    3160:	689b      	ldr	r3, [r3, #8]
    3162:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3166:	9801      	ldr	r0, [sp, #4]
    3168:	4611      	mov	r1, r2
    316a:	4798      	blx	r3
    }
  }
  if ((epint & DIEPINT_TXFE) &&
    316c:	9b04      	ldr	r3, [sp, #16]
    316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3172:	2b00      	cmp	r3, #0
    3174:	d02b      	beq.n	31ce <otg_epin_handler+0x13e>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    3176:	9b05      	ldr	r3, [sp, #20]
    3178:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    317c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3180:	2101      	movs	r1, #1
    3182:	fa01 f303 	lsl.w	r3, r1, r3
    3186:	4013      	ands	r3, r2
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
    3188:	2b00      	cmp	r3, #0
    318a:	d020      	beq.n	31ce <otg_epin_handler+0x13e>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    318c:	f7ff fef8 	bl	2f80 <osalSysLockFromISR>
    usbp->txpending |= (1 << ep);
    3190:	9b01      	ldr	r3, [sp, #4]
    3192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    3194:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3198:	2101      	movs	r1, #1
    319a:	fa01 f303 	lsl.w	r3, r1, r3
    319e:	431a      	orrs	r2, r3
    31a0:	9b01      	ldr	r3, [sp, #4]
    31a2:	65da      	str	r2, [r3, #92]	; 0x5c
    otgp->DIEPEMPMSK &= ~(1 << ep);
    31a4:	9b05      	ldr	r3, [sp, #20]
    31a6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    31aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    31ae:	2101      	movs	r1, #1
    31b0:	fa01 f303 	lsl.w	r3, r1, r3
    31b4:	43db      	mvns	r3, r3
    31b6:	401a      	ands	r2, r3
    31b8:	9b05      	ldr	r3, [sp, #20]
    31ba:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    osalThreadResumeI(&usbp->wait, MSG_OK);
    31be:	9b01      	ldr	r3, [sp, #4]
    31c0:	3360      	adds	r3, #96	; 0x60
    31c2:	4618      	mov	r0, r3
    31c4:	2100      	movs	r1, #0
    31c6:	f7ff fefb 	bl	2fc0 <osalThreadResumeI>
    osalSysUnlockFromISR();
    31ca:	f7ff fee1 	bl	2f90 <osalSysUnlockFromISR>
  }
}
    31ce:	b007      	add	sp, #28
    31d0:	f85d fb04 	ldr.w	pc, [sp], #4
    31d4:	f3af 8000 	nop.w
    31d8:	f3af 8000 	nop.w
    31dc:	f3af 8000 	nop.w

000031e0 <otg_epout_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
    31e0:	b500      	push	{lr}
    31e2:	b087      	sub	sp, #28
    31e4:	9001      	str	r0, [sp, #4]
    31e6:	460b      	mov	r3, r1
    31e8:	f88d 3003 	strb.w	r3, [sp, #3]
  stm32_otg_t *otgp = usbp->otg;
    31ec:	9b01      	ldr	r3, [sp, #4]
    31ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    31f0:	9305      	str	r3, [sp, #20]
  uint32_t epint = otgp->oe[ep].DOEPINT;
    31f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    31f6:	9a05      	ldr	r2, [sp, #20]
    31f8:	015b      	lsls	r3, r3, #5
    31fa:	4413      	add	r3, r2
    31fc:	f603 3308 	addw	r3, r3, #2824	; 0xb08
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	9304      	str	r3, [sp, #16]

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
    3204:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3208:	9a05      	ldr	r2, [sp, #20]
    320a:	015b      	lsls	r3, r3, #5
    320c:	4413      	add	r3, r2
    320e:	f603 3308 	addw	r3, r3, #2824	; 0xb08
    3212:	9a04      	ldr	r2, [sp, #16]
    3214:	601a      	str	r2, [r3, #0]

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    3216:	9b04      	ldr	r3, [sp, #16]
    3218:	f003 0308 	and.w	r3, r3, #8
    321c:	2b00      	cmp	r3, #0
    321e:	d013      	beq.n	3248 <otg_epout_handler+0x68>
    3220:	9b05      	ldr	r3, [sp, #20]
    3222:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
    3226:	f003 0308 	and.w	r3, r3, #8
    322a:	2b00      	cmp	r3, #0
    322c:	d00c      	beq.n	3248 <otg_epout_handler+0x68>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
    322e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3232:	9a01      	ldr	r2, [sp, #4]
    3234:	3302      	adds	r3, #2
    3236:	009b      	lsls	r3, r3, #2
    3238:	4413      	add	r3, r2
    323a:	685b      	ldr	r3, [r3, #4]
    323c:	685b      	ldr	r3, [r3, #4]
    323e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3242:	9801      	ldr	r0, [sp, #4]
    3244:	4611      	mov	r1, r2
    3246:	4798      	blx	r3

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
    3248:	9b04      	ldr	r3, [sp, #16]
    324a:	f003 0301 	and.w	r3, r3, #1
    324e:	2b00      	cmp	r3, #0
    3250:	d04d      	beq.n	32ee <otg_epout_handler+0x10e>
    3252:	9b05      	ldr	r3, [sp, #20]
    3254:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
    3258:	f003 0301 	and.w	r3, r3, #1
    325c:	2b00      	cmp	r3, #0
    325e:	d046      	beq.n	32ee <otg_epout_handler+0x10e>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
    3260:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3264:	9a01      	ldr	r2, [sp, #4]
    3266:	3302      	adds	r3, #2
    3268:	009b      	lsls	r3, r3, #2
    326a:	4413      	add	r3, r2
    326c:	685b      	ldr	r3, [r3, #4]
    326e:	699b      	ldr	r3, [r3, #24]
    3270:	9303      	str	r3, [sp, #12]

    if (osp->rxsize < osp->totsize) {
    3272:	9b03      	ldr	r3, [sp, #12]
    3274:	685a      	ldr	r2, [r3, #4]
    3276:	9b03      	ldr	r3, [sp, #12]
    3278:	691b      	ldr	r3, [r3, #16]
    327a:	429a      	cmp	r2, r3
    327c:	d21a      	bcs.n	32b4 <otg_epout_handler+0xd4>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
    327e:	9b03      	ldr	r3, [sp, #12]
    3280:	691a      	ldr	r2, [r3, #16]
    3282:	9b03      	ldr	r3, [sp, #12]
    3284:	685b      	ldr	r3, [r3, #4]
    3286:	1ad2      	subs	r2, r2, r3
    3288:	9b03      	ldr	r3, [sp, #12]
    328a:	605a      	str	r2, [r3, #4]
      osp->rxcnt  = 0;
    328c:	9b03      	ldr	r3, [sp, #12]
    328e:	2200      	movs	r2, #0
    3290:	609a      	str	r2, [r3, #8]
      usb_lld_prepare_receive(usbp, ep);
    3292:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3296:	9801      	ldr	r0, [sp, #4]
    3298:	4619      	mov	r1, r3
    329a:	f000 fa39 	bl	3710 <usb_lld_prepare_receive>
      chSysLockFromISR();
    329e:	f7ff fe5f 	bl	2f60 <chSysLockFromISR>
      usb_lld_start_out(usbp, ep);
    32a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    32a6:	9801      	ldr	r0, [sp, #4]
    32a8:	4619      	mov	r1, r3
    32aa:	f000 fad1 	bl	3850 <usb_lld_start_out>
      chSysUnlockFromISR();
    32ae:	f7ff fe5f 	bl	2f70 <chSysUnlockFromISR>
    32b2:	e01c      	b.n	32ee <otg_epout_handler+0x10e>
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
    32b4:	9b01      	ldr	r3, [sp, #4]
    32b6:	895b      	ldrh	r3, [r3, #10]
    32b8:	b29a      	uxth	r2, r3
    32ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    32be:	2101      	movs	r1, #1
    32c0:	fa01 f303 	lsl.w	r3, r1, r3
    32c4:	b29b      	uxth	r3, r3
    32c6:	43db      	mvns	r3, r3
    32c8:	b29b      	uxth	r3, r3
    32ca:	4013      	ands	r3, r2
    32cc:	b29b      	uxth	r3, r3
    32ce:	b29a      	uxth	r2, r3
    32d0:	9b01      	ldr	r3, [sp, #4]
    32d2:	815a      	strh	r2, [r3, #10]
    32d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    32d8:	9a01      	ldr	r2, [sp, #4]
    32da:	3302      	adds	r3, #2
    32dc:	009b      	lsls	r3, r3, #2
    32de:	4413      	add	r3, r2
    32e0:	685b      	ldr	r3, [r3, #4]
    32e2:	68db      	ldr	r3, [r3, #12]
    32e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    32e8:	9801      	ldr	r0, [sp, #4]
    32ea:	4611      	mov	r1, r2
    32ec:	4798      	blx	r3
    }
  }
}
    32ee:	b007      	add	sp, #28
    32f0:	f85d fb04 	ldr.w	pc, [sp], #4
    32f4:	f3af 8000 	nop.w
    32f8:	f3af 8000 	nop.w
    32fc:	f3af 8000 	nop.w

00003300 <usb_lld_serve_interrupt>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
    3300:	b500      	push	{lr}
    3302:	b087      	sub	sp, #28
    3304:	9001      	str	r0, [sp, #4]
  stm32_otg_t *otgp = usbp->otg;
    3306:	9b01      	ldr	r3, [sp, #4]
    3308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    330a:	9305      	str	r3, [sp, #20]
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
    330c:	9b05      	ldr	r3, [sp, #20]
    330e:	695b      	ldr	r3, [r3, #20]
    3310:	9304      	str	r3, [sp, #16]
  sts &= otgp->GINTMSK;
    3312:	9b05      	ldr	r3, [sp, #20]
    3314:	699b      	ldr	r3, [r3, #24]
    3316:	9a04      	ldr	r2, [sp, #16]
    3318:	4013      	ands	r3, r2
    331a:	9304      	str	r3, [sp, #16]
  otgp->GINTSTS = sts;
    331c:	9b05      	ldr	r3, [sp, #20]
    331e:	9a04      	ldr	r2, [sp, #16]
    3320:	615a      	str	r2, [r3, #20]

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
    3322:	9b04      	ldr	r3, [sp, #16]
    3324:	2b00      	cmp	r3, #0
    3326:	da16      	bge.n	3356 <usb_lld_serve_interrupt+0x56>
    /* If clocks are gated off, turn them back on (may be the case if
       coming out of suspend mode).*/
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
    3328:	9b05      	ldr	r3, [sp, #20]
    332a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    332e:	f003 0303 	and.w	r3, r3, #3
    3332:	2b00      	cmp	r3, #0
    3334:	d007      	beq.n	3346 <usb_lld_serve_interrupt+0x46>
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
    3336:	9b05      	ldr	r3, [sp, #20]
    3338:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    333c:	f023 0203 	bic.w	r2, r3, #3
    3340:	9b05      	ldr	r3, [sp, #20]
    3342:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
    3346:	9b05      	ldr	r3, [sp, #20]
    3348:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
    334c:	f043 0201 	orr.w	r2, r3, #1
    3350:	9b05      	ldr	r3, [sp, #20]
    3352:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  if (sts & GINTSTS_USBSUSP) {
    /* TODO: Implement suspend mode.*/
  }

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
    3356:	9b04      	ldr	r3, [sp, #16]
    3358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    335c:	2b00      	cmp	r3, #0
    335e:	d00d      	beq.n	337c <usb_lld_serve_interrupt+0x7c>
    _usb_reset(usbp);
    3360:	9801      	ldr	r0, [sp, #4]
    3362:	f7ff f93d 	bl	25e0 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    3366:	9b01      	ldr	r3, [sp, #4]
    3368:	685b      	ldr	r3, [r3, #4]
    336a:	681b      	ldr	r3, [r3, #0]
    336c:	2b00      	cmp	r3, #0
    336e:	d005      	beq.n	337c <usb_lld_serve_interrupt+0x7c>
    3370:	9b01      	ldr	r3, [sp, #4]
    3372:	685b      	ldr	r3, [r3, #4]
    3374:	681b      	ldr	r3, [r3, #0]
    3376:	9801      	ldr	r0, [sp, #4]
    3378:	2100      	movs	r1, #0
    337a:	4798      	blx	r3
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
    337c:	9b04      	ldr	r3, [sp, #16]
    337e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    3382:	2b00      	cmp	r3, #0
    3384:	d017      	beq.n	33b6 <usb_lld_serve_interrupt+0xb6>
    /* Full or High speed timing selection.*/
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
    3386:	9b05      	ldr	r3, [sp, #20]
    3388:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
    338c:	f003 0306 	and.w	r3, r3, #6
    3390:	2b00      	cmp	r3, #0
    3392:	d108      	bne.n	33a6 <usb_lld_serve_interrupt+0xa6>
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
    3394:	9b05      	ldr	r3, [sp, #20]
    3396:	68db      	ldr	r3, [r3, #12]
    3398:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
    339c:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
    33a0:	9b05      	ldr	r3, [sp, #20]
    33a2:	60da      	str	r2, [r3, #12]
    33a4:	e007      	b.n	33b6 <usb_lld_serve_interrupt+0xb6>
                      GUSBCFG_TRDT(TRDT_VALUE_HS);
    }
    else {
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
    33a6:	9b05      	ldr	r3, [sp, #20]
    33a8:	68db      	ldr	r3, [r3, #12]
    33aa:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
    33ae:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
    33b2:	9b05      	ldr	r3, [sp, #20]
    33b4:	60da      	str	r2, [r3, #12]
                      GUSBCFG_TRDT(TRDT_VALUE_FS);
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
    33b6:	9b04      	ldr	r3, [sp, #16]
    33b8:	f003 0308 	and.w	r3, r3, #8
    33bc:	2b00      	cmp	r3, #0
    33be:	d009      	beq.n	33d4 <usb_lld_serve_interrupt+0xd4>
    _usb_isr_invoke_sof_cb(usbp);
    33c0:	9b01      	ldr	r3, [sp, #4]
    33c2:	685b      	ldr	r3, [r3, #4]
    33c4:	68db      	ldr	r3, [r3, #12]
    33c6:	2b00      	cmp	r3, #0
    33c8:	d004      	beq.n	33d4 <usb_lld_serve_interrupt+0xd4>
    33ca:	9b01      	ldr	r3, [sp, #4]
    33cc:	685b      	ldr	r3, [r3, #4]
    33ce:	68db      	ldr	r3, [r3, #12]
    33d0:	9801      	ldr	r0, [sp, #4]
    33d2:	4798      	blx	r3
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    33d4:	9b04      	ldr	r3, [sp, #16]
    33d6:	f003 0310 	and.w	r3, r3, #16
    33da:	2b00      	cmp	r3, #0
    33dc:	d00f      	beq.n	33fe <usb_lld_serve_interrupt+0xfe>
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    33de:	f7ff fdcf 	bl	2f80 <osalSysLockFromISR>
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
    33e2:	9b05      	ldr	r3, [sp, #20]
    33e4:	699b      	ldr	r3, [r3, #24]
    33e6:	f023 0210 	bic.w	r2, r3, #16
    33ea:	9b05      	ldr	r3, [sp, #20]
    33ec:	619a      	str	r2, [r3, #24]
    osalThreadResumeI(&usbp->wait, MSG_OK);
    33ee:	9b01      	ldr	r3, [sp, #4]
    33f0:	3360      	adds	r3, #96	; 0x60
    33f2:	4618      	mov	r0, r3
    33f4:	2100      	movs	r1, #0
    33f6:	f7ff fde3 	bl	2fc0 <osalThreadResumeI>
    osalSysUnlockFromISR();
    33fa:	f7ff fdc9 	bl	2f90 <osalSysUnlockFromISR>
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
    33fe:	9b05      	ldr	r3, [sp, #20]
    3400:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
    3404:	9303      	str	r3, [sp, #12]
  if (sts & GINTSTS_IEPINT) {
    3406:	9b04      	ldr	r3, [sp, #16]
    3408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    340c:	2b00      	cmp	r3, #0
    340e:	d023      	beq.n	3458 <usb_lld_serve_interrupt+0x158>
    if (src & (1 << 0))
    3410:	9b03      	ldr	r3, [sp, #12]
    3412:	f003 0301 	and.w	r3, r3, #1
    3416:	2b00      	cmp	r3, #0
    3418:	d003      	beq.n	3422 <usb_lld_serve_interrupt+0x122>
      otg_epin_handler(usbp, 0);
    341a:	9801      	ldr	r0, [sp, #4]
    341c:	2100      	movs	r1, #0
    341e:	f7ff fe37 	bl	3090 <otg_epin_handler>
    if (src & (1 << 1))
    3422:	9b03      	ldr	r3, [sp, #12]
    3424:	f003 0302 	and.w	r3, r3, #2
    3428:	2b00      	cmp	r3, #0
    342a:	d003      	beq.n	3434 <usb_lld_serve_interrupt+0x134>
      otg_epin_handler(usbp, 1);
    342c:	9801      	ldr	r0, [sp, #4]
    342e:	2101      	movs	r1, #1
    3430:	f7ff fe2e 	bl	3090 <otg_epin_handler>
    if (src & (1 << 2))
    3434:	9b03      	ldr	r3, [sp, #12]
    3436:	f003 0304 	and.w	r3, r3, #4
    343a:	2b00      	cmp	r3, #0
    343c:	d003      	beq.n	3446 <usb_lld_serve_interrupt+0x146>
      otg_epin_handler(usbp, 2);
    343e:	9801      	ldr	r0, [sp, #4]
    3440:	2102      	movs	r1, #2
    3442:	f7ff fe25 	bl	3090 <otg_epin_handler>
    if (src & (1 << 3))
    3446:	9b03      	ldr	r3, [sp, #12]
    3448:	f003 0308 	and.w	r3, r3, #8
    344c:	2b00      	cmp	r3, #0
    344e:	d003      	beq.n	3458 <usb_lld_serve_interrupt+0x158>
      otg_epin_handler(usbp, 3);
    3450:	9801      	ldr	r0, [sp, #4]
    3452:	2103      	movs	r1, #3
    3454:	f7ff fe1c 	bl	3090 <otg_epin_handler>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    3458:	9b04      	ldr	r3, [sp, #16]
    345a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    345e:	2b00      	cmp	r3, #0
    3460:	d023      	beq.n	34aa <usb_lld_serve_interrupt+0x1aa>
    if (src & (1 << 16))
    3462:	9b03      	ldr	r3, [sp, #12]
    3464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    3468:	2b00      	cmp	r3, #0
    346a:	d003      	beq.n	3474 <usb_lld_serve_interrupt+0x174>
      otg_epout_handler(usbp, 0);
    346c:	9801      	ldr	r0, [sp, #4]
    346e:	2100      	movs	r1, #0
    3470:	f7ff feb6 	bl	31e0 <otg_epout_handler>
    if (src & (1 << 17))
    3474:	9b03      	ldr	r3, [sp, #12]
    3476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    347a:	2b00      	cmp	r3, #0
    347c:	d003      	beq.n	3486 <usb_lld_serve_interrupt+0x186>
      otg_epout_handler(usbp, 1);
    347e:	9801      	ldr	r0, [sp, #4]
    3480:	2101      	movs	r1, #1
    3482:	f7ff fead 	bl	31e0 <otg_epout_handler>
    if (src & (1 << 18))
    3486:	9b03      	ldr	r3, [sp, #12]
    3488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    348c:	2b00      	cmp	r3, #0
    348e:	d003      	beq.n	3498 <usb_lld_serve_interrupt+0x198>
      otg_epout_handler(usbp, 2);
    3490:	9801      	ldr	r0, [sp, #4]
    3492:	2102      	movs	r1, #2
    3494:	f7ff fea4 	bl	31e0 <otg_epout_handler>
    if (src & (1 << 19))
    3498:	9b03      	ldr	r3, [sp, #12]
    349a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    349e:	2b00      	cmp	r3, #0
    34a0:	d003      	beq.n	34aa <usb_lld_serve_interrupt+0x1aa>
      otg_epout_handler(usbp, 3);
    34a2:	9801      	ldr	r0, [sp, #4]
    34a4:	2103      	movs	r1, #3
    34a6:	f7ff fe9b 	bl	31e0 <otg_epout_handler>
      otg_epout_handler(usbp, 4);
    if (src & (1 << 21))
      otg_epout_handler(usbp, 5);
#endif
  }
}
    34aa:	b007      	add	sp, #28
    34ac:	f85d fb04 	ldr.w	pc, [sp], #4

000034b0 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
    34b0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);
    34b2:	4803      	ldr	r0, [pc, #12]	; (34c0 <Vector14C+0x10>)
    34b4:	f7ff ff24 	bl	3300 <usb_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
    34b8:	f7fe fb2a 	bl	1b10 <_port_irq_epilogue>
}
    34bc:	bd08      	pop	{r3, pc}
    34be:	bf00      	nop
    34c0:	20000978 	.word	0x20000978
    34c4:	f3af 8000 	nop.w
    34c8:	f3af 8000 	nop.w
    34cc:	f3af 8000 	nop.w

000034d0 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
    34d0:	b508      	push	{r3, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
    34d2:	4808      	ldr	r0, [pc, #32]	; (34f4 <usb_lld_init+0x24>)
    34d4:	f7fe ffac 	bl	2430 <usbObjectInit>
  USBD1.wait      = NULL;
    34d8:	4b06      	ldr	r3, [pc, #24]	; (34f4 <usb_lld_init+0x24>)
    34da:	2200      	movs	r2, #0
    34dc:	661a      	str	r2, [r3, #96]	; 0x60
  USBD1.otg       = OTG_FS;
    34de:	4b05      	ldr	r3, [pc, #20]	; (34f4 <usb_lld_init+0x24>)
    34e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    34e4:	651a      	str	r2, [r3, #80]	; 0x50
  USBD1.otgparams = &fsparams;
    34e6:	4b03      	ldr	r3, [pc, #12]	; (34f4 <usb_lld_init+0x24>)
    34e8:	4a03      	ldr	r2, [pc, #12]	; (34f8 <usb_lld_init+0x28>)
    34ea:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
    34ec:	4b01      	ldr	r3, [pc, #4]	; (34f4 <usb_lld_init+0x24>)
    34ee:	2200      	movs	r2, #0
    34f0:	665a      	str	r2, [r3, #100]	; 0x64
                    CH_DBG_STACK_FILL_VALUE);
  }
#endif /* CH_DBG_FILL_THREADS */
#endif /* defined(_CHIBIOS_RT_) */
#endif
}
    34f2:	bd08      	pop	{r3, pc}
    34f4:	20000978 	.word	0x20000978
    34f8:	00003fd0 	.word	0x00003fd0
    34fc:	f3af 8000 	nop.w

00003500 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
    3500:	b510      	push	{r4, lr}
    3502:	b084      	sub	sp, #16
    3504:	9001      	str	r0, [sp, #4]
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
    3506:	9b01      	ldr	r3, [sp, #4]
    3508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    350a:	9302      	str	r3, [sp, #8]

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);
    350c:	9801      	ldr	r0, [sp, #4]
    350e:	2100      	movs	r1, #0
    3510:	f7ff fd7e 	bl	3010 <otg_txfifo_flush>

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    3514:	2300      	movs	r3, #0
    3516:	9303      	str	r3, [sp, #12]
    3518:	e022      	b.n	3560 <usb_lld_reset+0x60>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
    351a:	9a02      	ldr	r2, [sp, #8]
    351c:	9b03      	ldr	r3, [sp, #12]
    351e:	3348      	adds	r3, #72	; 0x48
    3520:	015b      	lsls	r3, r3, #5
    3522:	4413      	add	r3, r2
    3524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    3528:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    352a:	9a02      	ldr	r2, [sp, #8]
    352c:	9b03      	ldr	r3, [sp, #12]
    352e:	3358      	adds	r3, #88	; 0x58
    3530:	015b      	lsls	r3, r3, #5
    3532:	4413      	add	r3, r2
    3534:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    3538:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPINT = 0xFF;
    353a:	9a02      	ldr	r2, [sp, #8]
    353c:	9b03      	ldr	r3, [sp, #12]
    353e:	015b      	lsls	r3, r3, #5
    3540:	4413      	add	r3, r2
    3542:	f603 1308 	addw	r3, r3, #2312	; 0x908
    3546:	22ff      	movs	r2, #255	; 0xff
    3548:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPINT = 0xFF;
    354a:	9a02      	ldr	r2, [sp, #8]
    354c:	9b03      	ldr	r3, [sp, #12]
    354e:	015b      	lsls	r3, r3, #5
    3550:	4413      	add	r3, r2
    3552:	f603 3308 	addw	r3, r3, #2824	; 0xb08
    3556:	22ff      	movs	r2, #255	; 0xff
    3558:	601a      	str	r2, [r3, #0]

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    355a:	9b03      	ldr	r3, [sp, #12]
    355c:	3301      	adds	r3, #1
    355e:	9303      	str	r3, [sp, #12]
    3560:	9b01      	ldr	r3, [sp, #4]
    3562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3564:	689a      	ldr	r2, [r3, #8]
    3566:	9b03      	ldr	r3, [sp, #12]
    3568:	429a      	cmp	r2, r3
    356a:	d2d6      	bcs.n	351a <usb_lld_reset+0x1a>
    otgp->ie[i].DIEPINT = 0xFF;
    otgp->oe[i].DOEPINT = 0xFF;
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
    356c:	9b02      	ldr	r3, [sp, #8]
    356e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3572:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
    3576:	9b02      	ldr	r3, [sp, #8]
    3578:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    357c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);
    3580:	9801      	ldr	r0, [sp, #4]
    3582:	f7ff fd65 	bl	3050 <otg_ram_reset>

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
    3586:	9b01      	ldr	r3, [sp, #4]
    3588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    358a:	681a      	ldr	r2, [r3, #0]
    358c:	9b02      	ldr	r3, [sp, #8]
    358e:	625a      	str	r2, [r3, #36]	; 0x24
  otg_rxfifo_flush(usbp);
    3590:	9801      	ldr	r0, [sp, #4]
    3592:	f7ff fd25 	bl	2fe0 <otg_rxfifo_flush>

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
    3596:	9b02      	ldr	r3, [sp, #8]
    3598:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
    359c:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
    35a0:	9b02      	ldr	r3, [sp, #8]
    35a2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
    35a6:	9b02      	ldr	r3, [sp, #8]
    35a8:	699b      	ldr	r3, [r3, #24]
    35aa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    35ae:	f043 0310 	orr.w	r3, r3, #16
    35b2:	9a02      	ldr	r2, [sp, #8]
    35b4:	6193      	str	r3, [r2, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
    35b6:	9b02      	ldr	r3, [sp, #8]
    35b8:	2209      	movs	r2, #9
    35ba:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
    35be:	9b02      	ldr	r3, [sp, #8]
    35c0:	2209      	movs	r2, #9
    35c2:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
    35c6:	9b01      	ldr	r3, [sp, #4]
    35c8:	4a16      	ldr	r2, [pc, #88]	; (3624 <usb_lld_reset+0x124>)
    35ca:	60da      	str	r2, [r3, #12]
  otgp->oe[0].DOEPTSIZ = 0;
    35cc:	9b02      	ldr	r3, [sp, #8]
    35ce:	2200      	movs	r2, #0
    35d0:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
    35d4:	2340      	movs	r3, #64	; 0x40
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
    35d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    35da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    35de:	9a02      	ldr	r2, [sp, #8]
    35e0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
    35e4:	9b02      	ldr	r3, [sp, #8]
    35e6:	2200      	movs	r2, #0
    35e8:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
    35ec:	2340      	movs	r3, #64	; 0x40
    35ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    35f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
    35f6:	9a02      	ldr	r2, [sp, #8]
    35f8:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
    35fc:	2340      	movs	r3, #64	; 0x40
    35fe:	089b      	lsrs	r3, r3, #2
    3600:	b29b      	uxth	r3, r3
    3602:	041b      	lsls	r3, r3, #16
    3604:	461c      	mov	r4, r3
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
    3606:	2340      	movs	r3, #64	; 0x40
    3608:	089b      	lsrs	r3, r3, #2
    360a:	b29b      	uxth	r3, r3
    360c:	9801      	ldr	r0, [sp, #4]
    360e:	4619      	mov	r1, r3
    3610:	f7ff fd2e 	bl	3070 <otg_ram_alloc>
    3614:	4603      	mov	r3, r0
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
    3616:	ea44 0203 	orr.w	r2, r4, r3
    361a:	9b02      	ldr	r3, [sp, #8]
    361c:	629a      	str	r2, [r3, #40]	; 0x28
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
                                                  ep0config.in_maxsize / 4));
}
    361e:	b004      	add	sp, #16
    3620:	bd10      	pop	{r4, pc}
    3622:	bf00      	nop
    3624:	00003fa0 	.word	0x00003fa0
    3628:	f3af 8000 	nop.w
    362c:	f3af 8000 	nop.w

00003630 <usb_lld_set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
    3630:	b084      	sub	sp, #16
    3632:	9001      	str	r0, [sp, #4]
  stm32_otg_t *otgp = usbp->otg;
    3634:	9b01      	ldr	r3, [sp, #4]
    3636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3638:	9303      	str	r3, [sp, #12]

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
    363a:	9b03      	ldr	r3, [sp, #12]
    363c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
    3640:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
    3644:	9b01      	ldr	r3, [sp, #4]
    3646:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    364a:	011b      	lsls	r3, r3, #4
    364c:	431a      	orrs	r2, r3
    364e:	9b03      	ldr	r3, [sp, #12]
    3650:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
    3654:	b004      	add	sp, #16
    3656:	4770      	bx	lr
    3658:	f3af 8000 	nop.w
    365c:	f3af 8000 	nop.w

00003660 <usb_lld_get_status_out>:
 * @retval EP_STATUS_STALLED  The endpoint is stalled.
 * @retval EP_STATUS_ACTIVE   The endpoint is active.
 *
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
    3660:	b084      	sub	sp, #16
    3662:	9001      	str	r0, [sp, #4]
    3664:	460b      	mov	r3, r1
    3666:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
    366a:	9b01      	ldr	r3, [sp, #4]
    366c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    366e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3672:	3358      	adds	r3, #88	; 0x58
    3674:	015b      	lsls	r3, r3, #5
    3676:	4413      	add	r3, r2
    3678:	681b      	ldr	r3, [r3, #0]
    367a:	9303      	str	r3, [sp, #12]
  if (!(ctl & DOEPCTL_USBAEP))
    367c:	9b03      	ldr	r3, [sp, #12]
    367e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    3682:	2b00      	cmp	r3, #0
    3684:	d101      	bne.n	368a <usb_lld_get_status_out+0x2a>
    return EP_STATUS_DISABLED;
    3686:	2300      	movs	r3, #0
    3688:	e007      	b.n	369a <usb_lld_get_status_out+0x3a>
  if (ctl & DOEPCTL_STALL)
    368a:	9b03      	ldr	r3, [sp, #12]
    368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    3690:	2b00      	cmp	r3, #0
    3692:	d001      	beq.n	3698 <usb_lld_get_status_out+0x38>
    return EP_STATUS_STALLED;
    3694:	2301      	movs	r3, #1
    3696:	e000      	b.n	369a <usb_lld_get_status_out+0x3a>
  return EP_STATUS_ACTIVE;
    3698:	2302      	movs	r3, #2
}
    369a:	4618      	mov	r0, r3
    369c:	b004      	add	sp, #16
    369e:	4770      	bx	lr

000036a0 <usb_lld_get_status_in>:
 * @retval EP_STATUS_STALLED  The endpoint is stalled.
 * @retval EP_STATUS_ACTIVE   The endpoint is active.
 *
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
    36a0:	b084      	sub	sp, #16
    36a2:	9001      	str	r0, [sp, #4]
    36a4:	460b      	mov	r3, r1
    36a6:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
    36aa:	9b01      	ldr	r3, [sp, #4]
    36ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    36ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    36b2:	3348      	adds	r3, #72	; 0x48
    36b4:	015b      	lsls	r3, r3, #5
    36b6:	4413      	add	r3, r2
    36b8:	681b      	ldr	r3, [r3, #0]
    36ba:	9303      	str	r3, [sp, #12]
  if (!(ctl & DIEPCTL_USBAEP))
    36bc:	9b03      	ldr	r3, [sp, #12]
    36be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    36c2:	2b00      	cmp	r3, #0
    36c4:	d101      	bne.n	36ca <usb_lld_get_status_in+0x2a>
    return EP_STATUS_DISABLED;
    36c6:	2300      	movs	r3, #0
    36c8:	e007      	b.n	36da <usb_lld_get_status_in+0x3a>
  if (ctl & DIEPCTL_STALL)
    36ca:	9b03      	ldr	r3, [sp, #12]
    36cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    36d0:	2b00      	cmp	r3, #0
    36d2:	d001      	beq.n	36d8 <usb_lld_get_status_in+0x38>
    return EP_STATUS_STALLED;
    36d4:	2301      	movs	r3, #1
    36d6:	e000      	b.n	36da <usb_lld_get_status_in+0x3a>
  return EP_STATUS_ACTIVE;
    36d8:	2302      	movs	r3, #2
}
    36da:	4618      	mov	r0, r3
    36dc:	b004      	add	sp, #16
    36de:	4770      	bx	lr

000036e0 <usb_lld_read_setup>:
 * @param[in] ep        endpoint number
 * @param[out] buf      buffer where to copy the packet data
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {
    36e0:	b500      	push	{lr}
    36e2:	b085      	sub	sp, #20
    36e4:	9003      	str	r0, [sp, #12]
    36e6:	460b      	mov	r3, r1
    36e8:	9201      	str	r2, [sp, #4]
    36ea:	f88d 300b 	strb.w	r3, [sp, #11]

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
    36ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    36f2:	9a03      	ldr	r2, [sp, #12]
    36f4:	3302      	adds	r3, #2
    36f6:	009b      	lsls	r3, r3, #2
    36f8:	4413      	add	r3, r2
    36fa:	685b      	ldr	r3, [r3, #4]
    36fc:	6a1b      	ldr	r3, [r3, #32]
    36fe:	9801      	ldr	r0, [sp, #4]
    3700:	4619      	mov	r1, r3
    3702:	2208      	movs	r2, #8
    3704:	f7fc fdd4 	bl	2b0 <memcpy>
}
    3708:	b005      	add	sp, #20
    370a:	f85d fb04 	ldr.w	pc, [sp], #4
    370e:	bf00      	nop

00003710 <usb_lld_prepare_receive>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
    3710:	b084      	sub	sp, #16
    3712:	9001      	str	r0, [sp, #4]
    3714:	460b      	mov	r3, r1
    3716:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
    371a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    371e:	9a01      	ldr	r2, [sp, #4]
    3720:	3302      	adds	r3, #2
    3722:	009b      	lsls	r3, r3, #2
    3724:	4413      	add	r3, r2
    3726:	685b      	ldr	r3, [r3, #4]
    3728:	699b      	ldr	r3, [r3, #24]
    372a:	9303      	str	r3, [sp, #12]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
    372c:	9b03      	ldr	r3, [sp, #12]
    372e:	685a      	ldr	r2, [r3, #4]
    3730:	9b03      	ldr	r3, [sp, #12]
    3732:	611a      	str	r2, [r3, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
    3734:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3738:	2b00      	cmp	r3, #0
    373a:	d106      	bne.n	374a <usb_lld_prepare_receive+0x3a>
    373c:	9b03      	ldr	r3, [sp, #12]
    373e:	685b      	ldr	r3, [r3, #4]
    3740:	2b40      	cmp	r3, #64	; 0x40
    3742:	d902      	bls.n	374a <usb_lld_prepare_receive+0x3a>
      osp->rxsize = EP0_MAX_OUTSIZE;
    3744:	9b03      	ldr	r3, [sp, #12]
    3746:	2240      	movs	r2, #64	; 0x40
    3748:	605a      	str	r2, [r3, #4]

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
    374a:	9b03      	ldr	r3, [sp, #12]
    374c:	685a      	ldr	r2, [r3, #4]
    374e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3752:	9901      	ldr	r1, [sp, #4]
    3754:	3302      	adds	r3, #2
    3756:	009b      	lsls	r3, r3, #2
    3758:	440b      	add	r3, r1
    375a:	685b      	ldr	r3, [r3, #4]
    375c:	8a5b      	ldrh	r3, [r3, #18]
    375e:	4413      	add	r3, r2
    3760:	1e5a      	subs	r2, r3, #1
         usbp->epc[ep]->out_maxsize;
    3762:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3766:	9901      	ldr	r1, [sp, #4]
    3768:	3302      	adds	r3, #2
    376a:	009b      	lsls	r3, r3, #2
    376c:	440b      	add	r3, r1
    376e:	685b      	ldr	r3, [r3, #4]
    3770:	8a5b      	ldrh	r3, [r3, #18]
  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
    3772:	fbb2 f3f3 	udiv	r3, r2, r3
    3776:	9302      	str	r3, [sp, #8]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
    3778:	9b01      	ldr	r3, [sp, #4]
    377a:	6d19      	ldr	r1, [r3, #80]	; 0x50
    377c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3780:	9a02      	ldr	r2, [sp, #8]
    3782:	04d0      	lsls	r0, r2, #19
                               DOEPTSIZ_XFRSIZ(osp->rxsize);
    3784:	9a03      	ldr	r2, [sp, #12]
    3786:	6852      	ldr	r2, [r2, #4]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
    3788:	4302      	orrs	r2, r0
    378a:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
    378e:	015b      	lsls	r3, r3, #5
    3790:	440b      	add	r3, r1
    3792:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
    3796:	601a      	str	r2, [r3, #0]
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
    3798:	b004      	add	sp, #16
    379a:	4770      	bx	lr
    379c:	f3af 8000 	nop.w

000037a0 <usb_lld_prepare_transmit>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
    37a0:	b084      	sub	sp, #16
    37a2:	9001      	str	r0, [sp, #4]
    37a4:	460b      	mov	r3, r1
    37a6:	f88d 3003 	strb.w	r3, [sp, #3]
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
    37aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37ae:	9a01      	ldr	r2, [sp, #4]
    37b0:	3302      	adds	r3, #2
    37b2:	009b      	lsls	r3, r3, #2
    37b4:	4413      	add	r3, r2
    37b6:	685b      	ldr	r3, [r3, #4]
    37b8:	695b      	ldr	r3, [r3, #20]
    37ba:	9303      	str	r3, [sp, #12]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
    37bc:	9b03      	ldr	r3, [sp, #12]
    37be:	685a      	ldr	r2, [r3, #4]
    37c0:	9b03      	ldr	r3, [sp, #12]
    37c2:	611a      	str	r2, [r3, #16]
  if (isp->txsize == 0) {
    37c4:	9b03      	ldr	r3, [sp, #12]
    37c6:	685b      	ldr	r3, [r3, #4]
    37c8:	2b00      	cmp	r3, #0
    37ca:	d10b      	bne.n	37e4 <usb_lld_prepare_transmit+0x44>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
    37cc:	9b01      	ldr	r3, [sp, #4]
    37ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    37d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37d4:	015b      	lsls	r3, r3, #5
    37d6:	4413      	add	r3, r2
    37d8:	f503 6311 	add.w	r3, r3, #2320	; 0x910
    37dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    37e0:	601a      	str	r2, [r3, #0]
    37e2:	e02f      	b.n	3844 <usb_lld_prepare_transmit+0xa4>
  }
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
    37e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d106      	bne.n	37fa <usb_lld_prepare_transmit+0x5a>
    37ec:	9b03      	ldr	r3, [sp, #12]
    37ee:	685b      	ldr	r3, [r3, #4]
    37f0:	2b40      	cmp	r3, #64	; 0x40
    37f2:	d902      	bls.n	37fa <usb_lld_prepare_transmit+0x5a>
      isp->txsize = EP0_MAX_INSIZE;
    37f4:	9b03      	ldr	r3, [sp, #12]
    37f6:	2240      	movs	r2, #64	; 0x40
    37f8:	605a      	str	r2, [r3, #4]

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
    37fa:	9b03      	ldr	r3, [sp, #12]
    37fc:	685a      	ldr	r2, [r3, #4]
    37fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3802:	9901      	ldr	r1, [sp, #4]
    3804:	3302      	adds	r3, #2
    3806:	009b      	lsls	r3, r3, #2
    3808:	440b      	add	r3, r1
    380a:	685b      	ldr	r3, [r3, #4]
    380c:	8a1b      	ldrh	r3, [r3, #16]
    380e:	4413      	add	r3, r2
    3810:	1e5a      	subs	r2, r3, #1
                    usbp->epc[ep]->in_maxsize;
    3812:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3816:	9901      	ldr	r1, [sp, #4]
    3818:	3302      	adds	r3, #2
    381a:	009b      	lsls	r3, r3, #2
    381c:	440b      	add	r3, r1
    381e:	685b      	ldr	r3, [r3, #4]
    3820:	8a1b      	ldrh	r3, [r3, #16]
  else {
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
    3822:	fbb2 f3f3 	udiv	r3, r2, r3
    3826:	9302      	str	r3, [sp, #8]
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
    3828:	9b01      	ldr	r3, [sp, #4]
    382a:	6d19      	ldr	r1, [r3, #80]	; 0x50
    382c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3830:	9a02      	ldr	r2, [sp, #8]
    3832:	04d0      	lsls	r0, r2, #19
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
    3834:	9a03      	ldr	r2, [sp, #12]
    3836:	6852      	ldr	r2, [r2, #4]
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
    3838:	4302      	orrs	r2, r0
    383a:	015b      	lsls	r3, r3, #5
    383c:	440b      	add	r3, r1
    383e:	f503 6311 	add.w	r3, r3, #2320	; 0x910
    3842:	601a      	str	r2, [r3, #0]
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }
}
    3844:	b004      	add	sp, #16
    3846:	4770      	bx	lr
    3848:	f3af 8000 	nop.w
    384c:	f3af 8000 	nop.w

00003850 <usb_lld_start_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
    3850:	b082      	sub	sp, #8
    3852:	9001      	str	r0, [sp, #4]
    3854:	460b      	mov	r3, r1
    3856:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
    385a:	9b01      	ldr	r3, [sp, #4]
    385c:	6d19      	ldr	r1, [r3, #80]	; 0x50
    385e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3862:	9a01      	ldr	r2, [sp, #4]
    3864:	6d10      	ldr	r0, [r2, #80]	; 0x50
    3866:	f89d 2003 	ldrb.w	r2, [sp, #3]
    386a:	3258      	adds	r2, #88	; 0x58
    386c:	0152      	lsls	r2, r2, #5
    386e:	4402      	add	r2, r0
    3870:	6812      	ldr	r2, [r2, #0]
    3872:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    3876:	3358      	adds	r3, #88	; 0x58
    3878:	015b      	lsls	r3, r3, #5
    387a:	440b      	add	r3, r1
    387c:	601a      	str	r2, [r3, #0]
}
    387e:	b002      	add	sp, #8
    3880:	4770      	bx	lr
    3882:	bf00      	nop
    3884:	f3af 8000 	nop.w
    3888:	f3af 8000 	nop.w
    388c:	f3af 8000 	nop.w

00003890 <usb_lld_start_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
    3890:	b082      	sub	sp, #8
    3892:	9001      	str	r0, [sp, #4]
    3894:	460b      	mov	r3, r1
    3896:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
    389a:	9b01      	ldr	r3, [sp, #4]
    389c:	6d19      	ldr	r1, [r3, #80]	; 0x50
    389e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38a2:	9a01      	ldr	r2, [sp, #4]
    38a4:	6d10      	ldr	r0, [r2, #80]	; 0x50
    38a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    38aa:	3248      	adds	r2, #72	; 0x48
    38ac:	0152      	lsls	r2, r2, #5
    38ae:	4402      	add	r2, r0
    38b0:	6812      	ldr	r2, [r2, #0]
    38b2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
    38b6:	3348      	adds	r3, #72	; 0x48
    38b8:	015b      	lsls	r3, r3, #5
    38ba:	440b      	add	r3, r1
    38bc:	601a      	str	r2, [r3, #0]
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
    38be:	9b01      	ldr	r3, [sp, #4]
    38c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    38c2:	9a01      	ldr	r2, [sp, #4]
    38c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
    38c6:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
    38ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    38ce:	2001      	movs	r0, #1
    38d0:	fa00 f202 	lsl.w	r2, r0, r2
    38d4:	430a      	orrs	r2, r1
    38d6:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
    38da:	b002      	add	sp, #8
    38dc:	4770      	bx	lr
    38de:	bf00      	nop

000038e0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
    38e0:	b082      	sub	sp, #8
    38e2:	9001      	str	r0, [sp, #4]
    38e4:	460b      	mov	r3, r1
    38e6:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
    38ea:	9b01      	ldr	r3, [sp, #4]
    38ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
    38ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38f2:	9a01      	ldr	r2, [sp, #4]
    38f4:	6d10      	ldr	r0, [r2, #80]	; 0x50
    38f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    38fa:	3258      	adds	r2, #88	; 0x58
    38fc:	0152      	lsls	r2, r2, #5
    38fe:	4402      	add	r2, r0
    3900:	6812      	ldr	r2, [r2, #0]
    3902:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    3906:	3358      	adds	r3, #88	; 0x58
    3908:	015b      	lsls	r3, r3, #5
    390a:	440b      	add	r3, r1
    390c:	601a      	str	r2, [r3, #0]
}
    390e:	b002      	add	sp, #8
    3910:	4770      	bx	lr
    3912:	bf00      	nop
    3914:	f3af 8000 	nop.w
    3918:	f3af 8000 	nop.w
    391c:	f3af 8000 	nop.w

00003920 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
    3920:	b082      	sub	sp, #8
    3922:	9001      	str	r0, [sp, #4]
    3924:	460b      	mov	r3, r1
    3926:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
    392a:	9b01      	ldr	r3, [sp, #4]
    392c:	6d19      	ldr	r1, [r3, #80]	; 0x50
    392e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3932:	9a01      	ldr	r2, [sp, #4]
    3934:	6d10      	ldr	r0, [r2, #80]	; 0x50
    3936:	f89d 2003 	ldrb.w	r2, [sp, #3]
    393a:	3248      	adds	r2, #72	; 0x48
    393c:	0152      	lsls	r2, r2, #5
    393e:	4402      	add	r2, r0
    3940:	6812      	ldr	r2, [r2, #0]
    3942:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    3946:	3348      	adds	r3, #72	; 0x48
    3948:	015b      	lsls	r3, r3, #5
    394a:	440b      	add	r3, r1
    394c:	601a      	str	r2, [r3, #0]
}
    394e:	b002      	add	sp, #8
    3950:	4770      	bx	lr
    3952:	bf00      	nop
    3954:	f3af 8000 	nop.w
    3958:	f3af 8000 	nop.w
    395c:	f3af 8000 	nop.w

00003960 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
    3960:	b082      	sub	sp, #8
    3962:	9001      	str	r0, [sp, #4]
    3964:	460b      	mov	r3, r1
    3966:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
    396a:	9b01      	ldr	r3, [sp, #4]
    396c:	6d19      	ldr	r1, [r3, #80]	; 0x50
    396e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3972:	9a01      	ldr	r2, [sp, #4]
    3974:	6d10      	ldr	r0, [r2, #80]	; 0x50
    3976:	f89d 2003 	ldrb.w	r2, [sp, #3]
    397a:	3258      	adds	r2, #88	; 0x58
    397c:	0152      	lsls	r2, r2, #5
    397e:	4402      	add	r2, r0
    3980:	6812      	ldr	r2, [r2, #0]
    3982:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    3986:	3358      	adds	r3, #88	; 0x58
    3988:	015b      	lsls	r3, r3, #5
    398a:	440b      	add	r3, r1
    398c:	601a      	str	r2, [r3, #0]
}
    398e:	b002      	add	sp, #8
    3990:	4770      	bx	lr
    3992:	bf00      	nop
    3994:	f3af 8000 	nop.w
    3998:	f3af 8000 	nop.w
    399c:	f3af 8000 	nop.w

000039a0 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
    39a0:	b082      	sub	sp, #8
    39a2:	9001      	str	r0, [sp, #4]
    39a4:	460b      	mov	r3, r1
    39a6:	f88d 3003 	strb.w	r3, [sp, #3]

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
    39aa:	9b01      	ldr	r3, [sp, #4]
    39ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
    39ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    39b2:	9a01      	ldr	r2, [sp, #4]
    39b4:	6d10      	ldr	r0, [r2, #80]	; 0x50
    39b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    39ba:	3248      	adds	r2, #72	; 0x48
    39bc:	0152      	lsls	r2, r2, #5
    39be:	4402      	add	r2, r0
    39c0:	6812      	ldr	r2, [r2, #0]
    39c2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    39c6:	3348      	adds	r3, #72	; 0x48
    39c8:	015b      	lsls	r3, r3, #5
    39ca:	440b      	add	r3, r1
    39cc:	601a      	str	r2, [r3, #0]
}
    39ce:	b002      	add	sp, #8
    39d0:	4770      	bx	lr
    39d2:	bf00      	nop
    39d4:	f3af 8000 	nop.w
    39d8:	f3af 8000 	nop.w
    39dc:	f3af 8000 	nop.w

000039e0 <port_lock>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
    39e0:	b082      	sub	sp, #8
    39e2:	2320      	movs	r3, #32
    39e4:	9301      	str	r3, [sp, #4]
    39e6:	9b01      	ldr	r3, [sp, #4]
    39e8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    39ec:	b002      	add	sp, #8
    39ee:	4770      	bx	lr

000039f0 <port_unlock>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
    39f0:	b082      	sub	sp, #8
    39f2:	2300      	movs	r3, #0
    39f4:	9301      	str	r3, [sp, #4]
    39f6:	9b01      	ldr	r3, [sp, #4]
    39f8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
    39fc:	b002      	add	sp, #8
    39fe:	4770      	bx	lr

00003a00 <port_lock_from_isr>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
    3a00:	b508      	push	{r3, lr}

  port_lock();
    3a02:	f7ff ffed 	bl	39e0 <port_lock>
}
    3a06:	bd08      	pop	{r3, pc}
    3a08:	f3af 8000 	nop.w
    3a0c:	f3af 8000 	nop.w

00003a10 <port_unlock_from_isr>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
    3a10:	b508      	push	{r3, lr}

  port_unlock();
    3a12:	f7ff ffed 	bl	39f0 <port_unlock>
}
    3a16:	bd08      	pop	{r3, pc}
    3a18:	f3af 8000 	nop.w
    3a1c:	f3af 8000 	nop.w

00003a20 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
    3a20:	b508      	push	{r3, lr}

  port_lock_from_isr();
    3a22:	f7ff ffed 	bl	3a00 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
    3a26:	bd08      	pop	{r3, pc}
    3a28:	f3af 8000 	nop.w
    3a2c:	f3af 8000 	nop.w

00003a30 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
    3a30:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
    3a32:	f7ff ffed 	bl	3a10 <port_unlock_from_isr>
}
    3a36:	bd08      	pop	{r3, pc}
    3a38:	f3af 8000 	nop.w
    3a3c:	f3af 8000 	nop.w

00003a40 <chOQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {
    3a40:	b082      	sub	sp, #8
    3a42:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
    3a44:	9b01      	ldr	r3, [sp, #4]
    3a46:	695a      	ldr	r2, [r3, #20]
    3a48:	9b01      	ldr	r3, [sp, #4]
    3a4a:	699b      	ldr	r3, [r3, #24]
    3a4c:	429a      	cmp	r2, r3
    3a4e:	d105      	bne.n	3a5c <chOQIsEmptyI+0x1c>
    3a50:	9b01      	ldr	r3, [sp, #4]
    3a52:	689b      	ldr	r3, [r3, #8]
    3a54:	2b00      	cmp	r3, #0
    3a56:	d001      	beq.n	3a5c <chOQIsEmptyI+0x1c>
    3a58:	2301      	movs	r3, #1
    3a5a:	e000      	b.n	3a5e <chOQIsEmptyI+0x1e>
    3a5c:	2300      	movs	r3, #0
    3a5e:	f003 0301 	and.w	r3, r3, #1
    3a62:	b2db      	uxtb	r3, r3
}
    3a64:	4618      	mov	r0, r3
    3a66:	b002      	add	sp, #8
    3a68:	4770      	bx	lr
    3a6a:	bf00      	nop
    3a6c:	f3af 8000 	nop.w

00003a70 <osalSysLockFromISR>:
 * @brief   Enters a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLockFromISR(void) {
    3a70:	b508      	push	{r3, lr}

  chSysLockFromISR();
    3a72:	f7ff ffd5 	bl	3a20 <chSysLockFromISR>
}
    3a76:	bd08      	pop	{r3, pc}
    3a78:	f3af 8000 	nop.w
    3a7c:	f3af 8000 	nop.w

00003a80 <osalSysUnlockFromISR>:
 * @brief   Leaves a critical zone from ISR context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlockFromISR(void) {
    3a80:	b508      	push	{r3, lr}

  chSysUnlockFromISR();
    3a82:	f7ff ffd5 	bl	3a30 <chSysUnlockFromISR>
}
    3a86:	bd08      	pop	{r3, pc}
    3a88:	f3af 8000 	nop.w
    3a8c:	f3af 8000 	nop.w

00003a90 <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
    3a90:	b500      	push	{lr}
    3a92:	b083      	sub	sp, #12
    3a94:	9001      	str	r0, [sp, #4]
    3a96:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
    3a98:	9801      	ldr	r0, [sp, #4]
    3a9a:	9900      	ldr	r1, [sp, #0]
    3a9c:	f7fd fc98 	bl	13d0 <chEvtBroadcastFlagsI>
}
    3aa0:	b003      	add	sp, #12
    3aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    3aa6:	bf00      	nop
    3aa8:	f3af 8000 	nop.w
    3aac:	f3af 8000 	nop.w

00003ab0 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
    3ab0:	b084      	sub	sp, #16
    3ab2:	9001      	str	r0, [sp, #4]
    3ab4:	9100      	str	r1, [sp, #0]
  USART_TypeDef *u = sdp->usart;
    3ab6:	9b01      	ldr	r3, [sp, #4]
    3ab8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    3abc:	9303      	str	r3, [sp, #12]

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
    3abe:	9b01      	ldr	r3, [sp, #4]
    3ac0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    3ac4:	4b1d      	ldr	r3, [pc, #116]	; (3b3c <usart_init+0x8c>)
    3ac6:	429a      	cmp	r2, r3
    3ac8:	d005      	beq.n	3ad6 <usart_init+0x26>
    3aca:	9b01      	ldr	r3, [sp, #4]
    3acc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    3ad0:	4b1b      	ldr	r3, [pc, #108]	; (3b40 <usart_init+0x90>)
    3ad2:	429a      	cmp	r2, r3
    3ad4:	d107      	bne.n	3ae6 <usart_init+0x36>
#else
  if (sdp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / config->speed;
    3ad6:	9b00      	ldr	r3, [sp, #0]
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	4a1a      	ldr	r2, [pc, #104]	; (3b44 <usart_init+0x94>)
    3adc:	fbb2 f2f3 	udiv	r2, r2, r3
    3ae0:	9b03      	ldr	r3, [sp, #12]
    3ae2:	609a      	str	r2, [r3, #8]
    3ae4:	e006      	b.n	3af4 <usart_init+0x44>
  else
    u->BRR = STM32_PCLK1 / config->speed;
    3ae6:	9b00      	ldr	r3, [sp, #0]
    3ae8:	681b      	ldr	r3, [r3, #0]
    3aea:	4a17      	ldr	r2, [pc, #92]	; (3b48 <usart_init+0x98>)
    3aec:	fbb2 f2f3 	udiv	r2, r2, r3
    3af0:	9b03      	ldr	r3, [sp, #12]
    3af2:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
    3af4:	9b00      	ldr	r3, [sp, #0]
    3af6:	88db      	ldrh	r3, [r3, #6]
    3af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3afc:	b29b      	uxth	r3, r3
    3afe:	461a      	mov	r2, r3
    3b00:	9b03      	ldr	r3, [sp, #12]
    3b02:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
    3b04:	9b00      	ldr	r3, [sp, #0]
    3b06:	891b      	ldrh	r3, [r3, #8]
    3b08:	f043 0301 	orr.w	r3, r3, #1
    3b0c:	b29b      	uxth	r3, r3
    3b0e:	461a      	mov	r2, r3
    3b10:	9b03      	ldr	r3, [sp, #12]
    3b12:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
    3b14:	9b00      	ldr	r3, [sp, #0]
    3b16:	889b      	ldrh	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
    3b18:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
    3b1c:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
    3b20:	b29b      	uxth	r3, r3
    3b22:	461a      	mov	r2, r3
    u->BRR = STM32_PCLK1 / config->speed;

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
    3b24:	9b03      	ldr	r3, [sp, #12]
    3b26:	60da      	str	r2, [r3, #12]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->SR = 0;
    3b28:	9b03      	ldr	r3, [sp, #12]
    3b2a:	2200      	movs	r2, #0
    3b2c:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
    3b2e:	9b03      	ldr	r3, [sp, #12]
    3b30:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
    3b32:	9b03      	ldr	r3, [sp, #12]
    3b34:	685b      	ldr	r3, [r3, #4]
}
    3b36:	b004      	add	sp, #16
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop
    3b3c:	40011000 	.word	0x40011000
    3b40:	40011400 	.word	0x40011400
    3b44:	0501bd00 	.word	0x0501bd00
    3b48:	0280de80 	.word	0x0280de80
    3b4c:	f3af 8000 	nop.w

00003b50 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
    3b50:	b500      	push	{lr}
    3b52:	b085      	sub	sp, #20
    3b54:	9001      	str	r0, [sp, #4]
    3b56:	460b      	mov	r3, r1
    3b58:	f8ad 3002 	strh.w	r3, [sp, #2]
  eventflags_t sts = 0;
    3b5c:	2300      	movs	r3, #0
    3b5e:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
    3b60:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    3b64:	f003 0308 	and.w	r3, r3, #8
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d003      	beq.n	3b74 <set_error+0x24>
    sts |= SD_OVERRUN_ERROR;
    3b6c:	9b03      	ldr	r3, [sp, #12]
    3b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3b72:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
    3b74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    3b78:	f003 0301 	and.w	r3, r3, #1
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d003      	beq.n	3b88 <set_error+0x38>
    sts |= SD_PARITY_ERROR;
    3b80:	9b03      	ldr	r3, [sp, #12]
    3b82:	f043 0320 	orr.w	r3, r3, #32
    3b86:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
    3b88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    3b8c:	f003 0302 	and.w	r3, r3, #2
    3b90:	2b00      	cmp	r3, #0
    3b92:	d003      	beq.n	3b9c <set_error+0x4c>
    sts |= SD_FRAMING_ERROR;
    3b94:	9b03      	ldr	r3, [sp, #12]
    3b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3b9a:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
    3b9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    3ba0:	f003 0304 	and.w	r3, r3, #4
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d003      	beq.n	3bb0 <set_error+0x60>
    sts |= SD_NOISE_ERROR;
    3ba8:	9b03      	ldr	r3, [sp, #12]
    3baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3bae:	9303      	str	r3, [sp, #12]
  chnAddFlagsI(sdp, sts);
    3bb0:	9b01      	ldr	r3, [sp, #4]
    3bb2:	3304      	adds	r3, #4
    3bb4:	4618      	mov	r0, r3
    3bb6:	9903      	ldr	r1, [sp, #12]
    3bb8:	f7ff ff6a 	bl	3a90 <osalEventBroadcastFlagsI>
}
    3bbc:	b005      	add	sp, #20
    3bbe:	f85d fb04 	ldr.w	pc, [sp], #4
    3bc2:	bf00      	nop
    3bc4:	f3af 8000 	nop.w
    3bc8:	f3af 8000 	nop.w
    3bcc:	f3af 8000 	nop.w

00003bd0 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
    3bd0:	b500      	push	{lr}
    3bd2:	b087      	sub	sp, #28
    3bd4:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
    3bd6:	9b01      	ldr	r3, [sp, #4]
    3bd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    3bdc:	9304      	str	r3, [sp, #16]
  uint16_t cr1 = u->CR1;
    3bde:	9b04      	ldr	r3, [sp, #16]
    3be0:	68db      	ldr	r3, [r3, #12]
    3be2:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint16_t sr = u->SR;
    3be6:	9b04      	ldr	r3, [sp, #16]
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    3bee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d00e      	beq.n	3c18 <serve_interrupt+0x48>
    osalSysLockFromISR();
    3bfa:	f7ff ff39 	bl	3a70 <osalSysLockFromISR>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    3bfe:	9b01      	ldr	r3, [sp, #4]
    3c00:	3304      	adds	r3, #4
    3c02:	4618      	mov	r0, r3
    3c04:	f44f 7100 	mov.w	r1, #512	; 0x200
    3c08:	f7ff ff42 	bl	3a90 <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
    3c0c:	9b04      	ldr	r3, [sp, #16]
    3c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
    3c12:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
    3c14:	f7ff ff34 	bl	3a80 <osalSysUnlockFromISR>
  }

  /* Data available.*/
  osalSysLockFromISR();
    3c18:	f7ff ff2a 	bl	3a70 <osalSysLockFromISR>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
    3c1c:	e01f      	b.n	3c5e <serve_interrupt+0x8e>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
    3c1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3c22:	f003 030f 	and.w	r3, r3, #15
    3c26:	2b00      	cmp	r3, #0
    3c28:	d005      	beq.n	3c36 <serve_interrupt+0x66>
      set_error(sdp, sr);
    3c2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3c2e:	9801      	ldr	r0, [sp, #4]
    3c30:	4619      	mov	r1, r3
    3c32:	f7ff ff8d 	bl	3b50 <set_error>
    b = u->DR;
    3c36:	9b04      	ldr	r3, [sp, #16]
    3c38:	685b      	ldr	r3, [r3, #4]
    3c3a:	f88d 300d 	strb.w	r3, [sp, #13]
    if (sr & USART_SR_RXNE)
    3c3e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3c42:	f003 0320 	and.w	r3, r3, #32
    3c46:	2b00      	cmp	r3, #0
    3c48:	d005      	beq.n	3c56 <serve_interrupt+0x86>
      sdIncomingDataI(sdp, b);
    3c4a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3c4e:	9801      	ldr	r0, [sp, #4]
    3c50:	4619      	mov	r1, r3
    3c52:	f7fe f96d 	bl	1f30 <sdIncomingDataI>
    sr = u->SR;
    3c56:	9b04      	ldr	r3, [sp, #16]
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	f8ad 3016 	strh.w	r3, [sp, #22]
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
    3c5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3c62:	f003 032f 	and.w	r3, r3, #47	; 0x2f
    3c66:	2b00      	cmp	r3, #0
    3c68:	d1d9      	bne.n	3c1e <serve_interrupt+0x4e>
    b = u->DR;
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
  }
  osalSysUnlockFromISR();
    3c6a:	f7ff ff09 	bl	3a80 <osalSysUnlockFromISR>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
    3c6e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3c76:	2b00      	cmp	r3, #0
    3c78:	d024      	beq.n	3cc4 <serve_interrupt+0xf4>
    3c7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3c82:	2b00      	cmp	r3, #0
    3c84:	d01e      	beq.n	3cc4 <serve_interrupt+0xf4>
    msg_t b;
    osalSysLockFromISR();
    3c86:	f7ff fef3 	bl	3a70 <osalSysLockFromISR>
    b = oqGetI(&sdp->oqueue);
    3c8a:	9b01      	ldr	r3, [sp, #4]
    3c8c:	3330      	adds	r3, #48	; 0x30
    3c8e:	4618      	mov	r0, r3
    3c90:	f7fd fdf6 	bl	1880 <chOQGetI>
    3c94:	9002      	str	r0, [sp, #8]
    if (b < Q_OK) {
    3c96:	9b02      	ldr	r3, [sp, #8]
    3c98:	2b00      	cmp	r3, #0
    3c9a:	da0e      	bge.n	3cba <serve_interrupt+0xea>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
    3c9c:	9b01      	ldr	r3, [sp, #4]
    3c9e:	3304      	adds	r3, #4
    3ca0:	4618      	mov	r0, r3
    3ca2:	2108      	movs	r1, #8
    3ca4:	f7ff fef4 	bl	3a90 <osalEventBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    3ca8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3cac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    3cb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    3cb4:	9b04      	ldr	r3, [sp, #16]
    3cb6:	60da      	str	r2, [r3, #12]
    3cb8:	e002      	b.n	3cc0 <serve_interrupt+0xf0>
    }
    else
      u->DR = b;
    3cba:	9a02      	ldr	r2, [sp, #8]
    3cbc:	9b04      	ldr	r3, [sp, #16]
    3cbe:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
    3cc0:	f7ff fede 	bl	3a80 <osalSysUnlockFromISR>
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    3cc4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    3cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d01b      	beq.n	3d08 <serve_interrupt+0x138>
    osalSysLockFromISR();
    3cd0:	f7ff fece 	bl	3a70 <osalSysLockFromISR>
    if (oqIsEmptyI(&sdp->oqueue))
    3cd4:	9b01      	ldr	r3, [sp, #4]
    3cd6:	3330      	adds	r3, #48	; 0x30
    3cd8:	4618      	mov	r0, r3
    3cda:	f7ff feb1 	bl	3a40 <chOQIsEmptyI>
    3cde:	4603      	mov	r3, r0
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d005      	beq.n	3cf0 <serve_interrupt+0x120>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    3ce4:	9b01      	ldr	r3, [sp, #4]
    3ce6:	3304      	adds	r3, #4
    3ce8:	4618      	mov	r0, r3
    3cea:	2110      	movs	r1, #16
    3cec:	f7ff fed0 	bl	3a90 <osalEventBroadcastFlagsI>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
    3cf0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3cf4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    3cf8:	9b04      	ldr	r3, [sp, #16]
    3cfa:	60da      	str	r2, [r3, #12]
    u->SR = ~USART_SR_TC;
    3cfc:	9b04      	ldr	r3, [sp, #16]
    3cfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
    3d02:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
    3d04:	f7ff febc 	bl	3a80 <osalSysUnlockFromISR>
  }
}
    3d08:	b007      	add	sp, #28
    3d0a:	f85d fb04 	ldr.w	pc, [sp], #4
    3d0e:	bf00      	nop

00003d10 <notify3>:
  USART2->CR1 |= USART_CR1_TXEIE;
}
#endif

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {
    3d10:	b082      	sub	sp, #8
    3d12:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
    3d14:	4b03      	ldr	r3, [pc, #12]	; (3d24 <notify3+0x14>)
    3d16:	4a03      	ldr	r2, [pc, #12]	; (3d24 <notify3+0x14>)
    3d18:	68d2      	ldr	r2, [r2, #12]
    3d1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3d1e:	60da      	str	r2, [r3, #12]
}
    3d20:	b002      	add	sp, #8
    3d22:	4770      	bx	lr
    3d24:	40004800 	.word	0x40004800
    3d28:	f3af 8000 	nop.w
    3d2c:	f3af 8000 	nop.w

00003d30 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
    3d30:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);
    3d32:	4803      	ldr	r0, [pc, #12]	; (3d40 <VectorDC+0x10>)
    3d34:	f7ff ff4c 	bl	3bd0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
    3d38:	f7fd feea 	bl	1b10 <_port_irq_epilogue>
}
    3d3c:	bd08      	pop	{r3, pc}
    3d3e:	bf00      	nop
    3d40:	20000b44 	.word	0x20000b44
    3d44:	f3af 8000 	nop.w
    3d48:	f3af 8000 	nop.w
    3d4c:	f3af 8000 	nop.w

00003d50 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
    3d50:	b508      	push	{r3, lr}
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
    3d52:	4805      	ldr	r0, [pc, #20]	; (3d68 <sd_lld_init+0x18>)
    3d54:	2100      	movs	r1, #0
    3d56:	4a05      	ldr	r2, [pc, #20]	; (3d6c <sd_lld_init+0x1c>)
    3d58:	f7fe f8a2 	bl	1ea0 <sdObjectInit>
  SD3.usart = USART3;
    3d5c:	4b02      	ldr	r3, [pc, #8]	; (3d68 <sd_lld_init+0x18>)
    3d5e:	4a04      	ldr	r2, [pc, #16]	; (3d70 <sd_lld_init+0x20>)
    3d60:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
    3d64:	bd08      	pop	{r3, pc}
    3d66:	bf00      	nop
    3d68:	20000b44 	.word	0x20000b44
    3d6c:	00003d11 	.word	0x00003d11
    3d70:	40004800 	.word	0x40004800
    3d74:	f3af 8000 	nop.w
    3d78:	f3af 8000 	nop.w
    3d7c:	f3af 8000 	nop.w

00003d80 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
    3d80:	b500      	push	{lr}
    3d82:	b083      	sub	sp, #12
    3d84:	9001      	str	r0, [sp, #4]
    3d86:	9100      	str	r1, [sp, #0]

  if (config == NULL)
    3d88:	9b00      	ldr	r3, [sp, #0]
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	d101      	bne.n	3d92 <sd_lld_start+0x12>
    config = &default_config;
    3d8e:	4b0d      	ldr	r3, [pc, #52]	; (3dc4 <sd_lld_start+0x44>)
    3d90:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
    3d92:	9b01      	ldr	r3, [sp, #4]
    3d94:	7a1b      	ldrb	r3, [r3, #8]
    3d96:	2b01      	cmp	r3, #1
    3d98:	d10d      	bne.n	3db6 <sd_lld_start+0x36>
      rccEnableUSART2(FALSE);
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
    3d9a:	9a01      	ldr	r2, [sp, #4]
    3d9c:	4b0a      	ldr	r3, [pc, #40]	; (3dc8 <sd_lld_start+0x48>)
    3d9e:	429a      	cmp	r2, r3
    3da0:	d109      	bne.n	3db6 <sd_lld_start+0x36>
      rccEnableUSART3(FALSE);
    3da2:	4b0a      	ldr	r3, [pc, #40]	; (3dcc <sd_lld_start+0x4c>)
    3da4:	4a09      	ldr	r2, [pc, #36]	; (3dcc <sd_lld_start+0x4c>)
    3da6:	6c12      	ldr	r2, [r2, #64]	; 0x40
    3da8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3dac:	641a      	str	r2, [r3, #64]	; 0x40
      nvicEnableVector(STM32_USART3_NUMBER, STM32_SERIAL_USART3_PRIORITY);
    3dae:	2027      	movs	r0, #39	; 0x27
    3db0:	210c      	movs	r1, #12
    3db2:	f7fe fdf5 	bl	29a0 <nvicEnableVector>
      rccEnableUART8(FALSE);
      nvicEnableVector(STM32_UART8_NUMBER, STM32_SERIAL_UART8_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
    3db6:	9801      	ldr	r0, [sp, #4]
    3db8:	9900      	ldr	r1, [sp, #0]
    3dba:	f7ff fe79 	bl	3ab0 <usart_init>
}
    3dbe:	b003      	add	sp, #12
    3dc0:	f85d fb04 	ldr.w	pc, [sp], #4
    3dc4:	00003fe0 	.word	0x00003fe0
    3dc8:	20000b44 	.word	0x20000b44
    3dcc:	40023800 	.word	0x40023800

00003dd0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
    3dd0:	b508      	push	{r3, lr}

  stm32_clock_init();
    3dd2:	f7fe fe5d 	bl	2a90 <stm32_clock_init>
}
    3dd6:	bd08      	pop	{r3, pc}
    3dd8:	f3af 8000 	nop.w
    3ddc:	f3af 8000 	nop.w

00003de0 <boardInit>:
/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
}
    3de0:	4770      	bx	lr
    3de2:	bf00      	nop
    3de4:	f3af 8000 	nop.w
    3de8:	f3af 8000 	nop.w
    3dec:	f3af 8000 	nop.w

00003df0 <main>:
	packet[6] = EOT;
	return;
}

int main(void)
{
    3df0:	b500      	push	{lr}
    3df2:	b083      	sub	sp, #12
	halInit();
    3df4:	f7fd fecc 	bl	1b90 <halInit>
	chSysInit();
    3df8:	f7fc fc92 	bl	720 <chSysInit>
	crcInit();
    3dfc:	f000 f850 	bl	3ea0 <crcInit>
	
	uint8_t portSample;
	uint8_t packet[7];
	
	/*Set input pullup mode first 8 ports of gpiod*/
	palSetGroupMode(GPIOA, PAL_GROUP_MASK(8), 0, PAL_MODE_INPUT_PULLUP);
    3e00:	4820      	ldr	r0, [pc, #128]	; (3e84 <main+0x94>)
    3e02:	21ff      	movs	r1, #255	; 0xff
    3e04:	2220      	movs	r2, #32
    3e06:	f7fe fff3 	bl	2df0 <_pal_lld_setgroupmode>
	
	palSetPadMode(GPIOB, 10, PAL_MODE_ALTERNATE(7)); // used function : USART3_TX
    3e0a:	481f      	ldr	r0, [pc, #124]	; (3e88 <main+0x98>)
    3e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3e10:	f240 3282 	movw	r2, #898	; 0x382
    3e14:	f7fe ffec 	bl	2df0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 11, PAL_MODE_ALTERNATE(7)); // used function : USART3_RX
    3e18:	481b      	ldr	r0, [pc, #108]	; (3e88 <main+0x98>)
    3e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3e1e:	f240 3282 	movw	r2, #898	; 0x382
    3e22:	f7fe ffe5 	bl	2df0 <_pal_lld_setgroupmode>
	/* Start the serial driver(change it's state to ready) pointed by arg1 with configurations in arg2
     * if arg2 is NULL then use default configuration in halconf.h*/
	sdStart(&SD3, NULL);
    3e26:	4819      	ldr	r0, [pc, #100]	; (3e8c <main+0x9c>)
    3e28:	2100      	movs	r1, #0
    3e2a:	f7fe f869 	bl	1f00 <sdStart>
	
	/*Read first 8 pin of gipod*/
	while(!0)
	{
		portSample = palReadGroup(GPIOA, PAL_GROUP_MASK(8), 0);
    3e2e:	4b15      	ldr	r3, [pc, #84]	; (3e84 <main+0x94>)
    3e30:	691b      	ldr	r3, [r3, #16]
    3e32:	f88d 3007 	strb.w	r3, [sp, #7]
		if(portSample != 0xFF)//if it's non zero
    3e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3e3a:	2bff      	cmp	r3, #255	; 0xff
    3e3c:	d01d      	beq.n	3e7a <main+0x8a>
		{
			//prepareForSend(packet, portSample);
			packet[0] = portSample;
    3e3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3e42:	f88d 3000 	strb.w	r3, [sp]
			packet[1] = 0U;
    3e46:	2300      	movs	r3, #0
    3e48:	f88d 3001 	strb.w	r3, [sp, #1]
			packet[2] = 0U;
    3e4c:	2300      	movs	r3, #0
    3e4e:	f88d 3002 	strb.w	r3, [sp, #2]
			packet[3] = 0U;
    3e52:	2300      	movs	r3, #0
    3e54:	f88d 3003 	strb.w	r3, [sp, #3]
			packet[4] = 0U;//high byte
    3e58:	2300      	movs	r3, #0
    3e5a:	f88d 3004 	strb.w	r3, [sp, #4]
			packet[5] = 0U;//low byte
    3e5e:	2300      	movs	r3, #0
    3e60:	f88d 3005 	strb.w	r3, [sp, #5]
			packet[6] = 0U;
    3e64:	2300      	movs	r3, #0
    3e66:	f88d 3006 	strb.w	r3, [sp, #6]
			sdWrite(&SD3, (uint8_t *)packet, 7);
    3e6a:	466b      	mov	r3, sp
    3e6c:	4808      	ldr	r0, [pc, #32]	; (3e90 <main+0xa0>)
    3e6e:	4619      	mov	r1, r3
    3e70:	2207      	movs	r2, #7
    3e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3e76:	f7fd fd33 	bl	18e0 <chOQWriteTimeout>
		}
		chThdSleepMilliseconds(5);
    3e7a:	2032      	movs	r0, #50	; 0x32
    3e7c:	f7fd f940 	bl	1100 <chThdSleep>
	}
    3e80:	e7d5      	b.n	3e2e <main+0x3e>
    3e82:	bf00      	nop
    3e84:	40020000 	.word	0x40020000
    3e88:	40020400 	.word	0x40020400
    3e8c:	20000b44 	.word	0x20000b44
    3e90:	20000b74 	.word	0x20000b74
    3e94:	f3af 8000 	nop.w
    3e98:	f3af 8000 	nop.w
    3e9c:	f3af 8000 	nop.w

00003ea0 <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
    3ea0:	b084      	sub	sp, #16


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    3ea2:	2300      	movs	r3, #0
    3ea4:	9302      	str	r3, [sp, #8]
    3ea6:	e031      	b.n	3f0c <crcInit+0x6c>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
    3ea8:	9b02      	ldr	r3, [sp, #8]
    3eaa:	b29b      	uxth	r3, r3
    3eac:	021b      	lsls	r3, r3, #8
    3eae:	f8ad 300e 	strh.w	r3, [sp, #14]

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
    3eb2:	2308      	movs	r3, #8
    3eb4:	f88d 3007 	strb.w	r3, [sp, #7]
    3eb8:	e01b      	b.n	3ef2 <crcInit+0x52>
        {
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
    3eba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3ebe:	b21b      	sxth	r3, r3
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	da0c      	bge.n	3ede <crcInit+0x3e>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
    3ec4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3ec8:	005b      	lsls	r3, r3, #1
    3eca:	b29b      	uxth	r3, r3
    3ecc:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
    3ed0:	f083 037a 	eor.w	r3, r3, #122	; 0x7a
    3ed4:	43db      	mvns	r3, r3
    3ed6:	b29b      	uxth	r3, r3
    3ed8:	f8ad 300e 	strh.w	r3, [sp, #14]
    3edc:	e004      	b.n	3ee8 <crcInit+0x48>
            }
            else
            {
                remainder = (remainder << 1);
    3ede:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3ee2:	005b      	lsls	r3, r3, #1
    3ee4:	f8ad 300e 	strh.w	r3, [sp, #14]
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
    3ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3eec:	3b01      	subs	r3, #1
    3eee:	f88d 3007 	strb.w	r3, [sp, #7]
    3ef2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d1df      	bne.n	3eba <crcInit+0x1a>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    3efa:	4b07      	ldr	r3, [pc, #28]	; (3f18 <crcInit+0x78>)
    3efc:	9a02      	ldr	r2, [sp, #8]
    3efe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    3f02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
    3f06:	9b02      	ldr	r3, [sp, #8]
    3f08:	3301      	adds	r3, #1
    3f0a:	9302      	str	r3, [sp, #8]
    3f0c:	9b02      	ldr	r3, [sp, #8]
    3f0e:	2bff      	cmp	r3, #255	; 0xff
    3f10:	ddca      	ble.n	3ea8 <crcInit+0x8>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
    3f12:	b004      	add	sp, #16
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop
    3f18:	20000c1c 	.word	0x20000c1c
    3f1c:	f3af 8000 	nop.w
    3f20:	656c6469 	.word	0x656c6469
	...

00003f30 <ch_debug>:
    3f30:	6e69616d 18021600 08440404 1814100c     main......D.....
    3f40:	1e1d1c00 00000000 00000000 00000000     ................

00003f50 <vmt>:
    3f50:	00001d31 00001d61 00001d91 00001dc1     1...a...........
    3f60:	00001de1 00001e11 00001e31 00001e61     ........1...a...

00003f70 <zero_status>:
	...

00003f80 <active_status>:
	...

00003f90 <halted_status>:
    3f90:	00000001 00000000 00000000 00000000     ................

00003fa0 <ep0config>:
    3fa0:	00000000 00002651 000027d1 000028e1     ....Q&...'...(..
    3fb0:	00400040 20000b28 20000b28 00000001     @.@.(.. (.. ....
    3fc0:	20000b3c 00000000 00000000 00000000     <.. ............

00003fd0 <fsparams>:
    3fd0:	00000080 00000140 00000003 00000000     ....@...........

00003fe0 <default_config>:
    3fe0:	00002580 40000000 00000000 00000000     .%.....@........

00003ff0 <pal_default_config>:
    3ff0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
    4000:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
    4010:	00000240 ffffffff 55514515 0000ffff     @........EQU....
    4020:	04000000 00000040 02208001 00000000     ....@..... .....
    4030:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
    4040:	00060600 55000100 00000000 ffffffff     .......U........
    4050:	00555055 00000fff 00000000 00000000     UPU.............
    4060:	00000040 00000000 ffffffff 00000000     @...............
    4070:	0000ffff 00000000 00000000 00000000     ................
    4080:	00000000 ffffffff 00000000 0000ffff     ................
	...
    40a0:	ffffffff 00000000 0000ffff 00000000     ................
	...
    40bc:	ffffffff 00000000 0000ffff 00000000     ................
	...
    40d8:	ffffffff 00000000 0000ffff 00000000     ................
    40e8:	00000000                                ....
